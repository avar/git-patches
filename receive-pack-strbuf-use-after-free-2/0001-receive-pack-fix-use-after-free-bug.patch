From ff986e4a0970610143979ae8acdd58939880652f Mon Sep 17 00:00:00 2001
In-Reply-To: <20190218143402.GA9286@sigill.intra.peff.net>
References: <20190218143402.GA9286@sigill.intra.peff.net>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Mon, 18 Feb 2019 14:37:02 +0100
Subject: [PATCH v2] receive-pack: fix use-after-free bug
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The resolve_ref_unsafe() function can, and sometimes will in the case
of this codepath, return the char * passed to it to the caller. In
this case we construct a strbuf, free it, and then continue using the
dst_name after that free().

The code being fixed dates back to da3efdb17b ("receive-pack: detect
aliased updates which can occur with symrefs", 2010-04-19). When it
was originally added it didn't have this bug, it was introduced when
it was subsequently modified to use strbuf in 6b01ecfe22 ("ref
namespaces: Support remote repositories via upload-pack and
receive-pack", 2011-07-08).

This is theoretically a security issue, the C standard makes no
guarantees that a value you use after free() hasn't been poked at or
changed by something else on the system, but in practice modern OSs
will have mapped the relevant page to this process, so nothing else
would have used it. We do no further allocations between the free()
and use-after-free, so we ourselves didn't corrupt or change the
value.

An a alternative and more succinct way of doing this would have been
to do the strbuf_release() at the end of check_aliased_update() and
use "goto out" instead of the early "return" statements. Hopefully
this approach of using a helper instead makes it easier to follow.

Reported-by: 王健强 <jianqiang.wang@securitygossip.com>
Helped-by: Jeff King <peff@peff.net>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
 builtin/receive-pack.c | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

On Mon, Feb 18, 2019 at 3:34 PM Jeff King <peff@peff.net> wrote:
>
> On Mon, Feb 18, 2019 at 02:54:05PM +0100, Ævar Arnfjörð Bjarmason wrote:
>
> > Maybe others have better ideas if/how this can be exploited in
> > practice. The dst_name memory are could point to anything at this
> > point, and we'll first check if it's a valid pointer, then pass it to
> > strip_namespace(), and then use it in a string list lookup. So
> > e.g. with this (which seems possible due to this):
> >
> >             dst_name = (char *)strip_namespace(dst_name);
> >     +       dst_name = "refs/heads/master";
> >
> > We'll fail two tests due to trying to update the wrong ref to the
> > wrong value, whether it's exploitable remotely in practice is another
> > matter.
> >
> > My hunch says no, since any malicious use of this would need to
> > arrange for a remote receive-pack process to "free" memory in such a
> > way that it reads the bad thing you're interested in replacing instead
> > of the value it thought it had. Theoretically possible, but seems
> > implausible in practice.
>
> I don't think there's any way that there can be another allocation
> between the free and the access. Both strip_namespace() and
> string_list_lookup() are effectively read only. Which explains why
> nobody ever noticed this bug, even though it's nearly 8 years old and is
> run on every single ref update of every push. Unless free() is
> scribbling over the memory preemptively, the contents will still be
> there (though I am a little surprised that neither valgrind nor ASan
> noticed).

As noted (hopefully correctly) in the updated commit message here C
makes no guarantees in theory, but I think in practice you're right.

CC-ing this list for now, will wait a bit to see if anyone chimes in
with an objection to going public first...

> I think it's probably fine to just treat this like any normal bug and
> discuss it on the public list.

Agreed.

> Regarding your patch:
>
> > diff --git a/builtin/receive-pack.c b/builtin/receive-pack.c
> > index d58b7750b6..643e641d9b 100644
> > --- a/builtin/receive-pack.c
> > +++ b/builtin/receive-pack.c
> > @@ -1201,13 +1201,18 @@ static void run_update_post_hook(struct command *commands)
> >  static void check_aliased_update(struct command *cmd, struct string_list *list)
> >  {
> >       struct strbuf buf = STRBUF_INIT;
> > -     const char *dst_name;
> > +     int buf_detached = 0;
> > +     char *dst_name;
>
> I think switching to free via dst_name is a mistake. For instance,
> here...
>
> > -     dst_name = strip_namespace(dst_name);
> > +     dst_name = (char *)strip_namespace(dst_name);
>
> We may end up skipping past the namespace prefix of dst_name, after
> which it contains a pointer to the inside of a heap block.
>
> > -     if ((item = string_list_lookup(list, dst_name)) == NULL)
> > +     if ((item = string_list_lookup(list, dst_name)) == NULL) {
> > +             if (buf_detached)
> > +                     free(dst_name);
> >               return;
> > +     }
>
> And then this free() will corrupt the heap.

Eek, well spotted. Thanks.

> I think it's simpler to keep the strbuf as the source of allocation, and
> then these "if detached then free" blocks can just be
> strbuf_release(&buf). Or we can use a goto with a single cleanup point,
> like:
>
> [...]
>
> (If you really hate goto's, I also think everything after
> resolve_ref_unsafe() could go into a helper function).

Don't hate it, but maybe splitting it up like that is easier to read /
maintain? A version of that below:

diff --git a/builtin/receive-pack.c b/builtin/receive-pack.c
index d58b7750b6..0874f5c1b7 100644
--- a/builtin/receive-pack.c
+++ b/builtin/receive-pack.c
@@ -1198,17 +1198,12 @@ static void run_update_post_hook(struct command *commands)
 	}
 }
 
-static void check_aliased_update(struct command *cmd, struct string_list *list)
+static void check_aliased_update_internal(struct command *cmd,
+					  struct string_list *list,
+					  const char *dst_name, int flag)
 {
-	struct strbuf buf = STRBUF_INIT;
-	const char *dst_name;
 	struct string_list_item *item;
 	struct command *dst_cmd;
-	int flag;
-
-	strbuf_addf(&buf, "%s%s", get_git_namespace(), cmd->ref_name);
-	dst_name = resolve_ref_unsafe(buf.buf, 0, NULL, &flag);
-	strbuf_release(&buf);
 
 	if (!(flag & REF_ISSYMREF))
 		return;
@@ -1247,6 +1242,18 @@ static void check_aliased_update(struct command *cmd, struct string_list *list)
 		"inconsistent aliased update";
 }
 
+static void check_aliased_update(struct command *cmd, struct string_list *list)
+{
+	struct strbuf buf = STRBUF_INIT;
+	const char *dst_name;
+	int flag;
+
+	strbuf_addf(&buf, "%s%s", get_git_namespace(), cmd->ref_name);
+	dst_name = resolve_ref_unsafe(buf.buf, 0, NULL, &flag);
+	check_aliased_update_internal(cmd, list, dst_name, flag);
+	strbuf_release(&buf);
+}
+
 static void check_aliased_updates(struct command *commands)
 {
 	struct command *cmd;
-- 
2.21.0.rc0.258.g878e2cd30e

