From 2ad89aca72803eea3818cdd092afd4021d0dc0d1 Mon Sep 17 00:00:00 2001
Message-Id: <cover-0.6-00000000000-20221215T093732Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 15 Dec 2022 10:37:32 +0100
Subject: [PATCH 0/6] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Johannes Schindelin (5):
  bisect--helper: simplify exit code computation
  bisect: verify that a bogus option won't try to start a bisection
  bisect run: fix the error message
  bisect: remove Cogito-related code
  bisect: no longer try to clean up left-over `.git/head-name` files

Ævar Arnfjörð Bjarmason (1):
  bisect--helper: make the order consistently `argc, argv`

 bisect.c                    |  3 ---
 builtin/bisect.c            | 52 ++++++++++++++-----------------------
 t/t6030-bisect-porcelain.sh | 21 ++++++++++++++-
 3 files changed, 40 insertions(+), 36 deletions(-)

Range-diff:
 1:  bcc06fa0615 <  -:  ----------- bisect--helper: retire the --no-log option
 2:  fe771117bcb <  -:  ----------- bisect--helper: really retire --bisect-next-check
 3:  2b88712aac5 <  -:  ----------- bisect--helper: really retire `--bisect-autostart`
 4:  2f6f26745de !  1:  c8c648e4b8c bisect--helper: simplify exit code computation
    @@ Commit message
         Let's use it instead of duplicating the logic.
     
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/bisect--helper.c ##
    -@@ builtin/bisect--helper.c: int cmd_bisect__helper(int argc, const char **argv, const char *prefix)
    + ## builtin/bisect.c ##
    +@@ builtin/bisect.c: int cmd_bisect(int argc, const char **argv, const char *prefix)
    + 		res = fn(argc, argv, prefix);
      	}
    - 	free_terms(&terms);
      
     -	/*
     -	 * Handle early success
 5:  6fbde532386 !  2:  a0de7ad6836 bisect--helper: make `terms` an explicit singleton
    @@
      ## Metadata ##
    -Author: Johannes Schindelin <Johannes.Schindelin@gmx.de>
    +Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    bisect--helper: make `terms` an explicit singleton
    +    bisect--helper: make the order consistently `argc, argv`
     
    -    We tried very hard to keep code in `builtin/bisect--helper.c` in as
    -    libifyable a state as possible.
    +    In C, the natural order is for `argc` to come before `argv` by virtue of
    +    the `main()` function declaring the parameters in precisely that order.
     
    -    However, we are about to migrate this built-in to the `OPT_SUBCOMMAND()`
    -    API, which does not allow for passing any context (e.g. via a `void
    -    *data` parameters as they are used in the config API).
    +    It is confusing & distracting, then, when readers familiar with the C
    +    language read code where that order is switched around.
     
    -    Therefore, we _have_ to move the `terms` variable outside of
    -    `cmd_bisect__helper()` and explicitly make it a singleton (as it
    -    currently is, anyway).
    -
    -    Let's just make things consistent and stop passing around pointers to
    -    that singleton; Use it directly instead.
    +    Let's just change the order and avoid that type of developer friction.
     
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
     
    - ## builtin/bisect--helper.c ##
    -@@ builtin/bisect--helper.c: struct add_bisect_ref_data {
    - 	unsigned int object_flags;
    - };
    - 
    --struct bisect_terms {
    -+static struct bisect_terms {
    - 	char *term_good;
    - 	char *term_bad;
    --};
    -+} terms;
    - 
    --static void free_terms(struct bisect_terms *terms)
    -+static void free_terms(void)
    - {
    --	FREE_AND_NULL(terms->term_good);
    --	FREE_AND_NULL(terms->term_bad);
    -+	FREE_AND_NULL(terms.term_good);
    -+	FREE_AND_NULL(terms.term_bad);
    - }
    - 
    --static void set_terms(struct bisect_terms *terms, const char *bad,
    -+static void set_terms(const char *bad,
    - 		      const char *good)
    - {
    --	free((void *)terms->term_good);
    --	terms->term_good = xstrdup(good);
    --	free((void *)terms->term_bad);
    --	terms->term_bad = xstrdup(bad);
    -+	free((void *)terms.term_good);
    -+	terms.term_good = xstrdup(good);
    -+	free((void *)terms.term_bad);
    -+	terms.term_bad = xstrdup(bad);
    - }
    - 
    - static const char vocab_bad[] = "bad|new";
    - static const char vocab_good[] = "good|old";
    - 
    --static int bisect_autostart(struct bisect_terms *terms);
    -+static int bisect_autostart(void);
    - 
    - /*
    -  * Check whether the string `term` belongs to the set of strings
    -@@ builtin/bisect--helper.c: static void log_commit(FILE *fp, char *fmt, const char *state,
    - 	free(label);
    - }
    - 
    --static int bisect_write(const char *state, const char *rev,
    --			const struct bisect_terms *terms, int nolog)
    -+static int bisect_write(const char *state, const char *rev, int nolog)
    - {
    - 	struct strbuf tag = STRBUF_INIT;
    - 	struct object_id oid;
    -@@ builtin/bisect--helper.c: static int bisect_write(const char *state, const char *rev,
    - 	FILE *fp = NULL;
    - 	int res = 0;
    - 
    --	if (!strcmp(state, terms->term_bad)) {
    -+	if (!strcmp(state, terms.term_bad)) {
    - 		strbuf_addf(&tag, "refs/bisect/%s", state);
    --	} else if (one_of(state, terms->term_good, "skip", NULL)) {
    -+	} else if (one_of(state, terms.term_good, "skip", NULL)) {
    - 		strbuf_addf(&tag, "refs/bisect/%s-%s", state, rev);
    - 	} else {
    - 		res = error(_("Bad bisect_write argument: %s"), state);
    -@@ builtin/bisect--helper.c: static int bisect_write(const char *state, const char *rev,
    - 	return res;
    - }
    - 
    --static int check_and_set_terms(struct bisect_terms *terms, const char *cmd)
    -+static int check_and_set_terms(const char *cmd)
    - {
    - 	int has_term_file = !is_empty_or_missing_file(git_path_bisect_terms());
    - 
    - 	if (one_of(cmd, "skip", "start", "terms", NULL))
    - 		return 0;
    - 
    --	if (has_term_file && strcmp(cmd, terms->term_bad) &&
    --	    strcmp(cmd, terms->term_good))
    -+	if (has_term_file && strcmp(cmd, terms.term_bad) &&
    -+	    strcmp(cmd, terms.term_good))
    - 		return error(_("Invalid command: you're currently in a "
    --				"%s/%s bisect"), terms->term_bad,
    --				terms->term_good);
    -+				"%s/%s bisect"), terms.term_bad,
    -+				terms.term_good);
    - 
    - 	if (!has_term_file) {
    - 		if (one_of(cmd, "bad", "good", NULL)) {
    --			set_terms(terms, "bad", "good");
    --			return write_terms(terms->term_bad, terms->term_good);
    -+			set_terms("bad", "good");
    -+			return write_terms(terms.term_bad, terms.term_good);
    - 		}
    - 		if (one_of(cmd, "new", "old", NULL)) {
    --			set_terms(terms, "new", "old");
    --			return write_terms(terms->term_bad, terms->term_good);
    -+			set_terms("new", "old");
    -+			return write_terms(terms.term_bad, terms.term_good);
    - 		}
    - 	}
    - 
    -@@ builtin/bisect--helper.c: static const char need_bisect_start_warning[] =
    - 	   "You then need to give me at least one %s and %s revision.\n"
    - 	   "You can use \"git bisect %s\" and \"git bisect %s\" for that.");
    - 
    --static int decide_next(const struct bisect_terms *terms,
    --		       const char *current_term, int missing_good,
    -+static int decide_next(const char *current_term, int missing_good,
    - 		       int missing_bad)
    - {
    - 	if (!missing_good && !missing_bad)
    -@@ builtin/bisect--helper.c: static int decide_next(const struct bisect_terms *terms,
    - 		return -1;
    - 
    - 	if (missing_good && !missing_bad &&
    --	    !strcmp(current_term, terms->term_good)) {
    -+	    !strcmp(current_term, terms.term_good)) {
    - 		char *yesno;
    - 		/*
    - 		 * have bad (or new) but not good (or old). We could bisect
    - 		 * although this is less optimum.
    - 		 */
    --		warning(_("bisecting only with a %s commit"), terms->term_bad);
    -+		warning(_("bisecting only with a %s commit"), terms.term_bad);
    - 		if (!isatty(0))
    - 			return 0;
    - 		/*
    -@@ builtin/bisect--helper.c: static int decide_next(const struct bisect_terms *terms,
    - 			     vocab_good, vocab_bad, vocab_good, vocab_bad);
    - }
    - 
    --static void bisect_status(struct bisect_state *state,
    --			  const struct bisect_terms *terms)
    -+static void bisect_status(struct bisect_state *state)
    - {
    --	char *bad_ref = xstrfmt("refs/bisect/%s", terms->term_bad);
    --	char *good_glob = xstrfmt("%s-*", terms->term_good);
    -+	char *bad_ref = xstrfmt("refs/bisect/%s", terms.term_bad);
    -+	char *good_glob = xstrfmt("%s-*", terms.term_good);
    - 
    - 	if (ref_exists(bad_ref))
    - 		state->nr_bad = 1;
    -@@ builtin/bisect--helper.c: static void bisect_log_printf(const char *fmt, ...)
    - 	strbuf_release(&buf);
    - }
    - 
    --static void bisect_print_status(const struct bisect_terms *terms)
    -+static void bisect_print_status(void)
    - {
    - 	struct bisect_state state = { 0 };
    - 
    --	bisect_status(&state, terms);
    -+	bisect_status(&state);
    - 
    - 	/* If we had both, we'd already be started, and shouldn't get here. */
    - 	if (state.nr_good && state.nr_bad)
    -@@ builtin/bisect--helper.c: static void bisect_print_status(const struct bisect_terms *terms)
    - 		bisect_log_printf(_("status: waiting for good commit(s), bad commit known\n"));
    - }
    - 
    --static int bisect_next_check(const struct bisect_terms *terms,
    --			     const char *current_term)
    -+static int bisect_next_check(const char *current_term)
    - {
    - 	struct bisect_state state = { 0 };
    --	bisect_status(&state, terms);
    --	return decide_next(terms, current_term, !state.nr_good, !state.nr_bad);
    -+	bisect_status(&state);
    -+	return decide_next(current_term, !state.nr_good, !state.nr_bad);
    - }
    - 
    --static int get_terms(struct bisect_terms *terms)
    -+static int get_terms(void)
    - {
    - 	struct strbuf str = STRBUF_INIT;
    - 	FILE *fp = NULL;
    -@@ builtin/bisect--helper.c: static int get_terms(struct bisect_terms *terms)
    - 		goto finish;
    - 	}
    - 
    --	free_terms(terms);
    -+	free_terms();
    - 	strbuf_getline_lf(&str, fp);
    --	terms->term_bad = strbuf_detach(&str, NULL);
    -+	terms.term_bad = strbuf_detach(&str, NULL);
    - 	strbuf_getline_lf(&str, fp);
    --	terms->term_good = strbuf_detach(&str, NULL);
    -+	terms.term_good = strbuf_detach(&str, NULL);
    - 
    - finish:
    - 	if (fp)
    -@@ builtin/bisect--helper.c: static int get_terms(struct bisect_terms *terms)
    - 	return res;
    - }
    - 
    --static int bisect_terms(struct bisect_terms *terms, const char *option)
    -+static int bisect_terms(const char *option)
    - {
    --	if (get_terms(terms))
    -+	if (get_terms())
    - 		return error(_("no terms defined"));
    - 
    - 	if (!option) {
    - 		printf(_("Your current terms are %s for the old state\n"
    - 			 "and %s for the new state.\n"),
    --		       terms->term_good, terms->term_bad);
    -+		       terms.term_good, terms.term_bad);
    - 		return 0;
    - 	}
    - 	if (one_of(option, "--term-good", "--term-old", NULL))
    --		printf("%s\n", terms->term_good);
    -+		printf("%s\n", terms.term_good);
    - 	else if (one_of(option, "--term-bad", "--term-new", NULL))
    --		printf("%s\n", terms->term_bad);
    -+		printf("%s\n", terms.term_bad);
    - 	else
    - 		return error(_("invalid argument %s for 'git bisect terms'.\n"
    - 			       "Supported options are: "
    -@@ builtin/bisect--helper.c: static int add_bisect_ref(const char *refname, const struct object_id *oid,
    - 	return 0;
    - }
    - 
    --static int prepare_revs(struct bisect_terms *terms, struct rev_info *revs)
    -+static int prepare_revs(struct rev_info *revs)
    - {
    - 	int res = 0;
    - 	struct add_bisect_ref_data cb = { revs };
    --	char *good = xstrfmt("%s-*", terms->term_good);
    -+	char *good = xstrfmt("%s-*", terms.term_good);
    - 
    - 	/*
    --	 * We cannot use terms->term_bad directly in
    -+	 * We cannot use terms.term_bad directly in
    - 	 * for_each_glob_ref_in() and we have to append a '*' to it,
    - 	 * otherwise for_each_glob_ref_in() will append '/' and '*'.
    - 	 */
    --	char *bad = xstrfmt("%s*", terms->term_bad);
    -+	char *bad = xstrfmt("%s*", terms.term_bad);
    - 
    - 	/*
    - 	 * It is important to reset the flags used by revision walks
    -@@ builtin/bisect--helper.c: static int prepare_revs(struct bisect_terms *terms, struct rev_info *revs)
    - 	return res;
    - }
    - 
    --static int bisect_skipped_commits(struct bisect_terms *terms)
    -+static int bisect_skipped_commits(void)
    - {
    - 	int res;
    - 	FILE *fp = NULL;
    -@@ builtin/bisect--helper.c: static int bisect_skipped_commits(struct bisect_terms *terms)
    - 	struct pretty_print_context pp = {0};
    - 	struct strbuf commit_name = STRBUF_INIT;
    - 
    --	res = prepare_revs(terms, &revs);
    -+	res = prepare_revs(&revs);
    - 	if (res)
    - 		return res;
    - 
    -@@ builtin/bisect--helper.c: static int bisect_skipped_commits(struct bisect_terms *terms)
    - 		format_commit_message(commit, "%s",
    - 				      &commit_name, &pp);
    - 		fprintf(fp, "# possible first %s commit: [%s] %s\n",
    --			terms->term_bad, oid_to_hex(&commit->object.oid),
    -+			terms.term_bad, oid_to_hex(&commit->object.oid),
    - 			commit_name.buf);
    - 	}
    - 
    -@@ builtin/bisect--helper.c: static int bisect_skipped_commits(struct bisect_terms *terms)
    - 	return 0;
    - }
    - 
    --static int bisect_successful(struct bisect_terms *terms)
    -+static int bisect_successful(void)
    - {
    - 	struct object_id oid;
    - 	struct commit *commit;
    - 	struct pretty_print_context pp = {0};
    - 	struct strbuf commit_name = STRBUF_INIT;
    --	char *bad_ref = xstrfmt("refs/bisect/%s",terms->term_bad);
    -+	char *bad_ref = xstrfmt("refs/bisect/%s",terms.term_bad);
    - 	int res;
    - 
    - 	read_ref(bad_ref, &oid);
    -@@ builtin/bisect--helper.c: static int bisect_successful(struct bisect_terms *terms)
    - 	format_commit_message(commit, "%s", &commit_name, &pp);
    - 
    - 	res = append_to_file(git_path_bisect_log(), "# first %s commit: [%s] %s\n",
    --			    terms->term_bad, oid_to_hex(&commit->object.oid),
    -+			    terms.term_bad, oid_to_hex(&commit->object.oid),
    - 			    commit_name.buf);
    - 
    - 	strbuf_release(&commit_name);
    -@@ builtin/bisect--helper.c: static int bisect_successful(struct bisect_terms *terms)
    - 	return res;
    - }
    - 
    --static enum bisect_error bisect_next(struct bisect_terms *terms, const char *prefix)
    -+static enum bisect_error bisect_next(const char *prefix)
    - {
    - 	enum bisect_error res;
    - 
    --	if (bisect_autostart(terms))
    -+	if (bisect_autostart())
    - 		return BISECT_FAILED;
    - 
    --	if (bisect_next_check(terms, terms->term_good))
    -+	if (bisect_next_check(terms.term_good))
    - 		return BISECT_FAILED;
    - 
    - 	/* Perform all bisection computation */
    - 	res = bisect_next_all(the_repository, prefix);
    - 
    - 	if (res == BISECT_INTERNAL_SUCCESS_1ST_BAD_FOUND) {
    --		res = bisect_successful(terms);
    -+		res = bisect_successful();
    - 		return res ? res : BISECT_INTERNAL_SUCCESS_1ST_BAD_FOUND;
    - 	} else if (res == BISECT_ONLY_SKIPPED_LEFT) {
    --		res = bisect_skipped_commits(terms);
    -+		res = bisect_skipped_commits();
    - 		return res ? res : BISECT_ONLY_SKIPPED_LEFT;
    - 	}
    - 	return res;
    - }
    - 
    --static enum bisect_error bisect_auto_next(struct bisect_terms *terms, const char *prefix)
    -+static enum bisect_error bisect_auto_next(const char *prefix)
    - {
    --	if (bisect_next_check(terms, NULL)) {
    --		bisect_print_status(terms);
    -+	if (bisect_next_check(NULL)) {
    -+		bisect_print_status();
    - 		return BISECT_OK;
    - 	}
    - 
    --	return bisect_next(terms, prefix);
    -+	return bisect_next(prefix);
    + ## builtin/bisect.c ##
    +@@ builtin/bisect.c: static enum bisect_error bisect_auto_next(struct bisect_terms *terms, const char
    + 	return bisect_next(terms, prefix);
      }
      
     -static enum bisect_error bisect_start(struct bisect_terms *terms, const char **argv, int argc)
    -+static enum bisect_error bisect_start(const char **argv, int argc)
    ++static enum bisect_error bisect_start(struct bisect_terms *terms, int argc,
    ++				      const char **argv)
      {
      	int no_checkout = 0;
      	int first_parent_only = 0;
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_start(struct bisect_terms *terms, const char **a
    - 			if (argc <= i)
    - 				return error(_("'' is not a valid term"));
    - 			must_write_terms = 1;
    --			free((void *) terms->term_good);
    --			terms->term_good = xstrdup(argv[i]);
    -+			free((void *) terms.term_good);
    -+			terms.term_good = xstrdup(argv[i]);
    - 		} else if (skip_prefix(arg, "--term-good=", &arg) ||
    - 			   skip_prefix(arg, "--term-old=", &arg)) {
    - 			must_write_terms = 1;
    --			free((void *) terms->term_good);
    --			terms->term_good = xstrdup(arg);
    -+			free((void *) terms.term_good);
    -+			terms.term_good = xstrdup(arg);
    - 		} else if (!strcmp(arg, "--term-bad") ||
    - 			 !strcmp(arg, "--term-new")) {
    - 			i++;
    - 			if (argc <= i)
    - 				return error(_("'' is not a valid term"));
    - 			must_write_terms = 1;
    --			free((void *) terms->term_bad);
    --			terms->term_bad = xstrdup(argv[i]);
    -+			free((void *) terms.term_bad);
    -+			terms.term_bad = xstrdup(argv[i]);
    - 		} else if (skip_prefix(arg, "--term-bad=", &arg) ||
    - 			   skip_prefix(arg, "--term-new=", &arg)) {
    - 			must_write_terms = 1;
    --			free((void *) terms->term_bad);
    --			terms->term_bad = xstrdup(arg);
    -+			free((void *) terms.term_bad);
    -+			terms.term_bad = xstrdup(arg);
    - 		} else if (starts_with(arg, "--")) {
    - 			return error(_("unrecognized option: '%s'"), arg);
    - 		} else if (!get_oidf(&oid, "%s^{commit}", arg)) {
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_start(struct bisect_terms *terms, const char **a
    - 		must_write_terms = 1;
    - 	for (i = 0; i < revs.nr; i++) {
    - 		if (bad_seen) {
    --			string_list_append(&states, terms->term_good);
    -+			string_list_append(&states, terms.term_good);
    - 		} else {
    - 			bad_seen = 1;
    --			string_list_append(&states, terms->term_bad);
    -+			string_list_append(&states, terms.term_bad);
    - 		}
    - 	}
    - 
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_start(struct bisect_terms *terms, const char **a
    - 
    - 	for (i = 0; i < states.nr; i++)
    - 		if (bisect_write(states.items[i].string,
    --				 revs.items[i].string, terms, 1)) {
    -+				 revs.items[i].string, 1)) {
    - 			res = BISECT_FAILED;
    - 			goto finish;
    - 		}
    - 
    --	if (must_write_terms && write_terms(terms->term_bad,
    --					    terms->term_good)) {
    -+	if (must_write_terms && write_terms(terms.term_bad,
    -+					    terms.term_good)) {
    - 		res = BISECT_FAILED;
    - 		goto finish;
    - 	}
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_start(struct bisect_terms *terms, const char **a
    - 	if (res)
    - 		return res;
    - 
    --	res = bisect_auto_next(terms, NULL);
    -+	res = bisect_auto_next(NULL);
    - 	if (!is_bisect_success(res))
    - 		bisect_clean_state();
    - 	return res;
    -@@ builtin/bisect--helper.c: static inline int file_is_not_empty(const char *path)
    - 	return !is_empty_or_missing_file(path);
    - }
    - 
    --static int bisect_autostart(struct bisect_terms *terms)
    -+static int bisect_autostart(void)
    - {
    - 	int res;
    - 	const char *yesno;
    -@@ builtin/bisect--helper.c: static int bisect_autostart(struct bisect_terms *terms)
    +@@ builtin/bisect.c: static int bisect_autostart(struct bisect_terms *terms)
      	yesno = git_prompt(_("Do you want me to do it for you "
      			     "[Y/n]? "), PROMPT_ECHO);
      	res = tolower(*yesno) == 'n' ?
     -		-1 : bisect_start(terms, empty_strvec, 0);
    -+		-1 : bisect_start(empty_strvec, 0);
    ++		-1 : bisect_start(terms, 0, empty_strvec);
      
      	return res;
      }
      
     -static enum bisect_error bisect_state(struct bisect_terms *terms, const char **argv,
    -+static enum bisect_error bisect_state(const char **argv,
    - 				      int argc)
    +-				      int argc)
    ++static enum bisect_error bisect_state(struct bisect_terms *terms, int argc,
    ++				      const char **argv)
      {
      	const char *state;
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_state(struct bisect_terms *terms, const char **a
    - 	if (!argc)
    - 		return error(_("Please call `--bisect-state` with at least one argument"));
    - 
    --	if (bisect_autostart(terms))
    -+	if (bisect_autostart())
    - 		return BISECT_FAILED;
    - 
    - 	state = argv[0];
    --	if (check_and_set_terms(terms, state) ||
    --	    !one_of(state, terms->term_good, terms->term_bad, "skip", NULL))
    -+	if (check_and_set_terms(state) ||
    -+	    !one_of(state, terms.term_good, terms.term_bad, "skip", NULL))
    - 		return BISECT_FAILED;
    - 
    - 	argv++;
    - 	argc--;
    --	if (argc > 1 && !strcmp(state, terms->term_bad))
    --		return error(_("'git bisect %s' can take only one argument."), terms->term_bad);
    -+	if (argc > 1 && !strcmp(state, terms.term_bad))
    -+		return error(_("'git bisect %s' can take only one argument."), terms.term_bad);
    - 
    - 	if (argc == 0) {
    - 		const char *head = "BISECT_HEAD";
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_state(struct bisect_terms *terms, const char **a
    - 	strbuf_release(&buf);
    - 
    - 	for (i = 0; i < revs.nr; i++) {
    --		if (bisect_write(state, oid_to_hex(&revs.oid[i]), terms, 0)) {
    -+		if (bisect_write(state, oid_to_hex(&revs.oid[i]), 0)) {
    - 			oid_array_clear(&revs);
    - 			return BISECT_FAILED;
    - 		}
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_state(struct bisect_terms *terms, const char **a
    - 	}
    - 
    - 	oid_array_clear(&revs);
    --	return bisect_auto_next(terms, NULL);
    -+	return bisect_auto_next(NULL);
    - }
    - 
    - static enum bisect_error bisect_log(void)
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_log(void)
    - 	return status ? BISECT_FAILED : BISECT_OK;
    - }
    - 
    --static int process_replay_line(struct bisect_terms *terms, struct strbuf *line)
    -+static int process_replay_line(struct strbuf *line)
    - {
    - 	const char *p = line->buf + strspn(line->buf, " \t");
    - 	char *word_end, *rev;
    -@@ builtin/bisect--helper.c: static int process_replay_line(struct bisect_terms *terms, struct strbuf *line)
    - 	rev = word_end + strspn(word_end, " \t");
    - 	*word_end = '\0'; /* NUL-terminate the word */
    - 
    --	get_terms(terms);
    --	if (check_and_set_terms(terms, p))
    -+	get_terms();
    -+	if (check_and_set_terms(p))
    - 		return -1;
    - 
    - 	if (!strcmp(p, "start")) {
    + 	int i, verify_expected = 1;
    +@@ builtin/bisect.c: static int process_replay_line(struct bisect_terms *terms, struct strbuf *line)
      		struct strvec argv = STRVEC_INIT;
      		int res;
      		sq_dequote_to_strvec(rev, &argv);
     -		res = bisect_start(terms, argv.v, argv.nr);
    -+		res = bisect_start(argv.v, argv.nr);
    - 		strvec_clear(&argv);
    - 		return res;
    - 	}
    - 
    --	if (one_of(p, terms->term_good,
    --	   terms->term_bad, "skip", NULL))
    --		return bisect_write(p, rev, terms, 0);
    -+	if (one_of(p, terms.term_good,
    -+	   terms.term_bad, "skip", NULL))
    -+		return bisect_write(p, rev, 0);
    - 
    - 	if (!strcmp(p, "terms")) {
    - 		struct strvec argv = STRVEC_INIT;
    - 		int res;
    - 		sq_dequote_to_strvec(rev, &argv);
    --		res = bisect_terms(terms, argv.nr == 1 ? argv.v[0] : NULL);
    -+		res = bisect_terms(argv.nr == 1 ? argv.v[0] : NULL);
    ++		res = bisect_start(terms, argv.nr, argv.v);
      		strvec_clear(&argv);
      		return res;
      	}
    -@@ builtin/bisect--helper.c: static int process_replay_line(struct bisect_terms *terms, struct strbuf *line)
    - 	return -1;
    - }
    - 
    --static enum bisect_error bisect_replay(struct bisect_terms *terms, const char *filename)
    -+static enum bisect_error bisect_replay(const char *filename)
    - {
    - 	FILE *fp = NULL;
    - 	enum bisect_error res = BISECT_OK;
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_replay(struct bisect_terms *terms, const char *f
    - 		return BISECT_FAILED;
    - 
    - 	while ((strbuf_getline(&line, fp) != EOF) && !res)
    --		res = process_replay_line(terms, &line);
    -+		res = process_replay_line(&line);
    - 
    - 	strbuf_release(&line);
    - 	fclose(fp);
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_replay(struct bisect_terms *terms, const char *f
    - 	if (res)
    - 		return BISECT_FAILED;
    - 
    --	return bisect_auto_next(terms, NULL);
    -+	return bisect_auto_next(NULL);
    +@@ builtin/bisect.c: static enum bisect_error bisect_replay(struct bisect_terms *terms, const char *f
    + 	return bisect_auto_next(terms, NULL);
      }
      
     -static enum bisect_error bisect_skip(struct bisect_terms *terms, const char **argv, int argc)
    -+static enum bisect_error bisect_skip(const char **argv, int argc)
    ++static enum bisect_error bisect_skip(struct bisect_terms *terms, int argc,
    ++				     const char **argv)
      {
      	int i;
      	enum bisect_error res;
    -@@ builtin/bisect--helper.c: static enum bisect_error bisect_skip(struct bisect_terms *terms, const char **ar
    +@@ builtin/bisect.c: static enum bisect_error bisect_skip(struct bisect_terms *terms, const char **ar
      			strvec_push(&argv_state, argv[i]);
      		}
      	}
     -	res = bisect_state(terms, argv_state.v, argv_state.nr);
    -+	res = bisect_state(argv_state.v, argv_state.nr);
    ++	res = bisect_state(terms, argv_state.nr, argv_state.v);
      
      	strvec_clear(&argv_state);
      	return res;
      }
      
     -static int bisect_visualize(struct bisect_terms *terms, const char **argv, int argc)
    -+static int bisect_visualize(const char **argv, int argc)
    ++static int bisect_visualize(struct bisect_terms *terms, int argc,
    ++			    const char **argv)
      {
    - 	struct strvec args = STRVEC_INIT;
    - 	int flags = RUN_COMMAND_NO_STDIN, res = 0;
    + 	struct child_process cmd = CHILD_PROCESS_INIT;
      	struct strbuf sb = STRBUF_INIT;
    - 
    --	if (bisect_next_check(terms, NULL) != 0)
    -+	if (bisect_next_check(NULL) != 0)
    - 		return BISECT_FAILED;
    - 
    - 	if (!argc) {
    -@@ builtin/bisect--helper.c: static int get_first_good(const char *refname, const struct object_id *oid,
    - 	return 1;
    - }
    - 
    --static int verify_good(const struct bisect_terms *terms,
    --		       const char **quoted_argv)
    -+static int verify_good(const char **quoted_argv)
    - {
    - 	int rc;
    - 	enum bisect_error res;
    - 	struct object_id good_rev;
    - 	struct object_id current_rev;
    --	char *good_glob = xstrfmt("%s-*", terms->term_good);
    -+	char *good_glob = xstrfmt("%s-*", terms.term_good);
    - 	int no_checkout = ref_exists("BISECT_HEAD");
    - 
    - 	for_each_glob_ref_in(get_first_good, good_glob, "refs/bisect/",
    -@@ builtin/bisect--helper.c: static int verify_good(const struct bisect_terms *terms,
    +@@ builtin/bisect.c: static int verify_good(const struct bisect_terms *terms, const char *command)
      	return rc;
      }
      
     -static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
    -+static int bisect_run(const char **argv, int argc)
    ++static int bisect_run(struct bisect_terms *terms, int argc, const char **argv)
      {
      	int res = BISECT_OK;
      	struct strbuf command = STRBUF_INIT;
    -@@ builtin/bisect--helper.c: static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
    - 	int temporary_stdout_fd, saved_stdout;
    - 	int is_first_run = 1;
    - 
    --	if (bisect_next_check(terms, NULL))
    -+	if (bisect_next_check(NULL))
    - 		return BISECT_FAILED;
    - 
    - 	if (argc)
    -@@ builtin/bisect--helper.c: static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
    - 		 * missing or non-executable script.
    - 		 */
    - 		if (is_first_run && (res == 126 || res == 127)) {
    --			int rc = verify_good(terms, run_args.v);
    -+			int rc = verify_good(run_args.v);
    - 			is_first_run = 0;
    - 			if (rc < 0) {
    - 				error(_("unable to verify '%s' on good"
    -@@ builtin/bisect--helper.c: static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
    - 		if (res == 125)
    - 			new_state = "skip";
    - 		else if (!res)
    --			new_state = terms->term_good;
    -+			new_state = terms.term_good;
    - 		else
    --			new_state = terms->term_bad;
    -+			new_state = terms.term_bad;
    - 
    - 		temporary_stdout_fd = open(git_path_bisect_run(), O_CREAT | O_WRONLY | O_TRUNC, 0666);
    - 
    -@@ builtin/bisect--helper.c: static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
    +@@ builtin/bisect.c: static int bisect_run(struct bisect_terms *terms, const char **argv, int argc)
      		saved_stdout = dup(1);
      		dup2(temporary_stdout_fd, 1);
      
     -		res = bisect_state(terms, &new_state, 1);
    -+		res = bisect_state(&new_state, 1);
    ++		res = bisect_state(terms, 1, &new_state);
      
      		fflush(stdout);
      		dup2(saved_stdout, 1);
    -@@ builtin/bisect--helper.c: int cmd_bisect__helper(int argc, const char **argv, const char *prefix)
    - 			 N_("use <cmd>... to automatically bisect"), BISECT_RUN),
    - 		OPT_END()
    - 	};
    --	struct bisect_terms terms = { .term_good = NULL, .term_bad = NULL };
    +@@ builtin/bisect.c: static int cmd_bisect__start(int argc, const char **argv, const char *prefix UNU
    + 	struct bisect_terms terms = { 0 };
      
    - 	argc = parse_options(argc, argv, prefix, options,
    - 			     git_bisect_helper_usage,
    -@@ builtin/bisect--helper.c: int cmd_bisect__helper(int argc, const char **argv, const char *prefix)
    - 	case BISECT_TERMS:
    - 		if (argc > 1)
    - 			return error(_("--bisect-terms requires 0 or 1 argument"));
    --		res = bisect_terms(&terms, argc == 1 ? argv[0] : NULL);
    -+		res = bisect_terms(argc == 1 ? argv[0] : NULL);
    - 		break;
    - 	case BISECT_START:
    --		set_terms(&terms, "bad", "good");
    --		res = bisect_start(&terms, argv, argc);
    -+		set_terms("bad", "good");
    -+		res = bisect_start(argv, argc);
    - 		break;
    - 	case BISECT_NEXT:
    - 		if (argc)
    - 			return error(_("--bisect-next requires 0 arguments"));
    --		get_terms(&terms);
    --		res = bisect_next(&terms, prefix);
    -+		get_terms();
    -+		res = bisect_next(prefix);
    - 		break;
    - 	case BISECT_STATE:
    --		set_terms(&terms, "bad", "good");
    --		get_terms(&terms);
    --		res = bisect_state(&terms, argv, argc);
    -+		set_terms("bad", "good");
    -+		get_terms();
    -+		res = bisect_state(argv, argc);
    - 		break;
    - 	case BISECT_LOG:
    - 		if (argc)
    -@@ builtin/bisect--helper.c: int cmd_bisect__helper(int argc, const char **argv, const char *prefix)
    - 	case BISECT_REPLAY:
    - 		if (argc != 1)
    - 			return error(_("no logfile given"));
    --		set_terms(&terms, "bad", "good");
    --		res = bisect_replay(&terms, argv[0]);
    -+		set_terms("bad", "good");
    -+		res = bisect_replay(argv[0]);
    - 		break;
    - 	case BISECT_SKIP:
    --		set_terms(&terms, "bad", "good");
    --		get_terms(&terms);
    --		res = bisect_skip(&terms, argv, argc);
    -+		set_terms("bad", "good");
    -+		get_terms();
    -+		res = bisect_skip(argv, argc);
    - 		break;
    - 	case BISECT_VISUALIZE:
    --		get_terms(&terms);
    --		res = bisect_visualize(&terms, argv, argc);
    -+		get_terms();
    -+		res = bisect_visualize(argv, argc);
    - 		break;
    - 	case BISECT_RUN:
    - 		if (!argc)
    - 			return error(_("bisect run failed: no command provided."));
    --		get_terms(&terms);
    --		res = bisect_run(&terms, argv, argc);
    -+		get_terms();
    -+		res = bisect_run(argv, argc);
    - 		break;
    - 	default:
    - 		BUG("unknown subcommand %d", cmdmode);
    - 	}
    --	free_terms(&terms);
    -+	free_terms();
    + 	set_terms(&terms, "bad", "good");
    +-	res = bisect_start(&terms, argv, argc);
    ++	res = bisect_start(&terms, argc, argv);
    + 	free_terms(&terms);
    + 	return res;
    + }
    +@@ builtin/bisect.c: static int cmd_bisect__skip(int argc, const char **argv, const char *prefix UNUS
      
    - 	return is_bisect_success(res) ? 0 : -res;
    + 	set_terms(&terms, "bad", "good");
    + 	get_terms(&terms);
    +-	res = bisect_skip(&terms, argv, argc);
    ++	res = bisect_skip(&terms, argc, argv);
    + 	free_terms(&terms);
    + 	return res;
      }
    +@@ builtin/bisect.c: static int cmd_bisect__visualize(int argc, const char **argv, const char *prefix
    + 	struct bisect_terms terms = { 0 };
    + 
    + 	get_terms(&terms);
    +-	res = bisect_visualize(&terms, argv, argc);
    ++	res = bisect_visualize(&terms, argc, argv);
    + 	free_terms(&terms);
    + 	return res;
    + }
    +@@ builtin/bisect.c: static int cmd_bisect__run(int argc, const char **argv, const char *prefix UNUSE
    + 	if (!argc)
    + 		return error(_("'%s' failed: no command provided."), "git bisect run");
    + 	get_terms(&terms);
    +-	res = bisect_run(&terms, argv, argc);
    ++	res = bisect_run(&terms, argc, argv);
    + 	free_terms(&terms);
    + 	return res;
    + }
    +@@ builtin/bisect.c: int cmd_bisect(int argc, const char **argv, const char *prefix)
    + 		if (check_and_set_terms(&terms, argv[0]))
    + 			usage_msg_optf(_("unknown command: '%s'"), git_bisect_usage,
    + 				       options, argv[0]);
    +-		res = bisect_state(&terms, argv, argc);
    ++		res = bisect_state(&terms, argc, argv);
    + 		free_terms(&terms);
    + 	} else {
    + 		argc--;
 6:  0f0d5c1bd44 <  -:  ----------- bisect--helper: make the order consistently `argc, argv`
 7:  d3d20503b18 <  -:  ----------- bisect--helper: migrate to OPT_SUBCOMMAND()
 8:  299807cce9b !  3:  e1e31278fef bisect: verify that a bogus option won't try to start a bisection
    @@ Commit message
         by "git bisect start"` and fail if it was found.
     
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## t/t6030-bisect-porcelain.sh ##
     @@ t/t6030-bisect-porcelain.sh: test_expect_success 'bisect start with one term1 and term2' '
 9:  ab542074feb !  4:  59a8a3085b1 bisect run: fix the error message
    @@ Commit message
     
         Helped-by: Elijah Newren <newren@gmail.com>
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/bisect--helper.c ##
    -@@ builtin/bisect--helper.c: static int cmd_bisect_run(int argc, const char **argv, const char *prefix)
    - 			printf(_("bisect found first bad commit"));
    + ## builtin/bisect.c ##
    +@@ builtin/bisect.c: static int bisect_run(struct bisect_terms *terms, int argc, const char **argv)
    + 			puts(_("bisect found first bad commit"));
      			res = BISECT_OK;
      		} else if (res) {
    --			error(_("bisect run failed: 'git bisect--helper --bisect-state"
    -+			error(_("bisect run failed: 'git bisect"
    - 			" %s' exited with error code %d"), new_state, res);
    +-			error(_("bisect run failed: 'bisect-state %s'"
    ++			error(_("bisect run failed: 'git bisect %s'"
    + 				" exited with error code %d"), new_state, res);
      		} else {
      			continue;
     
10:  c9d56fa5d96 <  -:  ----------- bisect: avoid double-quoting when printing the failed command
11:  b34641e0b60 <  -:  ----------- bisect--helper: calling `bisect_state()` without an argument is a bug
12:  853e84ad658 <  -:  ----------- bisect--helper: make `state` optional
13:  06f15293d38 <  -:  ----------- bisect: move even the command-line parsing to `bisect--helper`
14:  70c9b092836 <  -:  ----------- Turn `git bisect` into a full built-in
15:  25efb01dc19 !  5:  1b70cd79cae bisect: remove Cogito-related code
    @@ Commit message
         remove the last remnant of Cogito-accommodating code.
     
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## builtin/bisect.c ##
     @@ builtin/bisect.c: static GIT_PATH_FUNC(git_path_bisect_expected_rev, "BISECT_EXPECTED_REV")
    @@ builtin/bisect.c: static GIT_PATH_FUNC(git_path_bisect_expected_rev, "BISECT_EXP
      static GIT_PATH_FUNC(git_path_bisect_names, "BISECT_NAMES")
      static GIT_PATH_FUNC(git_path_bisect_first_parent, "BISECT_FIRST_PARENT")
      static GIT_PATH_FUNC(git_path_bisect_run, "BISECT_RUN")
    -@@ builtin/bisect.c: static int cmd_bisect_start(int argc, const char **argv, const char *prefix)
    +@@ builtin/bisect.c: static enum bisect_error bisect_start(struct bisect_terms *terms, int argc,
      			strbuf_addstr(&start_head, oid_to_hex(&head_oid));
      		} else if (!get_oid(head, &head_oid) &&
      			   skip_prefix(head, "refs/heads/", &head)) {
16:  e0d974bbfa8 !  6:  2ad89aca728 bisect: no longer try to clean up left-over `.git/head-name` files
    @@ Commit message
         So let's remove that code, at long last.
     
         Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## bisect.c ##
     @@ bisect.c: static GIT_PATH_FUNC(git_path_bisect_start, "BISECT_START")
-- 
2.39.0.rc2.1048.g0e5493b8d5b

