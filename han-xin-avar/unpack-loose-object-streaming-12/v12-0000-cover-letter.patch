From 34ee6a28a54729f88aa9d417cac4a31d985879b6 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v12-0.8-00000000000-20220329T131752Z-avarab@gmail.com>
In-Reply-To: <cover-v11-0.8-00000000000-20220319T001411Z-avarab@gmail.com> --range-diff=han-xin-avar/unpack-loose-object-streaming-11>
References: <cover-v11-0.8-00000000000-20220319T001411Z-avarab@gmail.com> --range-diff=han-xin-avar/unpack-loose-object-streaming-11>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 29 Mar 2022 15:17:52 +0200
Subject: [PATCH v12 0/8] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Han Xin (4):
  unpack-objects: low memory footprint for get_data() in dry_run mode
  object-file.c: refactor write_loose_object() to several steps
  object-file.c: add "stream_loose_object()" to handle large object
  unpack-objects: use stream_loose_object() to unpack large objects

Ævar Arnfjörð Bjarmason (4):
  object-file.c: do fsync() and close() before post-write die()
  object-file.c: factor out deflate part of write_loose_object()
  core doc: modernize core.bigFileThreshold documentation
  unpack-objects: refactor away unpack_non_delta_entry()

 Documentation/config/core.txt   |  33 +++--
 builtin/unpack-objects.c        | 109 +++++++++++---
 object-file.c                   | 246 +++++++++++++++++++++++++++-----
 object-store.h                  |   8 ++
 t/t5351-unpack-large-objects.sh |  61 ++++++++
 5 files changed, 396 insertions(+), 61 deletions(-)
 create mode 100755 t/t5351-unpack-large-objects.sh

-- 
2.35.1.1548.g36973b18e52

