From cb9ef7a89c42b9c925a7e926754c02d690f6191e Mon Sep 17 00:00:00 2001
Message-Id: <cover-0.5-00000000000-20230123T170349Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Mon, 23 Jan 2023 18:03:49 +0100
Subject: [PATCH 0/5] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Emily Shaffer (4):
  run-command: allow stdin for run_processes_parallel
  hook API: support passing stdin to hooks, convert am's 'post-rewrite'
  sequencer: use the new hook API for the simpler "post-rewrite" call
  hook: support a --to-stdin=<path> option for testing

Ævar Arnfjörð Bjarmason (1):
  run-command.c: remove dead assignment in while-loop

 Documentation/git-hook.txt |  7 ++++++-
 builtin/am.c               | 20 ++++----------------
 builtin/hook.c             |  4 +++-
 hook.c                     |  8 +++++++-
 hook.h                     |  5 +++++
 run-command.c              | 13 +++++++++----
 sequencer.c                | 18 ++++--------------
 t/t1800-hook.sh            | 18 ++++++++++++++++++
 8 files changed, 56 insertions(+), 37 deletions(-)

Range-diff:
 1:  ac419613fdc <  -:  ----------- Makefile: mark "check" target as .PHONY
 2:  a161b7f0a5c <  -:  ----------- Makefile: stop hardcoding {command,config}-list.h
 3:  ffef1d3257e <  -:  ----------- Makefile: remove an out-of-date comment
 4:  545e16c6f04 <  -:  ----------- hook.[ch]: move find_hook() from run-command.c to hook.c
 5:  a9bc4519e9a <  -:  ----------- hook.c: add a hook_exists() wrapper and use it in bugreport.c
 6:  e99ec2e6f8f <  -:  ----------- hook.c users: use "hook_exists()" instead of "find_hook()"
 7:  2ffb2332c8a <  -:  ----------- hook-list.h: add a generated list of hooks, like config-list.h
 8:  72dd1010f5b <  -:  ----------- hook: add 'run' subcommand
 9:  821cc9bf11e <  -:  ----------- gc: use hook library for pre-auto-gc hook
10:  d71c90254ea <  -:  ----------- rebase: convert pre-rebase to use hook.h
11:  ea3af2ccc4d <  -:  ----------- am: convert applypatch to use hook.h
12:  fed0b52f88f <  -:  ----------- hooks: convert 'post-checkout' hook to hook library
13:  53d8721a0e3 <  -:  ----------- merge: convert post-merge to use hook.h
14:  d60827a2856 <  -:  ----------- git hook run: add an --ignore-missing flag
15:  d4976a0821f <  -:  ----------- send-email: use 'git hook run' for 'sendemail-validate'
16:  99f3dcd1945 <  -:  ----------- git-p4: use 'git hook' to run hooks
17:  509761454e6 <  -:  ----------- commit: convert {pre-commit,prepare-commit-msg} hook to hook.h
18:  e2c94d95427 <  -:  ----------- read-cache: convert post-index-change to use hook.h
19:  fa7d0d24ea2 <  -:  ----------- receive-pack: convert push-to-checkout hook to hook.h
20:  428bb5a6792 <  -:  ----------- run-command: remove old run_hook_{le,ve}() hook API
34:  a20ad847c14 !  1:  351c6a55a41 post-update: use hook.h library
    @@
      ## Metadata ##
    -Author: Emily Shaffer <emilyshaffer@google.com>
    +Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    post-update: use hook.h library
    +    run-command.c: remove dead assignment in while-loop
    +
    +    Remove code that's been unused since it was added in
    +    c553c72eed6 (run-command: add an asynchronous parallel child
    +    processor, 2015-12-15), the next use of "i" in this function is:
    +
    +            for (i = 0; ...
    +
    +    So we'll always clobber the "i" that's set here. Presumably the "i"
    +    assignment is an artifact of WIP code that made it into our tree.
    +
    +    A subsequent commit will need to adjust the type of the "i" variable
    +    in the otherwise unrelated for-loop, which is why this is being
    +    removed now.
     
    -    Signed-off-by: Emily Shaffer <emilyshaffer@google.com>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/receive-pack.c ##
    -@@ builtin/receive-pack.c: static const char *update(struct command *cmd, struct shallow_info *si)
    - static void run_update_post_hook(struct command *commands)
    + ## run-command.c ##
    +@@ run-command.c: static void pp_buffer_stderr(struct parallel_processes *pp,
    + 			     const struct run_process_parallel_opts *opts,
    + 			     int output_timeout)
      {
    - 	struct command *cmd;
    --	struct child_process proc = CHILD_PROCESS_INIT;
    --	const char *hook;
    +-	int i;
     -
    --	hook = find_hook("post-update");
    --	if (!hook)
    --		return;
    -+	struct run_hooks_opt opt = RUN_HOOKS_OPT_INIT;
    - 
    - 	for (cmd = commands; cmd; cmd = cmd->next) {
    - 		if (cmd->error_string || cmd->did_not_exist)
    +-	while ((i = poll(pp->pfd, opts->processes, output_timeout) < 0)) {
    ++	while (poll(pp->pfd, opts->processes, output_timeout) < 0) {
    + 		if (errno == EINTR)
      			continue;
    --		if (!proc.args.nr)
    --			strvec_push(&proc.args, hook);
    --		strvec_push(&proc.args, cmd->ref_name);
    -+		strvec_push(&opt.args, cmd->ref_name);
    - 	}
    --	if (!proc.args.nr)
    -+	if (!opt.args.nr)
    - 		return;
    - 
    --	proc.no_stdin = 1;
    --	proc.stdout_to_stderr = 1;
    --	proc.err = use_sideband ? -1 : 0;
    --	proc.trace2_hook_name = "post-update";
    -+	if (use_sideband)
    -+		opt.consume_sideband = hook_output_to_sideband;
    - 
    --	if (!start_command(&proc)) {
    --		if (use_sideband)
    --			copy_to_sideband(proc.err, -1, NULL);
    --		finish_command(&proc);
    --	}
    -+	run_hooks_oneshot("post-update", &opt);
    - }
    - 
    - static void check_aliased_update_internal(struct command *cmd,
    + 		pp_cleanup(pp, opts);
21:  994f6ad8602 !  2:  81eef2f60a0 run-command: allow stdin for run_processes_parallel
    @@ Commit message
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## run-command.c ##
    -@@ run-command.c: static int pp_start_one(struct parallel_processes *pp)
    - 	if (i == pp->max_processes)
    +@@ run-command.c: static int pp_start_one(struct parallel_processes *pp,
    + 	if (i == opts->processes)
      		BUG("bookkeeping is hard");
      
     +	/*
    @@ run-command.c: static int pp_start_one(struct parallel_processes *pp)
     +	 */
     +	pp->children[i].process.no_stdin = 1;
     +
    - 	code = pp->get_next_task(&pp->children[i].process,
    - 				 &pp->children[i].err,
    - 				 pp->data,
    -@@ run-command.c: static int pp_start_one(struct parallel_processes *pp)
    + 	code = opts->get_next_task(&pp->children[i].process,
    + 				   opts->ungroup ? NULL : &pp->children[i].err,
    + 				   opts->data,
    +@@ run-command.c: static int pp_start_one(struct parallel_processes *pp,
    + 		pp->children[i].process.err = -1;
    + 		pp->children[i].process.stdout_to_stderr = 1;
      	}
    - 	pp->children[i].process.err = -1;
    - 	pp->children[i].process.stdout_to_stderr = 1;
     -	pp->children[i].process.no_stdin = 1;
      
      	if (start_command(&pp->children[i].process)) {
    - 		code = pp->start_failure(&pp->children[i].err,
    + 		if (opts->start_failure)
23:  f548e3d15e7 !  3:  c6b9b69c516 am: convert 'post-rewrite' hook to hook.h
    @@ Metadata
     Author: Emily Shaffer <emilyshaffer@google.com>
     
      ## Commit message ##
    -    am: convert 'post-rewrite' hook to hook.h
    +    hook API: support passing stdin to hooks, convert am's 'post-rewrite'
    +
    +    Convert the invocation of the 'post-rewrite' hook run by 'git am' to
    +    use the hook.h library. To do this we need to add a "path_to_stdin"
    +    member to "struct run_hooks_opt".
    +
    +    In our API this is supported by asking for a file path, rather
    +    than by reading stdin. Reading directly from stdin would involve caching
    +    the entire stdin (to memory or to disk) once the hook API is made to
    +    support "jobs" larger than 1, along with support for executing N hooks
    +    at a time (i.e. the upcoming config-based hooks).
     
         Signed-off-by: Emily Shaffer <emilyshaffer@google.com>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    @@ builtin/am.c: static int run_applypatch_msg_hook(struct am_state *state)
     -
     -	if (!hook)
     -		return 0;
    --
    ++	struct run_hooks_opt opt = RUN_HOOKS_OPT_INIT;
    + 
     -	strvec_push(&cp.args, hook);
     -	strvec_push(&cp.args, "rebase");
    --
    ++	strvec_push(&opt.args, "rebase");
    ++	opt.path_to_stdin = am_path(state, "rewritten");
    + 
     -	cp.in = xopen(am_path(state, "rewritten"), O_RDONLY);
     -	cp.stdout_to_stderr = 1;
     -	cp.trace2_hook_name = "post-rewrite";
    -+	struct run_hooks_opt opt = RUN_HOOKS_OPT_INIT;
    - 
    +-
     -	ret = run_command(&cp);
    -+	strvec_push(&opt.args, "rebase");
    -+	opt.path_to_stdin = am_path(state, "rewritten");
    - 
    +-
     -	close(cp.in);
     -	return ret;
    -+	return run_hooks_oneshot("post-rewrite", &opt);
    ++	return run_hooks_opt("post-rewrite", &opt);
      }
      
      /**
    +
    + ## hook.c ##
    +@@ hook.c: static int pick_next_hook(struct child_process *cp,
    + 	if (!hook_path)
    + 		return 0;
    + 
    +-	cp->no_stdin = 1;
    + 	strvec_pushv(&cp->env, hook_cb->options->env.v);
    ++	/* reopen the file for stdin; run_command closes it. */
    ++	if (hook_cb->options->path_to_stdin) {
    ++		cp->no_stdin = 0;
    ++		cp->in = xopen(hook_cb->options->path_to_stdin, O_RDONLY);
    ++	} else {
    ++		cp->no_stdin = 1;
    ++	}
    + 	cp->stdout_to_stderr = 1;
    + 	cp->trace2_hook_name = hook_cb->hook_name;
    + 	cp->dir = hook_cb->options->dir;
    +
    + ## hook.h ##
    +@@ hook.h: struct run_hooks_opt
    + 	 * was invoked.
    + 	 */
    + 	int *invoked_hook;
    ++
    ++	/**
    ++	 * Path to file which should be piped to stdin for each hook.
    ++	 */
    ++	const char *path_to_stdin;
    + };
    + 
    + #define RUN_HOOKS_OPT_INIT { \
26:  48a380b3a91 !  4:  7a55c95f60f hook: convert 'post-rewrite' hook in sequencer.c to hook.h
    @@ Metadata
     Author: Emily Shaffer <emilyshaffer@google.com>
     
      ## Commit message ##
    -    hook: convert 'post-rewrite' hook in sequencer.c to hook.h
    +    sequencer: use the new hook API for the simpler "post-rewrite" call
     
    -    By using 'hook.h' for 'post-rewrite', we simplify hook invocations by
    -    not needing to put together our own 'struct child_process'.
    +    Change the invocation of the "post-rewrite" hook added in
    +    795160457db (sequencer (rebase -i): run the post-rewrite hook, if
    +    needed, 2017-01-02) to use the new hook API.
     
    -    The signal handling that's being removed by this commit now takes
    -    place in run-command.h:run_processes_parallel(), so it is OK to remove
    -    them here.
    +    This leaves the more complex "post-rewrite" invocation added in
    +    a87a6f3c98e (commit: move post-rewrite code to libgit, 2017-11-17)
    +    here in sequencer.c unconverted. That'll be done in a subsequent
    +    commit.
     
         Signed-off-by: Emily Shaffer <emilyshaffer@google.com>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## sequencer.c ##
    -@@
    - #include "commit-reach.h"
    - #include "rebase-interactive.h"
    - #include "reset.h"
    -+#include "string-list.h"
    - 
    - #define GIT_REFLOG_ACTION "GIT_REFLOG_ACTION"
    - 
    -@@ sequencer.c: int update_head_with_reflog(const struct commit *old_head,
    - static int run_rewrite_hook(const struct object_id *oldoid,
    - 			    const struct object_id *newoid)
    - {
    --	struct child_process proc = CHILD_PROCESS_INIT;
    --	const char *argv[3];
    -+	struct run_hooks_opt opt = RUN_HOOKS_OPT_INIT;
    -+	struct strbuf tmp = STRBUF_INIT;
    -+	struct string_list to_stdin = STRING_LIST_INIT_DUP;
    - 	int code;
    --	struct strbuf sb = STRBUF_INIT;
    - 
    --	argv[0] = find_hook("post-rewrite");
    --	if (!argv[0])
    --		return 0;
    -+	strvec_push(&opt.args, "amend");
    - 
    --	argv[1] = "amend";
    --	argv[2] = NULL;
    --
    --	proc.argv = argv;
    --	proc.in = -1;
    --	proc.stdout_to_stderr = 1;
    --	proc.trace2_hook_name = "post-rewrite";
    --
    --	code = start_command(&proc);
    --	if (code)
    --		return code;
    --	strbuf_addf(&sb, "%s %s\n", oid_to_hex(oldoid), oid_to_hex(newoid));
    --	sigchain_push(SIGPIPE, SIG_IGN);
    --	write_in_full(proc.in, sb.buf, sb.len);
    --	close(proc.in);
    --	strbuf_release(&sb);
    --	sigchain_pop(SIGPIPE);
    --	return finish_command(&proc);
    -+	strbuf_addf(&tmp,
    -+		    "%s %s",
    -+		    oid_to_hex(oldoid),
    -+		    oid_to_hex(newoid));
    -+	string_list_append(&to_stdin, tmp.buf);
    -+
    -+	opt.feed_pipe = pipe_from_string_list;
    -+	opt.feed_pipe_ctx = &to_stdin;
    -+
    -+	code = run_hooks_oneshot("post-rewrite", &opt);
    -+
    -+	strbuf_release(&tmp);
    -+	string_list_clear(&to_stdin, 0);
    -+	return code;
    - }
    - 
    - void commit_post_rewrite(struct repository *r,
     @@ sequencer.c: static int pick_commits(struct repository *r,
    - 		flush_rewritten_pending();
      		if (!stat(rebase_path_rewritten_list(), &st) &&
      				st.st_size > 0) {
    --			struct child_process child = CHILD_PROCESS_INIT;
    + 			struct child_process child = CHILD_PROCESS_INIT;
     -			const char *post_rewrite_hook =
     -				find_hook("post-rewrite");
    --
    --			child.in = open(rebase_path_rewritten_list(), O_RDONLY);
    --			child.git_cmd = 1;
    --			strvec_push(&child.args, "notes");
    --			strvec_push(&child.args, "copy");
    --			strvec_push(&child.args, "--for-rewrite=rebase");
    -+			struct child_process notes_cp = CHILD_PROCESS_INIT;
     +			struct run_hooks_opt hook_opt = RUN_HOOKS_OPT_INIT;
    -+
    -+			notes_cp.in = open(rebase_path_rewritten_list(), O_RDONLY);
    -+			notes_cp.git_cmd = 1;
    -+			strvec_push(&notes_cp.args, "notes");
    -+			strvec_push(&notes_cp.args, "copy");
    -+			strvec_push(&notes_cp.args, "--for-rewrite=rebase");
    + 
    + 			child.in = open(rebase_path_rewritten_list(), O_RDONLY);
    + 			child.git_cmd = 1;
    +@@ sequencer.c: static int pick_commits(struct repository *r,
      			/* we don't care if this copying failed */
    --			run_command(&child);
    --
    + 			run_command(&child);
    + 
     -			if (post_rewrite_hook) {
     -				struct child_process hook = CHILD_PROCESS_INIT;
     -
    @@ sequencer.c: static int pick_commits(struct repository *r,
     -				/* we don't care if this hook failed */
     -				run_command(&hook);
     -			}
    -+			run_command(&notes_cp);
    -+
     +			hook_opt.path_to_stdin = rebase_path_rewritten_list();
     +			strvec_push(&hook_opt.args, "rebase");
    -+			run_hooks_oneshot("post-rewrite", &hook_opt);
    ++			run_hooks_opt("post-rewrite", &hook_opt);
      		}
      		apply_autostash(rebase_path_autostash());
      
22:  3ccc654a664 !  5:  cb9ef7a89c4 hook: support passing stdin to hooks
    @@ Metadata
     Author: Emily Shaffer <emilyshaffer@google.com>
     
      ## Commit message ##
    -    hook: support passing stdin to hooks
    +    hook: support a --to-stdin=<path> option for testing
     
    -    Some hooks (such as post-rewrite) need to take input via stdin.
    -    Previously, callers provided stdin to hooks by setting
    -    run-command.h:child_process.in, which takes a FD. Callers would open the
    -    file in question themselves before calling run-command(). However, since
    -    we will now need to seek to the front of the file and read it again for
    -    every hook which runs, hook.h:run_command() takes a path and handles FD
    -    management itself. Since this file is opened for read only, it should
    -    not prevent later parallel execution support.
    -
    -    On the frontend, this is supported by asking for a file path, rather
    -    than by reading stdin. Reading directly from stdin would involve caching
    -    the entire stdin (to memory or to disk) and reading it back from the
    -    beginning to each hook. We'd want to support cases like insufficient
    -    memory or storage for the file. While this may prove useful later, for
    -    now the path of least resistance is to just ask the user to make this
    -    interim file themselves.
    +    Expose the "path_to_stdin" API added in the preceding commit in the
    +    "git hook run" command. For now we won't be using this command
    +    interface outside of the tests, but exposing this functionality makes
    +    it easier to test the hook API.
     
         Signed-off-by: Emily Shaffer <emilyshaffer@google.com>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Documentation/git-hook.txt ##
    -@@ Documentation/git-hook.txt: git-hook - run git hooks
    +@@ Documentation/git-hook.txt: git-hook - Run git hooks
      SYNOPSIS
      --------
      [verse]
     -'git hook' run [--ignore-missing] <hook-name> [-- <hook-args>]
    -+'git hook' run [--to-stdin=<path>] [--ignore-missing] <hook-name> [-- <hook-args>]
    ++'git hook' run [--ignore-missing] [--to-stdin=<path>] <hook-name> [-- <hook-args>]
      
      DESCRIPTION
      -----------
    -@@ Documentation/git-hook.txt: what those are.
    +@@ Documentation/git-hook.txt: linkgit:githooks[5] for arguments hooks might expect (if any).
      OPTIONS
      -------
      
    @@ builtin/hook.c
     @@ builtin/hook.c: static int run(int argc, const char **argv, const char *prefix)
      	struct option run_options[] = {
      		OPT_BOOL(0, "ignore-missing", &ignore_missing,
    - 			 N_("exit quietly with a zero exit code if the requested hook cannot be found")),
    + 			 N_("silently ignore missing requested <hook-name>")),
     +		OPT_STRING(0, "to-stdin", &opt.path_to_stdin, N_("path"),
     +			   N_("file to read into hooks' stdin")),
      		OPT_END(),
      	};
      	int ret;
     
    - ## hook.c ##
    -@@ hook.c: static int pick_next_hook(struct child_process *cp,
    - 	if (!run_me)
    - 		return 0;
    - 
    --	cp->no_stdin = 1;
    -+	/* reopen the file for stdin; run_command closes it. */
    -+	if (hook_cb->options->path_to_stdin) {
    -+		cp->no_stdin = 0;
    -+		cp->in = xopen(hook_cb->options->path_to_stdin, O_RDONLY);
    -+	} else {
    -+		cp->no_stdin = 1;
    -+	}
    - 	cp->env = hook_cb->options->env.v;
    - 	cp->stdout_to_stderr = 1;
    - 	cp->trace2_hook_name = hook_cb->hook_name;
    -
    - ## hook.h ##
    -@@ hook.h: struct run_hooks_opt
    - 
    - 	/* Path to initial working directory for subprocess */
    - 	const char *dir;
    -+
    -+	/* Path to file which should be piped to stdin for each hook */
    -+	const char *path_to_stdin;
    - };
    - 
    - #define RUN_HOOKS_OPT_INIT { \
    -
      ## t/t1800-hook.sh ##
    -@@ t/t1800-hook.sh: test_expect_success 'git -c core.hooksPath=<PATH> hook run' '
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run a hook with a bad shebang' '
      	test_cmp expect actual
      '
      
24:  bb119fa7cc0 <  -:  ----------- run-command: add stdin callback for parallelization
25:  2439f7752b8 <  -:  ----------- hook: provide stdin by string_list or callback
27:  af6b9292aaa <  -:  ----------- transport: convert pre-push hook to hook.h
28:  957691f0b6d <  -:  ----------- hook tests: test for exact "pre-push" hook input
29:  88fe2621549 <  -:  ----------- hook tests: use a modern style for "pre-push" tests
30:  1d905e81779 <  -:  ----------- reference-transaction: use hook.h to run hooks
31:  fac56a9d8af <  -:  ----------- run-command: allow capturing of collated output
32:  7d185cdf9d1 <  -:  ----------- hooks: allow callers to capture output
33:  c8150e1239f <  -:  ----------- receive-pack: convert 'update' hook to hook.h
35:  79c380be6ed <  -:  ----------- receive-pack: convert receive hooks to hook.h
36:  fe056098534 <  -:  ----------- hooks: fix a TOCTOU in "did we run a hook?" heuristic
-- 
2.39.1.1301.gffb37c08dee

