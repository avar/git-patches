From d69dbf81de08da684686e1cc675c0cad969b6e6d Mon Sep 17 00:00:00 2001
In-Reply-To: <20181122153922.16912-2-avarab@gmail.com>
References: <20181122153922.16912-2-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Wed, 16 Jan 2019 14:25:17 +0100
Subject: [PATCH v5 0/9] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

SZEDER Gábor (2):
  commit-graph: rename 'num_extra_edges' variable to 'num_large_edges'
  commit-graph: don't call write_graph_chunk_large_edges() unnecessarily

Ævar Arnfjörð Bjarmason (7):
  commit-graph write: add "Writing out" progress output
  commit-graph write: more descriptive "writing out" output
  commit-graph write: show progress for object search
  commit-graph write: add more descriptive progress output
  commit-graph write: remove empty line for readability
  commit-graph write: add itermediate progress
  commit-graph write: emit a percentage for all progress

 commit-graph.c | 134 ++++++++++++++++++++++++++++++++++++-------------
 1 file changed, 100 insertions(+), 34 deletions(-)

Range-diff:
  -:  ---------- >   1:  e640d114ab l10n: zh_CN: review for git v2.19.0 l10n
  -:  ---------- >   2:  38bfde23f1 l10n: update German translation
  -:  ---------- >   3:  232b63c440 l10n: vi.po: fix typo in pack-objects
  -:  ---------- >   4:  bb05c9f759 t6042: add tests for consistency in file collision conflict handling
  -:  ---------- >   5:  b28eeb3092 t6036, t6042: testcases for rename collision of already conflicting files
  -:  ---------- >   6:  b2a7942b8b merge-recursive: increase marker length with depth of recursion
  -:  ---------- >   7:  37b65ce36b merge-recursive: new function for better colliding conflict resolutions
  -:  ---------- >   8:  7f8671656f merge-recursive: fix rename/add conflict handling
  -:  ---------- >   9:  bbafc9c44a merge-recursive: improve handling for rename/rename(2to1) conflicts
  -:  ---------- >  10:  dcf2815098 merge-recursive: use handle_file_collision for add/add conflicts
  -:  ---------- >  11:  48c9cb9d6d merge-recursive: improve rename/rename(1to2)/add[/add] handling
  -:  ---------- >  12:  b8cd1bb713 t6036, t6043: increase code coverage for file collision handling
  -:  ---------- >  13:  80cee6e321 merge-recursive: combine error handling
  -:  ---------- >  14:  d73019feb4 http: add support selecting http version
  -:  ---------- >  15:  f3131eecdb l10n: Update Catalan translation
  -:  ---------- >  16:  8aa8c14097 git.c: mark more strings for translation
  -:  ---------- >  17:  a7412ae134 alias.c: mark split_cmdline_strerror() strings for translation
  -:  ---------- >  18:  c6e7965ddf archive.c: mark more strings for translation
  -:  ---------- >  19:  ad8f8f4aed attr.c: mark more string for translation
  -:  ---------- >  20:  391408e532 read-cache.c: turn die("internal error") to BUG()
  -:  ---------- >  21:  9d0a9e9089 read-cache.c: mark more strings for translation
  -:  ---------- >  22:  a71806a74c read-cache.c: add missing colon separators
  -:  ---------- >  23:  dd509db342 reflog: mark strings for translation
  -:  ---------- >  24:  92ca868068 remote.c: turn some error() or die() to BUG()
  -:  ---------- >  25:  0b9c3afdbf remote.c: mark messages for translation
  -:  ---------- >  26:  c83d950e59 repack: mark more strings for translation
  -:  ---------- >  27:  9440b831ad parse-options: replace opterror() with optname()
  -:  ---------- >  28:  48a5499ef5 parse-options.c: turn some die() to BUG()
  -:  ---------- >  29:  8900342628 parse-options.c: mark more strings for translation
  -:  ---------- >  30:  bbb15c5193 fsck: reduce word legos to help i18n
  -:  ---------- >  31:  674ba34038 fsck: mark strings for translation
  -:  ---------- >  32:  5b02ca38a3 wt-status.c: remove implicit dependency on the_index
  -:  ---------- >  33:  788454576f wt-status.c: remove implicit dependency the_repository
  -:  ---------- >  34:  01d40c8487 list-objects-filter.c: remove implicit dependency on the_index
  -:  ---------- >  35:  96ab6e0b30 list-objects.c: reduce the_repository references
  -:  ---------- >  36:  5684200fe3 notes-merge.c: remove implicit dependency on the_index
  -:  ---------- >  37:  878d832938 notes-merge.c: remove implicit dependency the_repository
  -:  ---------- >  38:  6c6d5d0776 transport.c: remove implicit dependency on the_index
  -:  ---------- >  39:  f11c958054 sequencer.c: remove implicit dependency on the_index
  -:  ---------- >  40:  005af339c9 sequencer.c: remove implicit dependency on the_repository
  -:  ---------- >  41:  fb998eae6c blame.c: remove implicit dependency the_repository
  -:  ---------- >  42:  69d2cfe6e8 bisect.c: remove the_repository reference
  -:  ---------- >  43:  4edce1729a branch.c: remove the_repository reference
  -:  ---------- >  44:  74ae4b638d bundle.c: remove the_repository references
  -:  ---------- >  45:  c207e9e1f6 cache-tree.c: remove the_repository references
  -:  ---------- >  46:  385cb64ff3 delta-islands.c: remove the_repository references
  -:  ---------- >  47:  ffc00a48ef diff-lib.c: remove the_repository references
  -:  ---------- >  48:  363df5572c line-log.c: remove the_repository reference
  -:  ---------- >  49:  bd7ad45b64 notes-cache.c: remove the_repository references
  -:  ---------- >  50:  94e10825bd pack-check.c: remove the_repository references
  -:  ---------- >  51:  7c14112741 pack-*.c: remove the_repository references
  -:  ---------- >  52:  55e6b3547d rerere.c: remove the_repository references
  -:  ---------- >  53:  36e7ed69de rebase-interactive.c: remove the_repository references
  -:  ---------- >  54:  4d0984bebc fsck: do not reuse child_process structs
  -:  ---------- >  55:  b2ac148fae submodule--helper: prefer strip_suffix() to ends_with()
  -:  ---------- >  56:  263db403fa rename "alternate_object_database" to "object_directory"
  -:  ---------- >  57:  b69fb867b4 sha1_file_name(): overwrite buffer instead of appending
  -:  ---------- >  58:  f3f043a103 handle alternates paths the same as the main object dir
  -:  ---------- >  59:  f0eaf63819 sha1-file: use an object_directory for the main object dir
  -:  ---------- >  60:  3a2e08245c object-store: provide helpers for loose_objects_cache
  -:  ---------- >  61:  61c7711cfe sha1-file: use loose object cache for quick existence check
  -:  ---------- >  62:  97b2fa08b6 fetch-pack: drop custom loose object cache
  -:  ---------- >  63:  be4908f103 checkout: disambiguate dwim tracking branches and local files
  -:  ---------- >  64:  0f086e6dca checkout: print something when checking out paths
  -:  ---------- >  65:  cab53989f6 remote.c: add braces in anticipation of a follow-up change
  -:  ---------- >  66:  8b0e542912 i18n: remote.c: mark error(...) messages for translation
  -:  ---------- >  67:  c83cca3f74 push: improve the error shown on unqualified <dst> push
  -:  ---------- >  68:  04d17287a0 push: move unqualified refname error into a function
  -:  ---------- >  69:  dd8dd300c6 push: add an advice on unqualified <dst> push
  -:  ---------- >  70:  bf70636fd7 push: test that <src> doesn't DWYM if <dst> is unqualified
  -:  ---------- >  71:  2219c09e23 push doc: document the DWYM behavior pushing to unqualified <dst>
  -:  ---------- >  72:  d173e799ea diff: align move detection error handling with other options
  -:  ---------- >  73:  8247166717 push: change needlessly ambiguous example in error
  -:  ---------- >  74:  3e42cb3b67 clone: use a more appropriate variable name for the default refspec
  -:  ---------- >  75:  515be83382 clone: respect additional configured fetch refspecs during initial fetch
  -:  ---------- >  76:  7eae4a3ac4 Documentation/clone: document ignored configuration variables
  -:  ---------- >  77:  843b9e6d48 fast-export: convert sha1 to oid
  -:  ---------- >  78:  f55c979b14 git-fast-import.txt: fix documentation for --quiet option
  -:  ---------- >  79:  4532be7cba git-fast-export.txt: clarify misleading documentation about rev-list args
  -:  ---------- >  80:  b93b81e799 fast-export: use value from correct enum
  -:  ---------- >  81:  1f30c904b3 fast-export: avoid dying when filtering by paths and old tags exist
  -:  ---------- >  82:  f129c4275c fast-export: move commit rewriting logic into a function for reuse
  -:  ---------- >  83:  cd13762d8f fast-export: when using paths, avoid corrupt stream with non-existent mark
  -:  ---------- >  84:  fdf31b6369 fast-export: ensure we export requested refs
  -:  ---------- >  85:  530ca19c02 fast-export: add --reference-excluded-parents option
  -:  ---------- >  86:  25dd3e4889 fast-import: remove unmaintained duplicate documentation
  -:  ---------- >  87:  a965bb3116 fast-export: add a --show-original-ids option to show original names
  -:  ---------- >  88:  3bc2111fc2 stash: tolerate missing user identity
  -:  ---------- >  89:  e092073d64 tree.c: make read_tree*() take 'struct repository *'
  -:  ---------- >  90:  67022e0214 tree-walk.c: make tree_entry_interesting() take an index
  -:  ---------- >  91:  93e23798ef pathspec.h: clean up "extern" in function declarations
  -:  ---------- >  92:  22af33bece dir.c: move, rename and export match_attrs()
  -:  ---------- >  93:  5a0b97b34c tree-walk: support :(attr) matching
  -:  ---------- >  94:  d27525e519 msvc: directly use MS version (_stricmp) of strcasecmp
  -:  ---------- >  95:  1270554665 l10n: git.pot: v2.20.0 round 1 (254 new, 27 removed)
  -:  ---------- >  96:  165293af3c tests: send "bug in the test script" errors to the script's stderr
  -:  ---------- >  97:  30d0b6dccb test-lib-functions: make 'test_cmp_rev' more informative on failure
  -:  ---------- >  98:  01ca387774 commit-graph: split up close_reachable() progress output
  -:  ---------- >  99:  774d44cc18 t0027: squelch checkout path run outside test_expect_* block
  -:  ---------- > 100:  a7f609ec5f t5601-99: Enable colliding file detection for MINGW
  -:  ---------- > 101:  8c8fad9e4b t5562: fix perl path
  -:  ---------- > 102:  7317aa7153 odb_load_loose_cache: fix strbuf leak
  -:  ---------- > 103:  d9324e4ed0 l10n: Update Catalan translation
  -:  ---------- > 104:  02818a98d7 http-backend: enable cleaning up forked upload/receive-pack on exit
  -:  ---------- > 105:  46c0eb5843 files-backend.c: fix build error on Solaris
  -:  ---------- > 106:  f9ea6e45ed doc: update diff-format.txt for removed ellipses in --raw
  -:  ---------- > 107:  4c2eb06419 t/lib-git-daemon: fix signal checking
  -:  ---------- > 108:  6b822f7359 l10n: fr.po v2.20 rnd 1
  -:  ---------- > 109:  8821e90a09 advice: don't pointlessly suggest --convert-graft-file
  -:  ---------- > 110:  739fb7167d transport-helper.c: do not translate a string twice
  -:  ---------- > 111:  4724f3177a git-reset.txt: render tables correctly under Asciidoctor
  -:  ---------- > 112:  3006f5ee16 git-reset.txt: render literal examples as monospace
  -:  ---------- > 113:  d355e46a15 i18n: fix small typos
  -:  ---------- > 114:  4a81e9cd6d l10n: sv.po: Update Swedish translation (4185t0f0u)
  -:  ---------- > 115:  d8981c3f88 format-patch: do not let its diff-options affect --range-diff
  -:  ---------- > 116:  13a5a9f0fd rebase: fix GIT_REFLOG_ACTION regression
  -:  ---------- > 117:  8797f0f008 rebase --stat: fix when rebasing to an unrelated history
  -:  ---------- > 118:  3154af4a0d l10n: bg.po: Updated Bulgarian translation (4185t)
  -:  ---------- > 119:  36dd6933bd l10n: git.pot: v2.20.0 round 2 (2 new, 2 removed)
  -:  ---------- > 120:  d0a6644845 l10n: bg.po: Updated Bulgarian translation (4185t)
  -:  ---------- > 121:  eff199a6c0 builtin/rebase.c: remove superfluous space in messages
  -:  ---------- > 122:  cc4cb0902c t6036: avoid non-portable "cp -a"
  -:  ---------- > 123:  8a0ba68f6d Git 2.20-rc2
  -:  ---------- > 124:  0960a4beff l10n: es.po v2.20.0 round 1
  -:  ---------- > 125:  84368b62b0 l10n: vi(4185t): Updated Vietnamese translation for v2.20.0
  -:  ---------- > 126:  578d8ea381 l10n: git.pot: v2.20.0 round 3 (5 new, 3 removed)
  -:  ---------- > 127:  7c6767be71 l10n: es.po v2.20.0 round 3
  -:  ---------- > 128:  8173e9c772 l10n: vi(4187t): Updated Vietnamese translation for v2.20.0 rd3
  -:  ---------- > 129:  5386321271 l10n: fr.po v2.20.0 round 3
  -:  ---------- > 130:  7345044379 l10n: sv.po: Update Swedish translation (4187t0f0u)
  -:  ---------- > 131:  9290395fe9 l10n: bg.po: Updated Bulgarian translation (4187t)
  -:  ---------- > 132:  82cbc8cde2 tests: add lint for non portable cp -a
  -:  ---------- > 133:  89ba9a79ae t0061: do not fail test if '.' is part of $PATH
  -:  ---------- > 134:  b6bdc2a0f5 t5004: avoid using tar for empty packages
  -:  ---------- > 135:  4e3ecbd439 config.mak.uname: OpenBSD uses BSD semantics with fread for directories
  -:  ---------- > 136:  ac0edf1f46 range-diff: always pass at least minimal diff options
  -:  ---------- > 137:  00ac55c7bd RelNotes 2.20: move some items between sections
  -:  ---------- > 138:  7a49e44465 RelNotes 2.20: clarify sentence
  -:  ---------- > 139:  7e75a63d74 RelNotes 2.20: drop spurious double quote
  -:  ---------- > 140:  6fcbad87d4 rebase docs: fix incorrect format of the section Behavioral Differences
  -:  ---------- > 141:  1f67290450 sideband: color lines with keyword only
  -:  ---------- > 142:  4cf67869b2 list-objects.c: don't segfault for missing cmdline objects
  -:  ---------- > 143:  bbcde41a70 revision.c: put promisor option in specialized struct
  -:  ---------- > 144:  cf4c0c2505 l10n: update German translation
  -:  ---------- > 145:  4c27fcb576 l10n: zh_CN: for git v2.20.0 l10n round 1 to 3
  -:  ---------- > 146:  0688c551a3 l10n: de.po: fix two messages
  -:  ---------- > 147:  a8f5a59067 git-rebase.txt: update note about directory rename detection and am
  -:  ---------- > 148:  a62527b0e5 mailmap: update brandon williams's email address
  -:  ---------- > 149:  112ea42663 docs/gitweb.conf: config variable typo
  -:  ---------- > 150:  f116ee21cd docs: fix $strict_export text in gitweb.conf.txt
  -:  ---------- > 151:  ec36c42a63 Indent code with TABs
  -:  ---------- > 152:  5d826e9729 Git 2.20
  -:  ---------- > 153:  57e9dcaa65 rebase docs: drop stray word in merge command description
  -:  ---------- > 154:  e5a329a279 run-command: report exec failure
  -:  ---------- > 155:  5acea87c3a help.h: fix coding style
  -:  ---------- > 156:  1c4b985965 help -a: handle aliases with long names gracefully
  -:  ---------- > 157:  a92ec7efe0 parse-options: fix SunCC compiler warning
  -:  ---------- > 158:  98f2d930d1 t4256: mark support files as LF-only
  -:  ---------- > 159:  0365b9ec59 t9902: 'send-email' test case requires PERL
  -:  ---------- > 160:  fc767afe77 .gitattributes: ensure t/oid-info/* has eol=lf
  -:  ---------- > 161:  0d0ac3826a Git 2.20.1
  -:  ---------- > 162:  85c26ae4bb Prepare for 2.21 cycle to start soonish
  -:  ---------- > 163:  e0e7cb8080 log -G: ignore binary files
  -:  ---------- > 164:  1cadad6f65 git clone <url> C:\cygwin\home\USER\repo' is working (again)
  -:  ---------- > 165:  ecbdaf0899 First batch after 2.20.1
  -:  ---------- > 166:  77556354bb Second batch after 2.20
  1:  07d06c50c0 = 167:  8d56b1c5c1 commit-graph: rename 'num_extra_edges' variable to 'num_large_edges'
  2:  904dda1e7a = 168:  8e33e12c7d commit-graph: don't call write_graph_chunk_large_edges() unnecessarily
  3:  1126c7e29d <   -:  ---------- commit-graph write: rephrase confusing progress output
  4:  9c17f56ed3 ! 169:  fa48b4b4cd commit-graph write: add "Writing out" progress output
    @@ -10,14 +10,14 @@
         small repositories, but before this change we'd noticeably hang for
         2-3 seconds at the end on medium sized repositories such as linux.git.
     
    -    Now we'll instead show output like this, and have no human-observable
    -    point at which we're not producing progress output:
    +    Now we'll instead show output like this, and reduce the
    +    human-observable times at which we're not producing progress output:
     
    -        $ ~/g/git/git --exec-path=$HOME/g/git commit-graph write
    -        Finding commits for commit graph: 6365442, done.
    -        Annotating commit graph: 2391666, done.
    -        Computing commit graph generation numbers: 100% (797222/797222), done.
    -        Writing out commit graph: 100% (3188888/3188888), done.
    +        $ ~/g/git/git --exec-path=$HOME/g/git -C ~/g/2015-04-03-1M-git commit-graph write
    +        Finding commits for commit graph: 13064614, done.
    +        Expanding reachable commits in commit graph: 1000447, done.
    +        Computing commit graph generation numbers: 100% (1000447/1000447), done.
    +        Writing out commit graph: 100% (3001341/3001341), done.
     
         This "Writing out" number is 3x or 4x the number of commits, depending
         on the graph we're processing. A later change will make this explicit
  5:  79b0a467d9 ! 170:  738074e802 commit-graph write: more descriptive "writing out" output
    @@ -11,11 +11,11 @@
         has to do with writing out the commit graph. Now e.g. on linux.git we
         emit:
     
    -        $ ~/g/git/git --exec-path=$HOME/g/git commit-graph write
    -        Finding commits for commit graph: 6365442, done.
    -        Annotating commit graph: 2391666, done.
    -        Computing commit graph generation numbers: 100% (797222/797222), done.
    -        Writing out commit graph in 4 passes: 100% (3188888/3188888), done.
    +        $ ~/g/git/git --exec-path=$HOME/g/git -C ~/g/linux commit-graph write
    +        Finding commits for commit graph: 6529159, done.
    +        Expanding reachable commits in commit graph: 815990, done.
    +        Computing commit graph generation numbers: 100% (815983/815983), done.
    +        Writing out commit graph in 4 passes: 100% (3263932/3263932), done.
     
         A note on i18n: Why are we using the Q_() function and passing a
         number & English text for a singular which'll never be used? Because
    @@ -51,11 +51,10 @@
      	}
      	write_graph_chunk_fanout(f, commits.list, commits.nr, progress, &progress_cnt);
     @@
    + 	if (num_large_edges)
      		write_graph_chunk_large_edges(f, commits.list, commits.nr, progress, &progress_cnt);
      	stop_progress(&progress);
    - 
     +	strbuf_release(&progress_title);
    -+
    + 
      	close_commit_graph(the_repository);
      	finalize_hashfile(f, NULL, CSUM_HASH_IN_STREAM | CSUM_FSYNC);
    - 	commit_lock_file(&lk);
  6:  b32be83b38 ! 171:  b8b6f3ca84 commit-graph write: show progress for object search
    @@ -8,12 +8,12 @@
     
         Before we'd emit on e.g. linux.git with "commit-graph write":
     
    -        Finding commits for commit graph: 6365442, done.
    +        Finding commits for commit graph: 6529159, done.
             [...]
     
         And now:
     
    -        Finding commits for commit graph: 100% (6365442/6365442), done.
    +        Finding commits for commit graph: 100% (6529159/6529159), done.
             [...]
     
         Since the commit graph only includes those commits that are packed
  7:  54276723c0 ! 172:  1fab1b3c8f commit-graph write: add more descriptive progress output
    @@ -10,17 +10,17 @@
         we support:
     
             $ git commit-graph write
    -        Finding commits for commit graph among packed objects: 100% (6365442/6365442), done.
    +        Finding commits for commit graph among packed objects: 100% (6529159/6529159), done.
             [...]
     
             # Actually we don't emit this since this takes almost no time at
             # all. But if we did (s/_delayed//) we'd show:
             $ git for-each-ref --format='%(objectname)' | git commit-graph write --stdin-commits
    -        Finding commits for commit graph from 584 refs: 100% (584/584), done.
    +        Finding commits for commit graph from 630 refs: 100% (630/630), done.
             [...]
     
             $ (cd .git/objects/pack/ && ls *idx) | git commit-graph write --stdin-pack
    -        Finding commits for commit graph in 2 packs: 6365442, done.
    +        Finding commits for commit graph in 3 packs: 6529159, done.
             [...]
     
         The middle on of those is going to be the output users might see in
  8:  0e847366e1 = 173:  e952c4b728 commit-graph write: remove empty line for readability
  9:  c388aff73e ! 174:  99ac6725cb commit-graph write: add itermediate progress
    @@ -10,26 +10,29 @@
         million objects we'll now emit:
     
             $ ~/g/git/git --exec-path=$HOME/g/git commit-graph write
    -        Finding commits for commit graph among packed objects: 100% (48333911/48333911), done.
    -        Annotating commit graph: 21435984, done.
    -        Counting distinct commits in commit graph: 100% (7145328/7145328), done.
    -        Finding extra edges in commit graph: 100% (7145328/7145328), done.
    -        Computing commit graph generation numbers: 100% (7145328/7145328), done.
    -        Writing out commit graph in 4 passes: 100% (28581312/28581312), done.
    +        Finding commits for commit graph among packed objects: 100% (124763727/124763727), done.
    +        Loading known commits in commit graph: 100% (18989461/18989461), done.
    +        Expanding reachable commits in commit graph: 100% (18989507/18989461), done.
    +        Clearing commit marks in commit graph: 100% (18989507/18989507), done.
    +        Counting distinct commits in commit graph: 100% (18989507/18989507), done.
    +        Finding extra edges in commit graph: 100% (18989507/18989507), done.
    +        Computing commit graph generation numbers: 100% (7250302/7250302), done.
    +        Writing out commit graph in 4 passes: 100% (29001208/29001208), done.
     
         Whereas on a medium-sized repository such as linux.git these new
         progress bars won't have time to kick in and as before and we'll still
         emit output like:
     
             $ ~/g/git/git --exec-path=$HOME/g/git commit-graph write
    -        Finding commits for commit graph among packed objects: 100% (6365442/6365442), done.
    -        Annotating commit graph: 2391666, done.
    -        Computing commit graph generation numbers: 100% (797222/797222), done.
    -        Writing out commit graph in 4 passes: 100% (3188888/3188888), done.
    +        Finding commits for commit graph among packed objects: 100% (6529159/6529159), done.
    +        Expanding reachable commits in commit graph: 815990, done.
    +        Computing commit graph generation numbers: 100% (815983/815983), done.
    +        Writing out commit graph in 4 passes: 100% (3263932/3263932), done.
     
         The "Counting distinct commits in commit graph" phase will spend most
         of its time paused at "0/*" as we QSORT(...) the list. That's not
    -    optimal, but at least we don't seem to be stalling anymore.
    +    optimal, but at least we don't seem to be stalling anymore most of the
    +    time.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
 10:  fd692499e0 <   -:  ---------- commit-graph write: emit a percentage for all progress
  -:  ---------- > 175:  d69dbf81de commit-graph write: emit a percentage for all progress
-- 
2.20.1.153.gd81d796ee0

