From 8427d9c2bcc5205500eaef6e87f3d5983bfd193d Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-00.11-00000000000-20220613T215714Z-avarab@gmail.com>
In-Reply-To: <kl6lzgig5qmc.fsf@chooglen-macbookpro.roam.corp.google.com>
References: <kl6lzgig5qmc.fsf@chooglen-macbookpro.roam.corp.google.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Mon, 13 Jun 2022 23:57:14 +0200
Subject: [PATCH v2 00/11] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (11):
  git-submodule.sh: create a "case" dispatch statement
  git-submodule.sh: dispatch "sync" to helper
  git-submodule.sh: dispatch directly to helper
  git-submodule.sh: dispatch "foreach" to helper
  git-submodule.sh: dispatch "update" to helper
  submodule tests: test usage behavior
  git-submodule.sh: don't support top-level "--cached"
  submodule: make it a built-in, remove git-submodule.sh
  submodule: support "--" with no other arguments
  submodule: add a subprocess-less submodule.useBuiltin setting
  submodule: support sub-command-less "--recursive" option

 Documentation/config/submodule.txt |   4 +
 Documentation/git-submodule.txt    |   2 +-
 Makefile                           |   2 +-
 builtin.h                          |   1 +
 builtin/submodule--helper.c        |   3 +-
 builtin/submodule.c                | 187 +++++++++
 ci/run-build-and-tests.sh          |   1 +
 git-submodule.sh                   | 611 -----------------------------
 git.c                              |   1 +
 t/README                           |   4 +
 t/t7400-submodule-basic.sh         |  33 +-
 11 files changed, 234 insertions(+), 615 deletions(-)
 create mode 100644 builtin/submodule.c
 delete mode 100755 git-submodule.sh

Range-diff against v1:
 1:  9e1a8913a46 <  -:  ----------- git-submodule.sh: remove unused sanitize_submodule_env()
 2:  b1e1833c7ac <  -:  ----------- git-submodule.sh: remove unused $prefix variable
 7:  21ec9fbd4b4 !  1:  4d132370e32 git-submodule.sh: create a "case" dispatch statement
    @@ Commit message
     
      ## git-submodule.sh ##
     @@ git-submodule.sh: cmd_sync()
    - 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper sync ${GIT_QUIET:+--quiet} ${recursive:+--recursive} -- "$@"
    + 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper sync ${quiet:+--quiet} ${recursive:+--recursive} -- "$@"
      }
      
     -cmd_absorbgitdirs()
 9:  36853c1fb54 !  2:  5febe56c07c git-submodule.sh: dispatch "sync" to helper
    @@ Commit message
      ## git-submodule.sh ##
     @@ git-submodule.sh: cmd_status()
      
    - 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper status ${GIT_QUIET:+--quiet} ${cached:+--cached} ${recursive:+--recursive} -- "$@"
    + 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper status ${quiet:+--quiet} ${cached:+--cached} ${recursive:+--recursive} -- "$@"
      }
     -#
     -# Sync remote urls for submodules
    @@ git-submodule.sh: cmd_status()
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			shift
     -			;;
     -		--recursive)
    @@ git-submodule.sh: cmd_status()
     -		esac
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper sync ${GIT_QUIET:+--quiet} ${recursive:+--recursive} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper sync ${quiet:+--quiet} ${recursive:+--recursive} -- "$@"
     -}
      
      # This loop parses the command line arguments to find the
    @@ git-submodule.sh: case "$command" in
      	;;
     +sync)
     +	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    -+		${GIT_QUIET:+--quiet} "$@"
    ++		${quiet:+--quiet} "$@"
     +	;;
      *)
      	"cmd_$(echo $command | sed -e s/-/_/g)" "$@"
10:  cfb07acaec6 !  3:  2e1832f8aac git-submodule.sh: dispatch directly to helper
    @@ Commit message
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## git-submodule.sh ##
    -@@ git-submodule.sh: GIT_PROTOCOL_FROM_USER=0
    - export GIT_PROTOCOL_FROM_USER
    +@@ git-submodule.sh: export GIT_PROTOCOL_FROM_USER
      
      command=
    + quiet=
     -branch=
      force=
      reference=
    @@ git-submodule.sh: GIT_PROTOCOL_FROM_USER=0
     -files=
      remote=
      nofetch=
    - update=
    + rebase=
    + merge=
    + checkout=
     -custom_name=
      depth=
      progress=
    @@ git-submodule.sh: jobs=
     -			force=$1
     -			;;
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--progress)
     -			progress=1
    @@ git-submodule.sh: jobs=
     -		usage
     -	fi
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper add ${GIT_QUIET:+--quiet} ${force:+--force} ${progress:+"--progress"} ${branch:+--branch "$branch"} ${reference_path:+--reference "$reference_path"} ${dissociate:+--dissociate} ${custom_name:+--name "$custom_name"} ${depth:+"$depth"} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper add ${quiet:+--quiet} ${force:+--force} ${progress:+"--progress"} ${branch:+--branch "$branch"} ${reference_path:+--reference "$reference_path"} ${dissociate:+--dissociate} ${custom_name:+--name "$custom_name"} ${depth:+"$depth"} -- "$@"
     -}
      
     -#
    @@ git-submodule.sh: jobs=
      # submodule
      #
     @@ git-submodule.sh: cmd_foreach()
    - 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper foreach ${GIT_QUIET:+--quiet} ${recursive:+--recursive} -- "$@"
    + 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper foreach ${quiet:+--quiet} ${recursive:+--recursive} -- "$@"
      }
      
     -#
    @@ git-submodule.sh: cmd_foreach()
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--)
     -			shift
    @@ git-submodule.sh: cmd_foreach()
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper init ${GIT_QUIET:+--quiet} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper init ${quiet:+--quiet} -- "$@"
     -}
     -
     -#
    @@ git-submodule.sh: cmd_foreach()
     -			force=$1
     -			;;
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--all)
     -			deinit_all=t
    @@ git-submodule.sh: cmd_foreach()
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper deinit ${GIT_QUIET:+--quiet} ${force:+--force} ${deinit_all:+--all} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper deinit ${quiet:+--quiet} ${force:+--force} ${deinit_all:+--all} -- "$@"
     -}
     -
      #
    @@ git-submodule.sh: cmd_update()
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper set-branch ${GIT_QUIET:+--quiet} ${branch:+--branch "$branch"} ${default:+--default} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper set-branch ${quiet:+--quiet} ${branch:+--branch "$branch"} ${default:+--default} -- "$@"
     -}
     -
     -#
    @@ git-submodule.sh: cmd_update()
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--)
     -			shift
    @@ git-submodule.sh: cmd_update()
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper set-url ${GIT_QUIET:+--quiet} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper set-url ${quiet:+--quiet} -- "$@"
     -}
     -
     -#
    @@ git-submodule.sh: cmd_update()
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--cached)
     -			cached=1
    @@ git-submodule.sh: cmd_update()
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper status ${GIT_QUIET:+--quiet} ${cached:+--cached} ${recursive:+--recursive} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper status ${quiet:+--quiet} ${cached:+--cached} ${recursive:+--recursive} -- "$@"
     -}
     -
      # This loop parses the command line arguments to find the
    @@ git-submodule.sh: case "$command" in
      	;;
     -sync)
     -	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    --		${GIT_QUIET:+--quiet} "$@"
    +-		${quiet:+--quiet} "$@"
     +foreach | update)
     +	"cmd_$command" "$@"
      	;;
    @@ git-submodule.sh: case "$command" in
     -	"cmd_$(echo $command | sed -e s/-/_/g)" "$@"
     +add | init | deinit | set-branch | set-url | status | summary | sync)
     +	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    -+		${GIT_QUIET:+--quiet} ${cached:+--cached} "$@"
    ++		${quiet:+--quiet} ${cached:+--cached} "$@"
      	;;
      esac
11:  330d20fddb2 !  4:  89cb62696cd git-submodule.sh: dispatch "foreach" to helper
    @@ git-submodule.sh: jobs=
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    +-			quiet=1
     -			;;
     -		--recursive)
     -			recursive=1
    @@ git-submodule.sh: jobs=
     -		shift
     -	done
     -
    --	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper foreach ${GIT_QUIET:+--quiet} ${recursive:+--recursive} -- "$@"
    +-	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper foreach ${quiet:+--quiet} ${recursive:+--recursive} -- "$@"
     -}
     -
      #
    @@ git-submodule.sh: case "$command" in
     -add | init | deinit | set-branch | set-url | status | summary | sync)
     +add | foreach | init | deinit | set-branch | set-url | status | summary | sync)
      	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    - 		${GIT_QUIET:+--quiet} ${cached:+--cached} "$@"
    + 		${quiet:+--quiet} ${cached:+--cached} "$@"
      	;;
16:  6b8bada981f !  5:  d41a6ba9175 git-submodule.sh: dispatch "update" to helper
    @@ Commit message
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/git-submodule.txt ##
    -@@ Documentation/git-submodule.txt: SYNOPSIS
    - 'git submodule' [--quiet] status [--cached] [--recursive] [--] [<path>...]
    - 'git submodule' [--quiet] init [--] [<path>...]
    - 'git submodule' [--quiet] deinit [-f|--force] (--all|[--] <path>...)
    --'git submodule' [--quiet] update [-v] [<options>] [--] [<path>...]
    -+'git submodule' [--quiet] update [-v | --verbose] [<options>] [--] [<path>...]
    - 'git submodule' [--quiet] set-branch [<options>] [--] <path>
    - 'git submodule' [--quiet] set-url [--] <path> <newurl>
    - 'git submodule' [--quiet] summary [<options>] [--] [<path>...]
    -@@ Documentation/git-submodule.txt: If you really want to remove a submodule from the repository and commit
    - that use linkgit:git-rm[1] instead. See linkgit:gitsubmodules[7] for removal
    - options.
    - 
    --update [-v] [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--filter <filter spec>] [--] [<path>...]::
    -+update [-v | --verbose] [--init] [--remote] [-N|--no-fetch] [--[no-]recommend-shallow] [-f|--force] [--checkout|--rebase|--merge] [--reference <repository>] [--depth <depth>] [--recursive] [--jobs <n>] [--[no-]single-branch] [--filter <filter spec>] [--] [<path>...]::
    - +
    - --
    - Update the registered submodules to match what the superproject
    -@@ Documentation/git-submodule.txt: OPTIONS
    - 	Only print error messages.
    - 
    - -v::
    -+--verbose::
    - 	Don't be quiet. This option is only valid for the update command.
    - 
    - --progress::
    -
      ## git-submodule.sh ##
    -@@ git-submodule.sh: GIT_PROTOCOL_FROM_USER=0
    - export GIT_PROTOCOL_FROM_USER
    +@@ git-submodule.sh: export GIT_PROTOCOL_FROM_USER
      
      command=
    + quiet=
     -force=
     -reference=
      cached=
    @@ git-submodule.sh: GIT_PROTOCOL_FROM_USER=0
     -	do
     -		case "$1" in
     -		-q|--quiet)
    --			GIT_QUIET=1
    --			;;
    --		-v)
    --			unset GIT_QUIET
    +-			quiet=1
     -			;;
     -		--progress)
     -			progress=1
    @@ git-submodule.sh: GIT_PROTOCOL_FROM_USER=0
     -	done
     -
     -	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper update \
    --		${GIT_QUIET:+--quiet} \
    +-		${quiet:+--quiet} \
     -		${force:+--force} \
     -		${progress:+"--progress"} \
     -		${remote:+--remote} \
    @@ git-submodule.sh: absorbgitdirs)
      update)
     -	cmd_update "$@"
     +	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    -+		${GIT_QUIET:+--quiet} ${wt_prefix:+--prefix "$wt_prefix"} "$@"
    ++		${quiet:+--quiet} ${wt_prefix:+--prefix "$wt_prefix"} "$@"
      	;;
      add | foreach | init | deinit | set-branch | set-url | status | summary | sync)
      	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
15:  0ead991a0fd !  6:  137283943ff submodule--helper: understand -v option for "update"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    submodule--helper: understand -v option for "update"
    +    submodule tests: test usage behavior
     
    -    Change the "OPT__QUIET()" in module_update() to use OPT__VERBOSITY()
    -    instead. This is in preparation for passing the command in
    -    "git-submodule.sh" to "git submodule update" directly.
    +    Test what exit code and output we emit on "git submodule -h", how we
    +    handle "--" when no subcommand is specified, and how the top-level
    +    "--recursive" option is handled.
     
    -    Note that this implementation supports the "--verbose" synonym for
    -    "-v", but "git-submodule.sh" does not. Once we make the switch to
    -    calling "git submodule--helper update" directly we should update the
    -    documentation to reflect that.
    +    For "-h" this doesn't make sense, but let's test for it so that any
    +    subsequent commit's behavior change will become clear. We should fix
    +    this bug, but not as a "while we're at it" in the *.sh->*.c
    +    conversion.
    +
    +    For "--" this follows up on 68cabbfda36 (submodule: document default
    +    behavior, 2019-02-15) and tests that when "status" isn't supplied we
    +    don't support the "--" delimiter. There's no intrinsically good reason
    +    not to support that. We behave this way due to edge cases in
    +    git-submodule.sh's implementation, but as with "-h" let's assert our
    +    current long-standing behavior for now.
    +
    +    For "--recursive" the exclusion of it from the top-level appears to
    +    have been an omission in 15fc56a8536 (git submodule foreach: Add
    +    --recursive to recurse into nested submodules, 2009-08-19), there
    +    doesn't seem to be a reason not to support it alongside "--quiet" and
    +    "--cached", but let's likewise assert our existing behavior for now.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/submodule--helper.c ##
    -@@ builtin/submodule--helper.c: static int module_update(int argc, const char **argv, const char *prefix)
    - 	struct list_objects_filter_options filter_options;
    - 	int ret;
    - 	enum submodule_update_type update_type = SM_UPDATE_UNSPECIFIED;
    -+	int verbosity = 0;
    - 
    - 	struct option module_update_options[] = {
    - 		OPT__FORCE(&opt.force, N_("force checkout updates"), 0),
    -@@ builtin/submodule--helper.c: static int module_update(int argc, const char **argv, const char *prefix)
    - 			    N_("parallel jobs")),
    - 		OPT_BOOL(0, "recommend-shallow", &opt.recommend_shallow,
    - 			    N_("whether the initial clone should follow the shallow recommendation")),
    --		OPT__QUIET(&opt.quiet, N_("don't print cloning progress")),
    -+		OPT__VERBOSITY(&verbosity),
    - 		OPT_BOOL(0, "progress", &opt.progress,
    - 			    N_("force cloning progress")),
    - 		OPT_BOOL(0, "require-init", &opt.require_init,
    -@@ builtin/submodule--helper.c: static int module_update(int argc, const char **argv, const char *prefix)
    - 	};
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    - 	const char *const git_submodule_helper_usage[] = {
    --		N_("git submodule [--quiet] update"
    -+		N_("git submodule [--quiet] update [-v | --verbose]"
    - 		" [--init [--filter=<filter-spec>]] [--remote]"
    - 		" [-N|--no-fetch] [-f|--force]"
    - 		" [--checkout|--merge|--rebase]"
    -@@ builtin/submodule--helper.c: static int module_update(int argc, const char **argv, const char *prefix)
    - 	if (opt.require_init)
    - 		opt.init = 1;
    + . ./test-lib.sh
      
    -+	if (verbosity < 0)
    -+		opt.quiet = 1;
    ++test_expect_success 'submodule usage: -h' '
    ++	git submodule -h >out 2>err &&
    ++	grep "^usage: git submodule" out &&
    ++	test_must_be_empty err
    ++'
    ++
    ++test_expect_success 'submodule usage: --recursive' '
    ++	test_expect_code 1 git submodule --recursive >out 2>err &&
    ++	grep "^usage: git submodule" err &&
    ++	test_must_be_empty out
    ++'
    ++
    ++test_expect_success 'submodule usage: status --' '
    ++	test_expect_code 1 git submodule -- &&
    ++	test_expect_code 1 git submodule --end-of-options
    ++'
    ++
    ++for opt in '--quiet' '--cached'
    ++do
    ++	test_expect_success "submodule usage: status $opt" '
    ++		git submodule $opt &&
    ++		git submodule status $opt &&
    ++		git submodule $opt status
    ++	'
    ++done
     +
    - 	if (filter_options.choice && !opt.init) {
    - 		usage_with_options(git_submodule_helper_usage,
    - 				   module_update_options);
    + test_expect_success 'submodule deinit works on empty repository' '
    + 	git submodule deinit --all
    + '
 4:  f17f6073a6d !  7:  0965fda4052 git-submodule.sh: normalize parsing of "--branch"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    git-submodule.sh: normalize parsing of "--branch"
    +    git-submodule.sh: don't support top-level "--cached"
     
    -    In 5c08dbbdf1a (git-submodule: fix subcommand parser, 2008-01-15) the
    -    "--branch" option was supported as an option to "git submodule"
    -    itself, i.e. "git submodule --branch" as a side-effect of its
    -    implementation.
    +    Since the preceding commit all sub-commands of "git submodule" have
    +    been dispatched to "git submodule--helper" directly, we therefore
    +    don't need to emit "usage()" if we see "--cached" without the
    +    sub-command being "status" or "summary", we can trust that
    +    parse_options() will spot that and barf on it.
     
    -    Then in b57e8119e6e (submodule: teach set-branch subcommand,
    -    2019-02-08) when the "set-branch" subcommand was added the assertion
    -    that we shouldn't have "--branch" anywhere except as an argument to
    -    "add" and "set-branch" was copy/pasted from the adjacent check for
    -    "--cache" added (or rather modified) in 496eeeb19b9 (git-submodule.sh:
    -    avoid "test <cond> -a/-o <cond>", 2014-06-10).
    +    This does change one obscure aspect of undocumented behavior, for
    +    "status" and "summary" we supported these undocumented forms:
     
    -    But there's been a logic error in that check, this looked like it
    -    should be supporting:
    +        git submodule --cached (status | summary)
     
    -        git submodule --branch <branch> (add | set-branch) [<options>]
    +    As noted in a preceding commit to git-submodule.sh which removed the
    +    "--branch" special-case this comes down to emergent behavior seen in
    +    5c08dbbdf1a (git-submodule: fix subcommand parser,
    +    2008-01-15). I.e. we wanted to subcommand-less invocations like:
     
    -    But due to "||" in the condition (as opposed to "&&" for "--cache") if
    -    we have "--branch" here already we'll emit usage, even for "add" and
    -    "set-branch".
    +        git submodule --cached
     
    -    Since nobody's complained about "--branch <branch>" not being
    -    supported as argument to "git submodule" itself, i.e. we want to
    -    support:
    +    As synonymous with the explicit:
     
    -        git submodule (add | set-branch) --branch <branch>  [<options>]
    +        git submodule status --cached
     
    -    But not the first form noted above. Let's just remove this code, we've
    -    never documented "--branch" as a top-level option (unlike "--quiet"),
    -    so this looks like it was an accident of the implementation, which we
    -    broke v2.22.0, so we also know it must not have been important to
    -    anyone.
    +    Let's remove this undocumented edge case, which makes a subsequent
    +    removal of git-submodule.sh easier to reason about. The test case
    +    added here is duplicated from the existing for-loop, except for the
    +    different and desired handling of "git submodule --cached status".
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## git-submodule.sh ##
     @@ git-submodule.sh: do
    - 	-q|--quiet)
    - 		GIT_QUIET=1
    + 		quiet=1
      		;;
    --	-b|--branch)
    --		case "$2" in
    --		'')
    --			usage
    --			;;
    --		esac
    --		branch="$2"; shift
    --		;;
      	--cached)
    - 		cached="$1"
    +-		cached=1
    ++		if test -z "$command"
    ++		then
    ++			cached=1 &&
    ++			shift &&
    ++			break
    ++		else
    ++			usage
    ++		fi
      		;;
    + 	--)
    + 		break
     @@ git-submodule.sh: then
          fi
      fi
      
    --# "-b branch" is accepted only by "add" and "set-branch"
    --if test -n "$branch" && (test "$command" != add || test "$command" != set-branch)
    +-# "--cached" is accepted only by "status" and "summary"
    +-if test -n "$cached" && test "$command" != status && test "$command" != summary
     -then
     -	usage
     -fi
     -
    - # "--cached" is accepted only by "status" and "summary"
    - if test -n "$cached" && test "$command" != status && test "$command" != summary
    - then
    + case "$command" in
    + absorbgitdirs)
    + 	git submodule--helper "$command" --prefix "$wt_prefix" "$@"
    +
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: test_expect_success 'submodule usage: status --' '
    + 	test_expect_code 1 git submodule --end-of-options
    + '
    + 
    +-for opt in '--quiet' '--cached'
    ++for opt in '--quiet'
    + do
    + 	test_expect_success "submodule usage: status $opt" '
    + 		git submodule $opt &&
    +@@ t/t7400-submodule-basic.sh: do
    + 	'
    + done
    + 
    ++for opt in '--cached'
    ++do
    ++	test_expect_success "submodule usage: status $opt" '
    ++		git submodule $opt &&
    ++		git submodule status $opt &&
    ++		test_expect_code 1 git submodule $opt status >out 2>err &&
    ++		grep "^usage: git submodule" err &&
    ++		test_must_be_empty out
    ++	'
    ++done
    ++
    + test_expect_success 'submodule deinit works on empty repository' '
    + 	git submodule deinit --all
    + '
    +@@ t/t7400-submodule-basic.sh: test_expect_success 'status should be "modified" after submodule commit' '
    + '
    + 
    + test_expect_success 'the --cached sha1 should be rev1' '
    +-	git submodule --cached status >list &&
    ++	git submodule status --cached >list &&
    + 	grep "^+$rev1" list
    + '
    + 
19:  64f642d7c18 !  8:  4b5746382bd submodule: make it a built-in, remove git-submodule.sh
    @@ Commit message
         t0012-help.sh (which invokes all built-ins manually with "-h"). Let's
         leave it for now, eventually we'll consolidate the two.
     
    +    This changes the behavior for "-h" and "--", see the altered
    +    tests. Returning 129 instead of 0 and 1 for "-h" and "--" respectively
    +    is a concession to basic sanity. As noted the "--" edge case doesn't
    +    make sense, but let's address that in a follow-up commit.
    +
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Makefile ##
    @@ builtin/submodule.c (new)
     +};
     +
     +static void setup_helper_args(int argc, const char **argv, const char *prefix,
    -+			      int quiet, int cached, struct strvec *args)
    ++			      int quiet, int cached, struct strvec *args,
    ++			      const struct option *options)
     +{
     +	const char *cmd;
     +	int do_quiet_cache = 1;
    @@ builtin/submodule.c (new)
     +		return;
     +	}
     +
    ++	/* Did we get --cached with a command? */
    ++	if (cached)
    ++		usage_msg_optf(_("'%s' option is only supported with explicit 'status'"),
    ++			       git_submodule_usage, options, "--cached");
    ++
    ++
     +	/* Either a valid command, or submodule--helper will barf! */
     +	cmd = argv[0];
     +	strvec_push(args, cmd);
     +	argv++;
     +	argc--;
     +
    ++	/*
    ++	  * This is stupid, but don't support "[--]" to
    ++	 * subcommand-less "git-submodule" for now.
    ++	 */
    ++	if (!strcmp(cmd, "--") || !strcmp(cmd, "--end-of-options"))
    ++		usage_msg_optf(_("need explicit sub-command name to delimit with '%s'"),
    ++			       git_submodule_usage, options, cmd);
    ++
     +	/* Options that need to go before user-supplied options */
     +	if (!strcmp(cmd, "absorbgitdirs"))
     +		do_quiet_cache = 0;
    @@ builtin/submodule.c (new)
     +	int ret;
     +
     +	argc = parse_options(argc, argv, prefix, options, git_submodule_usage,
    -+			     PARSE_OPT_STOP_AT_NON_OPTION);
    ++			     PARSE_OPT_STOP_AT_NON_OPTION | PARSE_OPT_KEEP_DASHDASH);
     +
     +	/*
     +	 * Tell the rest of git that any URLs we get don't come
     +	 * directly from the user, so it can apply policy as appropriate.
     +	 */
    -+	strvec_push(&cp.env_array, "GIT_PROTOCOL_FROM_USER=0");
    ++	strvec_push(&cp.env, "GIT_PROTOCOL_FROM_USER=0");
     +	setup_helper_args(argc, argv, prefix, opt_quiet, opt_cached,
    -+			  &cp.args);
    ++			  &cp.args, options);
     +
     +	cp.git_cmd = 1;
     +	cp.no_stdin = 0; /* for git submodule foreach */
    @@ git-submodule.sh (deleted)
     -   or: $dashless [--quiet] status [--cached] [--recursive] [--] [<path>...]
     -   or: $dashless [--quiet] init [--] [<path>...]
     -   or: $dashless [--quiet] deinit [-f|--force] (--all| [--] <path>...)
    --   or: $dashless [--quiet] update [-v] [--init [--filter=<filter-spec>]] [--remote] [-N|--no-fetch] [-f|--force] [--checkout|--merge|--rebase] [--[no-]recommend-shallow] [--reference <repository>] [--recursive] [--[no-]single-branch] [--] [<path>...]
    +-   or: $dashless [--quiet] update [--init [--filter=<filter-spec>]] [--remote] [-N|--no-fetch] [-f|--force] [--checkout|--merge|--rebase] [--[no-]recommend-shallow] [--reference <repository>] [--recursive] [--[no-]single-branch] [--] [<path>...]
     -   or: $dashless [--quiet] set-branch (--default|--branch <branch>) [--] <path>
     -   or: $dashless [--quiet] set-url [--] <path> <newurl>
     -   or: $dashless [--quiet] summary [--cached|--files] [--summary-limit <n>] [commit] [--] [<path>...]
    @@ git-submodule.sh (deleted)
     -GIT_PROTOCOL_FROM_USER=0
     -export GIT_PROTOCOL_FROM_USER
     -
    +-command=
     -quiet=
     -cached=
     -
    --while test $# != 0
    +-while test $# != 0 && test -z "$command"
     -do
     -	case "$1" in
    +-	add | foreach | init | deinit | update | set-branch | set-url | status | summary | sync | absorbgitdirs)
    +-		command=$1
    +-		;;
     -	-q|--quiet)
    --		quiet=1 &&
    --		shift
    +-		quiet=1
     -		;;
     -	--cached)
    --		cached=1 &&
    --		shift
    +-		if test -z "$command"
    +-		then
    +-			cached=1 &&
    +-			shift &&
    +-			break
    +-		else
    +-			usage
    +-		fi
    +-		;;
    +-	--)
    +-		break
    +-		;;
    +-	-*)
    +-		usage
     -		;;
     -	*)
     -		break
     -		;;
     -	esac
    +-	shift
     -done
     -
     -# No command word defaults to "status"
    --command=
    --if test $# = 0
    +-if test -z "$command"
     -then
    +-    if test $# = 0
    +-    then
     -	command=status
    --else
    --	case "$1" in
    --	add | foreach | init | deinit | update | set-branch | set-url | status | summary | sync | absorbgitdirs)
    --		command=$1 &&
    --		shift
    --		;;
    --	*)
    --		usage
    --	esac
    +-    else
    +-	usage
    +-    fi
     -fi
     -
     -case "$command" in
    @@ git-submodule.sh (deleted)
     -	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
     -		${quiet:+--quiet} ${wt_prefix:+--prefix "$wt_prefix"} "$@"
     -	;;
    --*)
    +-add | foreach | init | deinit | set-branch | set-url | status | summary | sync)
     -	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
     -		${quiet:+--quiet} ${cached:+--cached} "$@"
     -	;;
    @@ git.c: static struct cmd_struct commands[] = {
      	{ "submodule--helper", cmd_submodule__helper, RUN_SETUP | SUPPORT_SUPER_PREFIX | NO_PARSEOPT },
      	{ "switch", cmd_switch, RUN_SETUP | NEED_WORK_TREE },
      	{ "symbolic-ref", cmd_symbolic_ref, RUN_SETUP },
    +
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
    + . ./test-lib.sh
    + 
    + test_expect_success 'submodule usage: -h' '
    +-	git submodule -h >out 2>err &&
    ++	test_expect_code 129 git submodule -h >out 2>err &&
    + 	grep "^usage: git submodule" out &&
    + 	test_must_be_empty err
    + '
    + 
    + test_expect_success 'submodule usage: --recursive' '
    +-	test_expect_code 1 git submodule --recursive >out 2>err &&
    +-	grep "^usage: git submodule" err &&
    +-	test_must_be_empty out
    ++	test_expect_code 129 git submodule --recursive
    + '
    + 
    + test_expect_success 'submodule usage: status --' '
    +-	test_expect_code 1 git submodule -- &&
    +-	test_expect_code 1 git submodule --end-of-options
    ++	test_expect_code 129 git submodule -- &&
    ++	test_expect_code 129 git submodule --end-of-options
    + '
    + 
    + for opt in '--quiet'
    +@@ t/t7400-submodule-basic.sh: do
    + 	test_expect_success "submodule usage: status $opt" '
    + 		git submodule $opt &&
    + 		git submodule status $opt &&
    +-		test_expect_code 1 git submodule $opt status >out 2>err &&
    ++		test_expect_code 129 git submodule $opt status >out 2>err &&
    + 		grep "^usage: git submodule" err &&
    + 		test_must_be_empty out
    + 	'
 3:  17c3082855d !  9:  1aa78eec9a9 git-submodule.sh: remove unused --super-prefix logic
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    git-submodule.sh: remove unused --super-prefix logic
    +    submodule: support "--" with no other arguments
     
    -    The "$prefix" variable has not been set since b3c5f5cb048 (submodule:
    -    move core cmd_update() logic to C, 2022-03-15), so we'd never pass the
    -    --super-prefix option to "git submodule--helper", and can therefore
    -    remove the handling of it from builtin/submodule--helper.c as well.
    +    Address an edge case in the *.sh to *.c migration of "git
    +    submodule". We didn't support the "--" delimiter in the argument-less
    +    invocation. Let's not bend over backwards to behave unusually in this
    +    scenario, simply accepting "--" is harmless.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/submodule--helper.c ##
    -@@ builtin/submodule--helper.c: static int module_add(int argc, const char **argv, const char *prefix)
    - 	return 0;
    - }
    + ## Documentation/git-submodule.txt ##
    +@@ Documentation/git-submodule.txt: git-submodule - Initialize, update or inspect submodules
    + SYNOPSIS
    + --------
    + [verse]
    +-'git submodule' [--quiet] [--cached]
    ++'git submodule' [--quiet] [--cached] [--]
    + 'git submodule' [--quiet] add [<options>] [--] <repository> [<path>]
    + 'git submodule' [--quiet] status [--cached] [--recursive] [--] [<path>...]
    + 'git submodule' [--quiet] init [--] [<path>...]
    +
    + ## builtin/submodule.c ##
    +@@
    + #include "strvec.h"
    + 
    + #define BUILTIN_SUBMODULE_USAGE \
    +-	"git submodule [--quiet] [--cached]"
    ++	"git submodule [--quiet] [--cached] [--]"
      
    --#define SUPPORT_SUPER_PREFIX (1<<0)
    + #define BUILTIN_SUBMODULE_ADD_USAGE \
    + 	N_("git submodule [--quiet] add [-b <branch>] [-f | --force] [--name <name>]\n" \
    +@@ builtin/submodule.c: static void setup_helper_args(int argc, const char **argv, const char *prefix,
    + 	argv++;
    + 	argc--;
    + 
    +-	/*
    +-	  * This is stupid, but don't support "[--]" to
    +-	 * subcommand-less "git-submodule" for now.
    +-	 */
    +-	if (!strcmp(cmd, "--") || !strcmp(cmd, "--end-of-options"))
    +-		usage_msg_optf(_("need explicit sub-command name to delimit with '%s'"),
    +-			       git_submodule_usage, options, cmd);
     -
    - struct cmd_struct {
    - 	const char *cmd;
    - 	int (*fn)(int, const char **, const char *);
    --	unsigned option;
    - };
    + 	/* Options that need to go before user-supplied options */
    + 	if (!strcmp(cmd, "absorbgitdirs"))
    + 		do_quiet_cache = 0;
    +@@ builtin/submodule.c: int cmd_submodule(int argc, const char **argv, const char *prefix)
    + 	int ret;
      
    - static struct cmd_struct commands[] = {
    --	{"list", module_list, 0},
    --	{"name", module_name, 0},
    --	{"clone", module_clone, 0},
    --	{"add", module_add, SUPPORT_SUPER_PREFIX},
    --	{"update", module_update, 0},
    --	{"resolve-relative-url-test", resolve_relative_url_test, 0},
    --	{"foreach", module_foreach, SUPPORT_SUPER_PREFIX},
    --	{"init", module_init, SUPPORT_SUPER_PREFIX},
    --	{"status", module_status, SUPPORT_SUPER_PREFIX},
    --	{"sync", module_sync, SUPPORT_SUPER_PREFIX},
    --	{"deinit", module_deinit, 0},
    --	{"summary", module_summary, SUPPORT_SUPER_PREFIX},
    --	{"push-check", push_check, 0},
    --	{"absorb-git-dirs", absorb_git_dirs, SUPPORT_SUPER_PREFIX},
    --	{"is-active", is_active, 0},
    --	{"check-name", check_name, 0},
    --	{"config", module_config, 0},
    --	{"set-url", module_set_url, 0},
    --	{"set-branch", module_set_branch, 0},
    --	{"create-branch", module_create_branch, 0},
    -+	{"list", module_list},
    -+	{"name", module_name},
    -+	{"clone", module_clone},
    -+	{"add", module_add},
    -+	{"update", module_update},
    -+	{"resolve-relative-url-test", resolve_relative_url_test},
    -+	{"foreach", module_foreach},
    -+	{"init", module_init},
    -+	{"status", module_status},
    -+	{"sync", module_sync},
    -+	{"deinit", module_deinit},
    -+	{"summary", module_summary},
    -+	{"push-check", push_check},
    -+	{"absorb-git-dirs", absorb_git_dirs},
    -+	{"is-active", is_active},
    -+	{"check-name", check_name},
    -+	{"config", module_config},
    -+	{"set-url", module_set_url},
    -+	{"set-branch", module_set_branch},
    -+	{"create-branch", module_create_branch},
    - };
    + 	argc = parse_options(argc, argv, prefix, options, git_submodule_usage,
    +-			     PARSE_OPT_STOP_AT_NON_OPTION | PARSE_OPT_KEEP_DASHDASH);
    ++			     PARSE_OPT_STOP_AT_NON_OPTION);
      
    - int cmd_submodule__helper(int argc, const char **argv, const char *prefix)
    -@@ builtin/submodule--helper.c: int cmd_submodule__helper(int argc, const char **argv, const char *prefix)
    - 	if (argc < 2 || !strcmp(argv[1], "-h"))
    - 		usage("git submodule--helper <command>");
    + 	/*
    + 	 * Tell the rest of git that any URLs we get don't come
    +
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: test_expect_success 'submodule usage: --recursive' '
    + '
      
    --	for (i = 0; i < ARRAY_SIZE(commands); i++) {
    --		if (!strcmp(argv[1], commands[i].cmd)) {
    --			if (get_super_prefix() &&
    --			    !(commands[i].option & SUPPORT_SUPER_PREFIX))
    --				die(_("%s doesn't support --super-prefix"),
    --				    commands[i].cmd);
    -+	for (i = 0; i < ARRAY_SIZE(commands); i++)
    -+		if (!strcmp(argv[1], commands[i].cmd))
    - 			return commands[i].fn(argc - 1, argv + 1, prefix);
    --		}
    --	}
    + test_expect_success 'submodule usage: status --' '
    +-	test_expect_code 129 git submodule -- &&
    +-	test_expect_code 129 git submodule --end-of-options
    ++	git submodule -- &&
    ++	git submodule --end-of-options
    + '
      
    - 	die(_("'%s' is not a valid submodule--helper "
    - 	      "subcommand"), argv[1]);
    + for opt in '--quiet'
 5:  183c9fa3f32 <  -:  ----------- git-submodule.sh: normalize parsing of --cached
 6:  4da865e385c <  -:  ----------- submodule--helper: rename "absorb-git-dirs" to "absorbgitdirs"
 8:  b52c7b305a7 <  -:  ----------- submodule--helper: pretend to be "git submodule" in "-h" output
12:  170ae477c58 <  -:  ----------- submodule--helper: have --require-init imply --init
13:  c34e95a44b7 <  -:  ----------- submodule--helper: understand --checkout, --merge and --rebase synonyms
14:  949a88731ba <  -:  ----------- git-submodule doc: document the -v" option to "update"
17:  e1f1fea251c <  -:  ----------- git-submodule.sh: use "$quiet", not "$GIT_QUIET"
20:  b699d4fd83b ! 10:  e876c3db6da submodule: add a subprocess-less submodule.useBuiltin setting
    @@ builtin/submodule.c
     +#include "config.h"
      
      #define BUILTIN_SUBMODULE_USAGE \
    - 	"git submodule [--quiet] [--cached]"
    + 	"git submodule [--quiet] [--cached] [--]"
     @@ builtin/submodule.c: static void setup_helper_args(int argc, const char **argv, const char *prefix,
      	strvec_pushv(args, argv);
      }
    @@ builtin/submodule.c: int cmd_submodule(int argc, const char **argv, const char *
      	 * Tell the rest of git that any URLs we get don't come
      	 * directly from the user, so it can apply policy as appropriate.
      	 */
    --	strvec_push(&cp.env_array, "GIT_PROTOCOL_FROM_USER=0");
    +-	strvec_push(&cp.env, "GIT_PROTOCOL_FROM_USER=0");
     +	if (use_builtin)
     +		xsetenv("GIT_PROTOCOL_FROM_USER", "0", 1);
     +	else
    -+		strvec_push(&cp.env_array, "GIT_PROTOCOL_FROM_USER=0");
    ++		strvec_push(&cp.env, "GIT_PROTOCOL_FROM_USER=0");
     +
      	setup_helper_args(argc, argv, prefix, opt_quiet, opt_cached,
    --			  &cp.args);
    -+			  use_builtin ? &args : &cp.args);
    +-			  &cp.args, options);
    ++			  use_builtin ? &args : &cp.args, options);
     +
     +	if (use_builtin) {
     +		ret = cmd_submodule__helper(args.nr, args.v, prefix);
18:  508aba182cd ! 11:  8427d9c2bcc git-submodule.sh: simplify parsing loop
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    git-submodule.sh: simplify parsing loop
    +    submodule: support sub-command-less "--recursive" option
     
    -    Simplify the parsing loop so that we don't try to find out the
    -    "$command" when looping over arguments initially, we'll only look for
    -    the --quiet and --cached options.
    -
    -    Then if we have no more arguments we default to "status", otherwise we
    -    emit our usage info. Most importantly we don't need to give --cache to
    -    only "status" and "summary", instead we trust that "submodule--helper"
    -    is checking those arguments, if some subcommands don't them they can
    -    emit their own errors.
    +    The inability to specify "--recursive" when we're not providing a
    +    sub-command name appears to have been an omission in 15fc56a8536 (git
    +    submodule foreach: Add --recursive to recurse into nested submodules,
    +    2009-08-19). Let's support it along with the other "status" options.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## git-submodule.sh ##
    -@@ git-submodule.sh: cd_to_toplevel
    - GIT_PROTOCOL_FROM_USER=0
    - export GIT_PROTOCOL_FROM_USER
    + ## Documentation/git-submodule.txt ##
    +@@ Documentation/git-submodule.txt: git-submodule - Initialize, update or inspect submodules
    + SYNOPSIS
    + --------
    + [verse]
    +-'git submodule' [--quiet] [--cached] [--]
    ++'git submodule' [--quiet] [--cached] [--recursive] [--]
    + 'git submodule' [--quiet] add [<options>] [--] <repository> [<path>]
    + 'git submodule' [--quiet] status [--cached] [--recursive] [--] [<path>...]
    + 'git submodule' [--quiet] init [--] [<path>...]
    +
    + ## builtin/submodule.c ##
    +@@ builtin/submodule.c: static const char * const git_submodule_usage[] = {
    + };
      
    --command=
    - quiet=
    - cached=
    + static void setup_helper_args(int argc, const char **argv, const char *prefix,
    +-			      int quiet, int cached, struct strvec *args,
    ++			      int quiet, int cached, int recursive,
    ++			      struct strvec *args,
    + 			      const struct option *options)
    + {
    + 	const char *cmd;
    +@@ builtin/submodule.c: static void setup_helper_args(int argc, const char **argv, const char *prefix,
    + 		return;
    + 	}
      
    --while test $# != 0 && test -z "$command"
    -+while test $# != 0
    - do
    - 	case "$1" in
    --	add | foreach | init | deinit | update | set-branch | set-url | status | summary | sync | absorbgitdirs)
    --		command=$1
    --		;;
    - 	-q|--quiet)
    --		quiet=1
    -+		quiet=1 &&
    -+		shift
    - 		;;
    - 	--cached)
    --		cached=1
    --		;;
    --	--)
    --		break
    --		;;
    --	-*)
    --		usage
    -+		cached=1 &&
    -+		shift
    - 		;;
    - 	*)
    - 		break
    - 		;;
    - 	esac
    --	shift
    - done
    +-	/* Did we get --cached with a command? */
    ++	/* Did we get a forbidden top-level option with a command? */
    + 	if (cached)
    + 		usage_msg_optf(_("'%s' option is only supported with explicit 'status'"),
    + 			       git_submodule_usage, options, "--cached");
    ++	if (recursive)
    ++		usage_msg_optf(_("'%s' option is only supported with explicit 'status'"),
    ++			       git_submodule_usage, options, "--recursive");
    + 
    + 
    + 	/* Either a valid command, or submodule--helper will barf! */
    +@@ builtin/submodule.c: static void setup_helper_args(int argc, const char **argv, const char *prefix,
    + 	argc--;
      
    - # No command word defaults to "status"
    --if test -z "$command"
    -+command=
    -+if test $# = 0
    - then
    --    if test $# = 0
    --    then
    - 	command=status
    --    else
    --	usage
    --    fi
    --fi
    + 	/* Options that need to go before user-supplied options */
    ++	if (!strcmp(cmd, "status") && recursive)
    ++		strvec_push(args, "--recursive");
    ++
    + 	if (!strcmp(cmd, "absorbgitdirs"))
    + 		do_quiet_cache = 0;
    + 	else if (!strcmp(cmd, "update"))
    +@@ builtin/submodule.c: int cmd_submodule(int argc, const char **argv, const char *prefix)
    + {
    + 	int opt_quiet = 0;
    + 	int opt_cached = 0;
    ++	int opt_recursive = 0;
    + 	struct child_process cp = CHILD_PROCESS_INIT;
    + 	struct strvec args = STRVEC_INIT;
    + 	struct option options[] = {
    + 		OPT__QUIET(&opt_quiet, N_("be quiet")),
    + 		OPT_BOOL(0, "cached", &opt_cached,
    + 			 N_("print the OID of submodules")),
    ++		OPT_BOOL(0, "recursive", &opt_recursive,
    ++			 N_("recurse into nested submodules")),
    + 		OPT_END()
    + 	};
    + 	const int use_builtin = get_use_builtin();
    +@@ builtin/submodule.c: int cmd_submodule(int argc, const char **argv, const char *prefix)
    + 		strvec_push(&cp.env, "GIT_PROTOCOL_FROM_USER=0");
    + 
    + 	setup_helper_args(argc, argv, prefix, opt_quiet, opt_cached,
    +-			  use_builtin ? &args : &cp.args, options);
    ++			  opt_recursive, use_builtin ? &args : &cp.args,
    ++			  options);
    + 
    + 	if (use_builtin) {
    + 		ret = cmd_submodule__helper(args.nr, args.v, prefix);
    +
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: test_expect_success 'submodule usage: -h' '
    + 	test_must_be_empty err
    + '
    + 
    +-test_expect_success 'submodule usage: --recursive' '
    +-	test_expect_code 129 git submodule --recursive
    +-'
     -
    --# "--cached" is accepted only by "status" and "summary"
    --if test -n "$cached" && test "$command" != status && test "$command" != summary
    --then
    --	usage
    -+else
    -+	case "$1" in
    -+	add | foreach | init | deinit | update | set-branch | set-url | status | summary | sync | absorbgitdirs)
    -+		command=$1 &&
    -+		shift
    -+		;;
    -+	*)
    -+		usage
    -+	esac
    - fi
    + test_expect_success 'submodule usage: status --' '
    + 	git submodule -- &&
    + 	git submodule --end-of-options
    +@@ t/t7400-submodule-basic.sh: do
    + 	'
    + done
      
    - case "$command" in
    -@@ git-submodule.sh: update)
    - 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    - 		${quiet:+--quiet} ${wt_prefix:+--prefix "$wt_prefix"} "$@"
    - 	;;
    --add | foreach | init | deinit | set-branch | set-url | status | summary | sync)
    -+*)
    - 	git ${wt_prefix:+-C "$wt_prefix"} submodule--helper "$command" \
    - 		${quiet:+--quiet} ${cached:+--cached} "$@"
    - 	;;
    +-for opt in '--cached'
    ++for opt in '--cached' '--recursive'
    + do
    + 	test_expect_success "submodule usage: status $opt" '
    + 		git submodule $opt &&
-- 
2.36.1.1239.gfba91521d90

