From 6c0c524d2e30c23408ba86d892be4e5d8ea64cbb Mon Sep 17 00:00:00 2001
Message-Id: <cover-0.7-0000000000-20210420T130330Z-avarab@gmail.com>
In-Reply-To: <cover-0.7-0000000000-20210409T083436Z-avarab@gmail.com>
References: <cover-0.7-0000000000-20210409T083436Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 20 Apr 2021 15:03:30 +0200
Subject: [PATCH v2 0/7] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (7):
  tree.c: fix misindentation in parse_tree_gently()
  object.c: add a utility function for "expected type X, got Y"
  object.c: add and use oid_is_type_or_die_msg() function
  commit-graph: use obj->type, not object_as_type()
  commit.c: don't use deref_tag() -> object_as_type()
  object.c: normalize brace style in object_as_type()
  object.c: remove "quiet" parameter from object_as_type()

 blob.c                 |  2 +-
 builtin/commit-graph.c |  2 +-
 builtin/fsck.c         |  2 +-
 builtin/index-pack.c   |  9 +++-----
 combine-diff.c         |  3 +--
 commit.c               | 28 ++++++++++++++---------
 merge-recursive.c      |  5 ++++-
 object.c               | 51 ++++++++++++++++++++++++++++++++++--------
 object.h               | 10 ++++++++-
 refs.c                 |  2 +-
 t/helper/test-reach.c  |  2 +-
 tag.c                  |  2 +-
 tree.c                 | 15 +++++++------
 13 files changed, 90 insertions(+), 43 deletions(-)

Range-diff against v1:
 1:  68a7709fe5 <  -:  ---------- blob.c: remove buffer & size arguments to parse_blob_buffer()
 2:  f1fcc31717 <  -:  ---------- object.c: initialize automatic variable in lookup_object()
 3:  820f3aed21 <  -:  ---------- object.c: stop supporting len == -1 in type_from_string_gently()
 4:  daed40c479 <  -:  ---------- object.c: remove "gently" argument to type_from_string_gently()
 5:  7fd86f6699 <  -:  ---------- object.c: make type_from_string() return "enum object_type"
 6:  ebea1b2b50 <  -:  ---------- object-file.c: make oid_object_info() return "enum object_type"
 7:  94e13611f0 <  -:  ---------- object-name.c: make dependency on object_type order more obvious
 8:  3279d67d2b <  -:  ---------- tag.c: use type_from_string_gently() when parsing tags
 9:  4bf9a4f7a1 =  1:  c39b235035 tree.c: fix misindentation in parse_tree_gently()
10:  0be843e838 =  2:  1b472fcd85 object.c: add a utility function for "expected type X, got Y"
11:  fb2e4feb3d =  3:  22e7d9a3db object.c: add and use oid_is_type_or_die_msg() function
12:  995135c814 =  4:  8e43d44911 commit-graph: use obj->type, not object_as_type()
13:  754d5ae267 =  5:  d053d98615 commit.c: don't use deref_tag() -> object_as_type()
14:  e414cfe40c =  6:  035547d586 object.c: normalize brace style in object_as_type()
15:  64360ac260 !  7:  6c0c524d2e object.c: remove "quiet" parameter from object_as_type()
    @@ blob.c
     @@ blob.c: struct blob *lookup_blob(struct repository *r, const struct object_id *oid)
      	struct object *obj = lookup_object(r, oid);
      	if (!obj)
    - 		return create_object(r, oid, alloc_blob_node(r));
    + 		return create_blob(r, oid);
     -	return object_as_type(obj, OBJ_BLOB, 0);
     +	return object_as_type(obj, OBJ_BLOB);
      }
    - 
    - int parse_blob_buffer(struct blob *item)
     
      ## builtin/fsck.c ##
     @@ builtin/fsck.c: static void mark_unreachable_referents(const struct object_id *oid)
    @@ commit.c: struct commit *lookup_commit_reference_gently(struct repository *r,
     @@ commit.c: struct commit *lookup_commit(struct repository *r, const struct object_id *oid)
      	struct object *obj = lookup_object(r, oid);
      	if (!obj)
    - 		return create_object(r, oid, alloc_commit_node(r));
    + 		return create_commit(r, oid);
     -	return object_as_type(obj, OBJ_COMMIT, 0);
     +	return object_as_type(obj, OBJ_COMMIT);
      }
    @@ tag.c
     @@ tag.c: struct tag *lookup_tag(struct repository *r, const struct object_id *oid)
      	struct object *obj = lookup_object(r, oid);
      	if (!obj)
    - 		return create_object(r, oid, alloc_tag_node(r));
    + 		return create_tag(r, oid);
     -	return object_as_type(obj, OBJ_TAG, 0);
     +	return object_as_type(obj, OBJ_TAG);
      }
    @@ tree.c
     @@ tree.c: struct tree *lookup_tree(struct repository *r, const struct object_id *oid)
      	struct object *obj = lookup_object(r, oid);
      	if (!obj)
    - 		return create_object(r, oid, alloc_tree_node(r));
    + 		return create_tree(r, oid);
     -	return object_as_type(obj, OBJ_TREE, 0);
     +	return object_as_type(obj, OBJ_TREE);
      }
-- 
2.31.1.723.ga5d7868e4a

