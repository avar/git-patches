From 686febb8cdc9438498f50e593c23f6e8be8a9b93 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v6-0.6-00000000000-20230202T094620Z-avarab@gmail.com>
In-Reply-To: <cover-v5-00.19-00000000000-20230118T120334Z-avarab@gmail.com>
References: <cover-v5-00.19-00000000000-20230118T120334Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 2 Feb 2023 10:46:20 +0100
Subject: [PATCH v6 0/6] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (6):
  imap-send: note "auth_method", not "host" on auth method failure
  imap-send doc: the imap.sslVerify is used with imap.tunnel
  imap-send: replace auto-probe libcurl with hard dependency
  imap-send: make --curl no-optional
  imap-send: remove old --no-curl codepath
  imap-send: correctly report "host" when using "tunnel"

 Documentation/config/imap.txt   |   8 +-
 Documentation/git-imap-send.txt |  11 --
 INSTALL                         |   8 +-
 Makefile                        |  18 +---
 imap-send.c                     | 182 +++++---------------------------
 5 files changed, 41 insertions(+), 186 deletions(-)

Range-diff against v5:
 1:  c47fc0fb637 <  -:  ----------- tests: mark tests as passing with SANITIZE=leak
 2:  9eb758117dc <  -:  ----------- bundle.c: don't leak the "args" in the "struct child_process"
 -:  ----------- >  1:  3187a643035 imap-send: note "auth_method", not "host" on auth method failure
 3:  01b6229f18a !  2:  1dfee9bf08e commit-graph: use free_commit_graph() instead of UNLEAK()
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    commit-graph: use free_commit_graph() instead of UNLEAK()
    +    imap-send doc: the imap.sslVerify is used with imap.tunnel
     
    -    In 0bfb48e6723 (builtin/commit-graph.c: UNLEAK variables, 2018-10-03)
    -    this was made to UNLEAK(), but we can just as easily invoke the
    -    free_commit_graph() function added in c3756d5b7fc (commit-graph: add
    -    free_commit_graph, 2018-07-11) instead.
    +    This documentation added in [1] claims that imap.{host,port,sslVerify}
    +    is ignored if imap.tunnel is set. That's correct in the first two
    +    cases, but not for imap.sslVerify.
    +
    +    When we're using the tunnel feature we'll call ssl_socket_connect()
    +    with a 3rd "verify" argument set to the value of the "imap.sslVerify"
    +    config if we're on the !preauth path. There is also a call to
    +    ssl_socket_connect() that's specific to the non-tunnel
    +    codepath.
    +
    +    Perhaps the documentation added in [1] was written for an earlier
    +    version of [2] (which was introduced in the same series). There is an
    +    earlier version of the patch on-list[3] where there's still a "FIXME"
    +    comment indicating that we should read the config in the future before
    +    setting "SSL_VERIFY_PEER", which is what we'll do if "imap.sslVerify"
    +    is set.
    +
    +    1. c82b0748e53 (Documentation: Improve documentation for
    +       git-imap-send(1), 2008-07-09)
    +    2. 684ec6c63cd (git-imap-send: Support SSL, 2008-07-09)
    +    3. https://lore.kernel.org/git/1096648c0806010829n71de92dcmc19ddb87da19931d@mail.gmail.com/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/commit-graph.c ##
    -@@ builtin/commit-graph.c: static int graph_verify(int argc, const char **argv, const char *prefix)
    - 	int fd;
    - 	struct stat st;
    - 	int flags = 0;
    -+	int ret;
    - 
    - 	static struct option builtin_commit_graph_verify_options[] = {
    - 		OPT_BOOL(0, "shallow", &opts.shallow,
    -@@ builtin/commit-graph.c: static int graph_verify(int argc, const char **argv, const char *prefix)
    - 	if (!graph)
    - 		return !!open_ok;
    + ## Documentation/config/imap.txt ##
    +@@ Documentation/config/imap.txt: imap.port::
      
    --	UNLEAK(graph);
    --	return verify_commit_graph(the_repository, graph, flags);
    -+	ret = verify_commit_graph(the_repository, graph, flags);
    -+	free_commit_graph(graph);
    -+	return ret;
    - }
    + imap.sslverify::
    + 	A boolean to enable/disable verification of the server certificate
    +-	used by the SSL/TLS connection. Default is `true`. Ignored when
    +-	imap.tunnel is set.
    ++	used by the SSL/TLS connection.
      
    - extern int read_replace_refs;
    + imap.preformattedHTML::
    + 	A boolean to enable/disable the use of html encoding when sending
 4:  f4f3aef2861 <  -:  ----------- clone: use free() instead of UNLEAK()
 5:  8d10fbe0b8f <  -:  ----------- various: add missing clear_pathspec(), fix leaks
 6:  eb5dc3ac192 <  -:  ----------- name-rev: don't xstrdup() an already dup'd string
15:  d36ad1f818a !  3:  354b6a65a78 object-file.c: release the "tag" in check_tag()
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    object-file.c: release the "tag" in check_tag()
    +    imap-send: replace auto-probe libcurl with hard dependency
     
    -    Fix a memory leak that's been with us ever since c879daa2372 (Make
    -    hash-object more robust against malformed objects, 2011-02-05). With
    -    "HASH_FORMAT_CHECK" (used by "hash-object" and "replace") we'll parse
    -    tags into a throwaway variable on the stack, but weren't freeing the
    -    "item->tag" we might malloc() when doing so.
    +    Change the "imap-send" command to have a hard dependency on libcurl,
    +    before this it had an optional dependency on both libcurl and OpenSSL,
    +    now only the OpenSSL dependency is optional.
     
    -    The clearing that release_tag_memory() does for us is redundant here,
    -    but let's use it as-is anyway. It only has one other existing caller,
    -    which does need the tag to be cleared.
    +    This simplifies our dependency matrix by getting rid of yet another
    +    special-case. Given the prevalence of libcurl and portability of
    +    libcurl it seems reasonable to say that "git imap-send" cannot be used
    +    without libcurl, almost everyone building git needs to be able to push
    +    or pull over http(s), so they'll be building with libcurl already.
     
    -    Mark the tests that now pass in their entirety as passing under
    -    "SANITIZE=leak", which means we'll test them as part of the
    -    "linux-leaks" CI job.
    +    So let's remove the previous "USE_CURL_FOR_IMAP_SEND" knob. Whether we
    +    build git-imap-send or not is now controlled by the "NO_CURL"
    +    knob.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## object-file.c ##
    -@@ object-file.c: static void check_tag(const void *buf, size_t size)
    - 	memset(&t, 0, sizeof(t));
    - 	if (parse_tag_buffer(the_repository, &t, buf, size))
    - 		die(_("corrupt tag"));
    -+	release_tag_memory(&t);
    - }
    + ## Documentation/config/imap.txt ##
    +@@ Documentation/config/imap.txt: imap.preformattedHTML::
      
    - static int index_mem(struct index_state *istate,
    + imap.authMethod::
    + 	Specify authenticate method for authentication with IMAP server.
    +-	If Git was built with the NO_CURL option, or if your curl version is older
    +-	than 7.34.0, or if you're running git-imap-send with the `--no-curl`
    ++	If you're running git-imap-send with the `--no-curl`
    + 	option, the only supported method is 'CRAM-MD5'. If this is not set
    + 	then 'git imap-send' uses the basic IMAP plaintext LOGIN command.
     
    - ## t/t3800-mktag.sh ##
    -@@
    + ## Documentation/git-imap-send.txt ##
    +@@ Documentation/git-imap-send.txt: OPTIONS
    + 
    + --no-curl::
    + 	Talk to the IMAP server using git's own IMAP routines instead of
    +-	using libcurl.  Ignored if Git was built with the NO_OPENSSL option
    +-	set.
    ++	using libcurl.
    + 
    + 
    + CONFIGURATION
    +
    + ## INSTALL ##
    +@@ INSTALL: Issues of note:
    + 	  itself, e.g. Digest::MD5, File::Spec, File::Temp, Net::Domain,
    + 	  Net::SMTP, and Time::HiRes.
    + 
    +-	- git-imap-send needs the OpenSSL library to talk IMAP over SSL if
    +-	  you are using libcurl older than 7.34.0.  Otherwise you can use
    +-	  NO_OPENSSL without losing git-imap-send.
    ++	- git-imap-send needs libcurl 7.34.0 or newer, in addition
    ++	  OpenSSL is needed if using the "imap.tunnel" open to tunnel
    ++	  over SSL. Define NO_OPENSSL to omit the OpenSSL prerequisite.
    + 
    + 	- "libcurl" library is used for fetching and pushing
    + 	  repositories over http:// or https://, as well as by
    +-	  git-imap-send if the curl version is >= 7.34.0. If you do
    ++	  git-imap-send. If you do
    + 	  not need that functionality, use NO_CURL to build without
    + 	  it.
    + 
    +
    + ## Makefile ##
    +@@ Makefile: PROGRAMS += $(EXTRA_PROGRAMS)
    + 
    + PROGRAM_OBJS += daemon.o
    + PROGRAM_OBJS += http-backend.o
    ++ifndef NO_CURL
    + PROGRAM_OBJS += imap-send.o
    ++endif
    + PROGRAM_OBJS += sh-i18n--envsubst.o
    + PROGRAM_OBJS += shell.o
    + .PHONY: program-objs
    +@@ Makefile: ifdef HAVE_ALLOCA_H
    + 	BASIC_CFLAGS += -DHAVE_ALLOCA_H
    + endif
      
    - test_description='git mktag: tag object verify test'
    +-IMAP_SEND_BUILDDEPS =
    + IMAP_SEND_LDFLAGS =
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + ifdef NO_CURL
    +@@ Makefile: ifdef NO_CURL
    + 	REMOTE_CURL_ALIASES =
    + 	REMOTE_CURL_NAMES =
    + 	EXCLUDED_PROGRAMS += git-http-fetch git-http-push
    ++	EXCLUDED_PROGRAMS += git-imap-send
    + else
    + 	ifdef CURLDIR
    + 		# Try "-Wl,-rpath=$(CURLDIR)/$(lib)" in such a case.
    +@@ Makefile: else
    + 	REMOTE_CURL_NAMES = $(REMOTE_CURL_PRIMARY) $(REMOTE_CURL_ALIASES)
    + 	PROGRAM_OBJS += http-fetch.o
    + 	PROGRAMS += $(REMOTE_CURL_NAMES)
    ++	IMAP_SEND_LDFLAGS += $(CURL_LIBCURL)
    + 	ifndef NO_EXPAT
    + 		PROGRAM_OBJS += http-push.o
    +-	endif
    +-	curl_check := $(shell (echo 072200; $(CURL_CONFIG) --vernum | sed -e '/^70[BC]/s/^/0/') 2>/dev/null | sort -r | sed -ne 2p)
    +-	ifeq "$(curl_check)" "072200"
    +-		USE_CURL_FOR_IMAP_SEND = YesPlease
    +-	endif
    +-	ifdef USE_CURL_FOR_IMAP_SEND
    +-		BASIC_CFLAGS += -DUSE_CURL_FOR_IMAP_SEND
    +-		IMAP_SEND_BUILDDEPS = http.o
    +-		IMAP_SEND_LDFLAGS += $(CURL_LIBCURL)
    +-	endif
    +-	ifndef NO_EXPAT
    + 		ifdef EXPATDIR
    + 			BASIC_CFLAGS += -I$(EXPATDIR)/include
    + 			EXPAT_LIBEXPAT = -L$(EXPATDIR)/$(lib) $(CC_LD_DYNPATH)$(EXPATDIR)/$(lib) -lexpat
    +@@ Makefile: endif
    + git-%$X: %.o GIT-LDFLAGS $(GITLIBS)
    + 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) $(LIBS)
    + 
    +-git-imap-send$X: imap-send.o $(IMAP_SEND_BUILDDEPS) GIT-LDFLAGS $(GITLIBS)
    ++git-imap-send$X: imap-send.o http.o GIT-LDFLAGS $(GITLIBS)
    + 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \
    + 		$(IMAP_SEND_LDFLAGS) $(LIBS)
      
    - ###########################################################
     
    - ## t/t5302-pack-index.sh ##
    + ## imap-send.c ##
     @@
    - #
    + #if defined(NO_OPENSSL) && !defined(HAVE_OPENSSL_CSPRNG)
    + typedef void *SSL;
    + #endif
    +-#ifdef USE_CURL_FOR_IMAP_SEND
    + #include "http.h"
    +-#endif
    +-
    +-#if defined(USE_CURL_FOR_IMAP_SEND)
    +-/* Always default to curl if it's available. */
    +-#define USE_CURL_DEFAULT 1
    +-#else
    +-/* We don't have curl, so continue to use the historical implementation */
    +-#define USE_CURL_DEFAULT 0
    +-#endif
    + 
    + static int verbosity;
    +-static int use_curl = USE_CURL_DEFAULT;
    ++static int use_curl = 1;
    + 
    + static const char * const imap_send_usage[] = { "git imap-send [-v] [-q] [--[no-]curl] < <mbox>", NULL };
      
    - test_description='pack index with 64-bit offsets and object CRC'
    -+
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +@@ imap-send.c: static int append_msgs_to_imap(struct imap_server_conf *server,
    + 	return 0;
    + }
    + 
    +-#ifdef USE_CURL_FOR_IMAP_SEND
    + static CURL *setup_curl(struct imap_server_conf *srvc, struct credential *cred)
    + {
    + 	CURL *curl;
    +@@ imap-send.c: static int curl_append_msgs_to_imap(struct imap_server_conf *server,
      
    - test_expect_success 'setup' '
    + 	return res != CURLE_OK;
    + }
    +-#endif
    + 
    + int cmd_main(int argc, const char **argv)
    + {
    +@@ imap-send.c: int cmd_main(int argc, const char **argv)
    + 	if (argc)
    + 		usage_with_options(imap_send_usage, imap_send_options);
    + 
    +-#ifndef USE_CURL_FOR_IMAP_SEND
    +-	if (use_curl) {
    +-		warning("--curl not supported in this build");
    +-		use_curl = 0;
    +-	}
    +-#elif defined(NO_OPENSSL)
    ++#if defined(NO_OPENSSL)
    + 	if (!use_curl) {
    + 		warning("--no-curl not supported in this build");
    + 		use_curl = 1;
    +@@ imap-send.c: int cmd_main(int argc, const char **argv)
    + 	if (server.tunnel)
    + 		return append_msgs_to_imap(&server, &all_msgs, total);
    + 
    +-#ifdef USE_CURL_FOR_IMAP_SEND
    + 	if (use_curl)
    + 		return curl_append_msgs_to_imap(&server, &all_msgs, total);
    +-#endif
    + 
    + 	return append_msgs_to_imap(&server, &all_msgs, total);
    + }
 8:  02248aca3eb !  4:  e9cc9bbed1e worktree: fix a trivial leak in prune_worktrees()
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    worktree: fix a trivial leak in prune_worktrees()
    +    imap-send: make --curl no-optional
     
    -    We were leaking both the "struct strbuf" in prune_worktrees(), as well
    -    as the "path" we got from should_prune_worktree(). Since these were
    -    the only two uses of the "struct string_list" let's change it to a
    -    "DUP" and push these to it with "string_list_append_nodup()".
    +    In the preceding commit the old "USE_CURL_FOR_IMAP_SEND" define became
    +    always true, as we now require libcurl for git-imap-send.
     
    -    For the string_list_append_nodup() we could also string_list_append()
    -    the main_path.buf, and then strbuf_release(&main_path) right away. But
    -    doing it this way avoids an allocation, as we already have the "struct
    -    strbuf" prepared for appending to "kept".
    +    But as we require OpenSSL for the "tunnel" mode we still need to keep
    +    the OpenSSL codepath around (ee [1] for an attempt to remove it). But
    +    we don't need to keep supporting "--no-curl" to bypass the curl
    +    codepath for the non-tunnel mode.
    +
    +    As almost all users of "git" use a version of it built with libcurl
    +    we're making what's already the preferred & default codepath
    +    mandatory.
    +
    +    The "imap.authMethod" documentation being changed here has always been
    +    incomplete. It only mentioned "--no-curl", but omitted mentioning that
    +    the same applied for "imap.tunnel". Let's fix it as we're amending it
    +    to be correct, now (as before) with "imap.tunnel" only
    +    "imap.authMethod=CRAM-MD5" is supported.
    +
    +    1. https://lore.kernel.org/git/ab866314-608b-eaca-b335-12cffe165526@morey-chaisemartin.com/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/worktree.c ##
    -@@ builtin/worktree.c: static void prune_worktrees(void)
    - {
    - 	struct strbuf reason = STRBUF_INIT;
    - 	struct strbuf main_path = STRBUF_INIT;
    --	struct string_list kept = STRING_LIST_INIT_NODUP;
    -+	struct string_list kept = STRING_LIST_INIT_DUP;
    - 	DIR *dir = opendir(git_path("worktrees"));
    - 	struct dirent *d;
    - 	if (!dir)
    -@@ builtin/worktree.c: static void prune_worktrees(void)
    - 		if (should_prune_worktree(d->d_name, &reason, &path, expire))
    - 			prune_worktree(d->d_name, reason.buf);
    - 		else if (path)
    --			string_list_append(&kept, path)->util = xstrdup(d->d_name);
    -+			string_list_append_nodup(&kept, path)->util = xstrdup(d->d_name);
    - 	}
    - 	closedir(dir);
    - 
    - 	strbuf_add_absolute_path(&main_path, get_git_common_dir());
    - 	/* massage main worktree absolute path to match 'gitdir' content */
    - 	strbuf_strip_suffix(&main_path, "/.");
    --	string_list_append(&kept, strbuf_detach(&main_path, NULL));
    -+	string_list_append_nodup(&kept, strbuf_detach(&main_path, NULL));
    - 	prune_dups(&kept);
    - 	string_list_clear(&kept, 1);
    + ## Documentation/config/imap.txt ##
    +@@ Documentation/config/imap.txt: imap.preformattedHTML::
      
    + imap.authMethod::
    + 	Specify authenticate method for authentication with IMAP server.
    +-	If you're running git-imap-send with the `--no-curl`
    +-	option, the only supported method is 'CRAM-MD5'. If this is not set
    ++	If you're using imap.tunnel, the only supported method is 'CRAM-MD5'.
    ++	If this is not set
    + 	then 'git imap-send' uses the basic IMAP plaintext LOGIN command.
     
    - ## t/t2401-worktree-prune.sh ##
    -@@ t/t2401-worktree-prune.sh: test_description='prune $GIT_DIR/worktrees'
    - GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    - export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
    + ## Documentation/git-imap-send.txt ##
    +@@ Documentation/git-imap-send.txt: OPTIONS
    + --quiet::
    + 	Be quiet.
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +---curl::
    +-	Use libcurl to communicate with the IMAP server, unless tunneling
    +-	into it.  Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND
    +-	option set.
    +-
    +---no-curl::
    +-	Talk to the IMAP server using git's own IMAP routines instead of
    +-	using libcurl.
    +-
    +-
    + CONFIGURATION
    + -------------
      
    - test_expect_success initialize '
     
    - ## t/t2406-worktree-repair.sh ##
    -@@
    + ## imap-send.c ##
    +@@ imap-send.c: static const char * const imap_send_usage[] = { "git imap-send [-v] [-q] [--[no-
    + 
    + static struct option imap_send_options[] = {
    + 	OPT__VERBOSITY(&verbosity),
    +-	OPT_BOOL(0, "curl", &use_curl, "use libcurl to communicate with the IMAP server"),
    ++	OPT_HIDDEN_BOOL(0, "curl", &use_curl, "use libcurl to communicate with the IMAP server"),
    + 	OPT_END()
    + };
    + 
    +@@ imap-send.c: int cmd_main(int argc, const char **argv)
    + 	if (argc)
    + 		usage_with_options(imap_send_usage, imap_send_options);
    + 
    +-#if defined(NO_OPENSSL)
    +-	if (!use_curl) {
    +-		warning("--no-curl not supported in this build");
    +-		use_curl = 1;
    +-	}
    +-#endif
    ++	if (!use_curl)
    ++		die(_("the --no-curl option to imap-send has been deprecated"));
    + 
    + 	if (!server.port)
    + 		server.port = server.use_ssl ? 993 : 143;
    +@@ imap-send.c: int cmd_main(int argc, const char **argv)
      
    - test_description='test git worktree repair'
    + 	/* write it to the imap server */
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +-	if (server.tunnel)
    +-		return append_msgs_to_imap(&server, &all_msgs, total);
    +-
    +-	if (use_curl)
    ++	if (!server.tunnel)
    + 		return curl_append_msgs_to_imap(&server, &all_msgs, total);
      
    - test_expect_success setup '
    + 	return append_msgs_to_imap(&server, &all_msgs, total);
 7:  1fac90c306a !  5:  17c75e6381a repack: fix leaks on error with "goto cleanup"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    repack: fix leaks on error with "goto cleanup"
    +    imap-send: remove old --no-curl codepath
     
    -    Change cmd_repack() to "goto cleanup" rather than "return ret" on
    -    error, when we returned we'd potentially skip cleaning up the
    -    string_lists and other data we'd allocated in this function.
    +    In the preceding the "--curl" codepath was made mandatory, so now we
    +    won't use the OpenSSL implementation codepaths in imap-send.c except
    +    for "imap.tunnel".
    +
    +    So let's follow-up and delete the code on that path which was specific
    +    to the "imap.host" mode.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/repack.c ##
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 
    - 	ret = start_command(&cmd);
    - 	if (ret)
    --		return ret;
    -+		goto cleanup;
    + ## imap-send.c ##
    +@@ imap-send.c: static void socket_perror(const char *func, struct imap_socket *sock, int ret)
    + 	}
    + }
      
    - 	if (geometry) {
    - 		FILE *in = xfdopen(cmd.in, "w");
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 	fclose(out);
    - 	ret = finish_command(&cmd);
    - 	if (ret)
    --		return ret;
    -+		goto cleanup;
    +-#ifdef NO_OPENSSL
    +-static int ssl_socket_connect(struct imap_socket *sock, int use_tls_only, int verify)
    +-{
    +-	fprintf(stderr, "SSL requested but SSL support not compiled in\n");
    +-	return -1;
    +-}
    +-
    +-#else
    ++#ifndef NO_OPENSSL
      
    - 	if (!names.nr && !po_args.quiet)
    - 		printf_ln(_("Nothing new to pack."));
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 				       &existing_nonkept_packs,
    - 				       &existing_kept_packs);
    - 		if (ret)
    --			return ret;
    -+			goto cleanup;
    + static int host_matches(const char *host, const char *pattern)
    + {
    +@@ imap-send.c: static int verify_hostname(X509 *cert, const char *hostname)
    + 		     cname, hostname);
    + }
      
    - 		if (delete_redundant && expire_to) {
    - 			/*
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 					       &existing_nonkept_packs,
    - 					       &existing_kept_packs);
    - 			if (ret)
    --				return ret;
    -+				goto cleanup;
    - 		}
    +-static int ssl_socket_connect(struct imap_socket *sock, int use_tls_only, int verify)
    ++static int ssl_socket_connect(struct imap_socket *sock, int verify)
    + {
    + #if (OPENSSL_VERSION_NUMBER >= 0x10000000L)
    + 	const SSL_METHOD *meth;
    +@@ imap-send.c: static int ssl_socket_connect(struct imap_socket *sock, int use_tls_only, int ve
    + 		return -1;
      	}
      
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 		string_list_clear(&include, 0);
    +-	if (use_tls_only)
    +-		SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);
    ++	SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);
      
    - 		if (ret)
    --			return ret;
    -+			goto cleanup;
    - 	}
    + 	if (verify)
    + 		SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, NULL);
    +@@ imap-send.c: static struct imap_store *imap_open_store(struct imap_server_conf *srvc, const c
    + 	struct imap_store *ctx;
    + 	struct imap *imap;
    + 	char *arg, *rsp;
    +-	int s = -1, preauth;
    ++	int preauth;
    ++	struct child_process tunnel = CHILD_PROCESS_INIT;
      
    - 	reprepare_packed_git(the_repository);
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 		write_midx_file(get_object_directory(), NULL, NULL, flags);
    - 	}
    + 	CALLOC_ARRAY(ctx, 1);
      
    -+cleanup:
    - 	string_list_clear(&names, 1);
    - 	string_list_clear(&existing_nonkept_packs, 0);
    - 	string_list_clear(&existing_kept_packs, 0);
    - 	clear_pack_geometry(geometry);
    +@@ imap-send.c: static struct imap_store *imap_open_store(struct imap_server_conf *srvc, const c
    + 	imap->in_progress_append = &imap->in_progress;
      
    --	return 0;
    -+	return ret;
    - }
    -
    - ## t/t6011-rev-list-with-bad-commit.sh ##
    -@@
    + 	/* open connection to IMAP server */
    ++	imap_info("Starting tunnel '%s'... ", srvc->tunnel);
    + 
    +-	if (srvc->tunnel) {
    +-		struct child_process tunnel = CHILD_PROCESS_INIT;
    +-
    +-		imap_info("Starting tunnel '%s'... ", srvc->tunnel);
    +-
    +-		strvec_push(&tunnel.args, srvc->tunnel);
    +-		tunnel.use_shell = 1;
    +-		tunnel.in = -1;
    +-		tunnel.out = -1;
    +-		if (start_command(&tunnel))
    +-			die("cannot start proxy %s", srvc->tunnel);
    +-
    +-		imap->buf.sock.fd[0] = tunnel.out;
    +-		imap->buf.sock.fd[1] = tunnel.in;
    +-
    +-		imap_info("ok\n");
    +-	} else {
    +-#ifndef NO_IPV6
    +-		struct addrinfo hints, *ai0, *ai;
    +-		int gai;
    +-		char portstr[6];
    +-
    +-		xsnprintf(portstr, sizeof(portstr), "%d", srvc->port);
    +-
    +-		memset(&hints, 0, sizeof(hints));
    +-		hints.ai_socktype = SOCK_STREAM;
    +-		hints.ai_protocol = IPPROTO_TCP;
    +-
    +-		imap_info("Resolving %s... ", srvc->host);
    +-		gai = getaddrinfo(srvc->host, portstr, &hints, &ai);
    +-		if (gai) {
    +-			fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(gai));
    +-			goto bail;
    +-		}
    +-		imap_info("ok\n");
    +-
    +-		for (ai0 = ai; ai; ai = ai->ai_next) {
    +-			char addr[NI_MAXHOST];
    +-
    +-			s = socket(ai->ai_family, ai->ai_socktype,
    +-				   ai->ai_protocol);
    +-			if (s < 0)
    +-				continue;
    ++	strvec_push(&tunnel.args, srvc->tunnel);
    ++	tunnel.use_shell = 1;
    ++	tunnel.in = -1;
    ++	tunnel.out = -1;
    ++	if (start_command(&tunnel))
    ++		die("cannot start proxy %s", srvc->tunnel);
      
    - test_description='git rev-list should notice bad commits'
    +-			getnameinfo(ai->ai_addr, ai->ai_addrlen, addr,
    +-				    sizeof(addr), NULL, 0, NI_NUMERICHOST);
    +-			imap_info("Connecting to [%s]:%s... ", addr, portstr);
    ++	imap->buf.sock.fd[0] = tunnel.out;
    ++	imap->buf.sock.fd[1] = tunnel.in;
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +-			if (connect(s, ai->ai_addr, ai->ai_addrlen) < 0) {
    +-				close(s);
    +-				s = -1;
    +-				perror("connect");
    +-				continue;
    +-			}
    +-
    +-			break;
    +-		}
    +-		freeaddrinfo(ai0);
    +-#else /* NO_IPV6 */
    +-		struct hostent *he;
    +-		struct sockaddr_in addr;
    +-
    +-		memset(&addr, 0, sizeof(addr));
    +-		addr.sin_port = htons(srvc->port);
    +-		addr.sin_family = AF_INET;
    +-
    +-		imap_info("Resolving %s... ", srvc->host);
    +-		he = gethostbyname(srvc->host);
    +-		if (!he) {
    +-			perror("gethostbyname");
    +-			goto bail;
    +-		}
    +-		imap_info("ok\n");
    +-
    +-		addr.sin_addr.s_addr = *((int *) he->h_addr_list[0]);
    +-
    +-		s = socket(PF_INET, SOCK_STREAM, 0);
    +-
    +-		imap_info("Connecting to %s:%hu... ", inet_ntoa(addr.sin_addr), ntohs(addr.sin_port));
    +-		if (connect(s, (struct sockaddr *)&addr, sizeof(addr))) {
    +-			close(s);
    +-			s = -1;
    +-			perror("connect");
    +-		}
    +-#endif
    +-		if (s < 0) {
    +-			fputs("Error: unable to connect to server.\n", stderr);
    +-			goto bail;
    +-		}
    +-
    +-		imap->buf.sock.fd[0] = s;
    +-		imap->buf.sock.fd[1] = dup(s);
    +-
    +-		if (srvc->use_ssl &&
    +-		    ssl_socket_connect(&imap->buf.sock, 0, srvc->ssl_verify)) {
    +-			close(s);
    +-			goto bail;
    +-		}
    +-		imap_info("ok\n");
    +-	}
    ++	imap_info("ok\n");
      
    - # Note:
    + 	/* read the greeting string */
    + 	if (buffer_gets(&imap->buf, &rsp)) {
    +@@ imap-send.c: static struct imap_store *imap_open_store(struct imap_server_conf *srvc, const c
    + 		if (!srvc->use_ssl && CAP(STARTTLS)) {
    + 			if (imap_exec(ctx, NULL, "STARTTLS") != RESP_OK)
    + 				goto bail;
    +-			if (ssl_socket_connect(&imap->buf.sock, 1,
    ++			if (ssl_socket_connect(&imap->buf.sock,
    + 					       srvc->ssl_verify))
    + 				goto bail;
    + 			/* capabilities may have changed, so get the new capabilities */
 9:  b39d6d29dd5 <  -:  ----------- http-backend.c: fix "dir" and "cmd_arg" leaks in cmd_main()
10:  928dea2d4ee <  -:  ----------- http-backend.c: fix cmd_main() memory leak, refactor reg{exec,free}()
11:  5770b9eb764 !  6:  686febb8cdc commit-graph: fix a parse_options_concat() leak
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    commit-graph: fix a parse_options_concat() leak
    +    imap-send: correctly report "host" when using "tunnel"
     
    -    When the parse_options_concat() was added to this file in
    -    84e4484f128 (commit-graph: use parse_options_concat(), 2021-08-23) we
    -    wouldn't free() it if we returned early in these cases.
    +    Before [1] we'd force the "imap.host" to be set, even if the
    +    "imap.tunnel" was set, and then proceed to not use the "host" for
    +    establishing a connection, as we'd use the tunneling command.
     
    -    Since "result" is 0 by default we can "goto cleanup" in both cases,
    -    and only need to set "result" if write_commit_graph_reachable() fails.
    +    However, we'd still use the "imap.host" if it was set as the "host"
    +    field given to the credential helper, and in messages that were shared
    +    with the non-tunnel mode, until a preceding commit made these OpenSSL
    +    codepaths tunnel-only.
    +
    +    Let's always give "host=tunnel" to the credential helper when in the
    +    "imap.tunnel" mode, and rephrase the relevant messages to indicate
    +    that we're tunneling. This changes the existing behavior, but that
    +    behavior was emergent and didn't make much sense. If we were using
    +    "imap.tunnel" the value in "imap.host" might be entirely unrelated to
    +    the host we're tunneling to. Let's not pretend to know more than we do
    +    in that case.
    +
    +    1. 34b5cd1fe9f (Don't force imap.host to be set when imap.tunnel is
    +       set, 2008-04-22)
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/commit-graph.c ##
    -@@ builtin/commit-graph.c: static int graph_write(int argc, const char **argv, const char *prefix)
    + ## imap-send.c ##
    +@@ imap-send.c: static void server_fill_credential(struct imap_server_conf *srvc, struct credent
    + 		return;
      
    - 	if (opts.reachable) {
    - 		if (write_commit_graph_reachable(odb, flags, &write_opts))
    + 	cred->protocol = xstrdup(srvc->use_ssl ? "imaps" : "imap");
    +-	cred->host = xstrdup(srvc->host);
    ++	cred->host = xstrdup(srvc->tunnel ? "tunnel" : srvc->host);
    + 
    + 	cred->username = xstrdup_or_null(srvc->user);
    + 	cred->password = xstrdup_or_null(srvc->pass);
    +@@ imap-send.c: static struct imap_store *imap_open_store(struct imap_server_conf *srvc, const c
    + 				if (!CAP(AUTH_CRAM_MD5)) {
    + 					fprintf(stderr, "You specified "
    + 						"CRAM-MD5 as authentication method, "
    +-						"but %s doesn't support it.\n", srvc->host);
    ++						"but tunnel doesn't support it.\n");
    + 					goto bail;
    + 				}
    + 				/* CRAM-MD5 */
    +@@ imap-send.c: static struct imap_store *imap_open_store(struct imap_server_conf *srvc, const c
    + 			}
    + 		} else {
    + 			if (CAP(NOLOGIN)) {
    +-				fprintf(stderr, "Skipping account %s@%s, server forbids LOGIN\n",
    +-					srvc->user, srvc->host);
    ++				fprintf(stderr, "Skipping account %s, server forbids LOGIN\n",
    ++					srvc->user);
    + 				goto bail;
    + 			}
    + 			if (!imap->buf.sock.ssl)
    +@@ imap-send.c: int cmd_main(int argc, const char **argv)
    + 		fprintf(stderr, "no imap store specified\n");
    + 		return 1;
    + 	}
    +-	if (!server.host) {
    +-		if (!server.tunnel) {
    +-			fprintf(stderr, "no imap host specified\n");
     -			return 1;
    --		return 0;
    -+			result = 1;
    -+		goto cleanup;
    +-		}
    +-		server.host = "tunnel";
    ++	if (!server.host && !server.tunnel) {
    ++		fprintf(stderr, "no imap host specified\n");
    ++		return 1;
      	}
      
    - 	if (opts.stdin_packs) {
    + 	/* read the messages */
12:  3ff86cb808c <  -:  ----------- show-branch: free() allocated "head" before return
13:  1f3e3524580 <  -:  ----------- builtin/merge.c: use fixed strings, not "strbuf", fix leak
14:  15e4b8db805 <  -:  ----------- builtin/merge.c: free "&buf" on "Your local changes..." error
16:  10959760dfc <  -:  ----------- grep.c: refactor free_grep_patterns()
17:  6a8f4a567aa <  -:  ----------- grep API: plug memory leaks by freeing "header_list"
18:  3c3d48df04b <  -:  ----------- receive-pack: free() the "ref_name" in "struct command"
19:  f29500a4abc <  -:  ----------- push: free_refs() the "local_refs" in set_refspecs()
-- 
2.39.1.1392.g63e6d408230

