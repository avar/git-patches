From dd0af5bd6ce6b769cdfa577d2f6496a957326e3f Mon Sep 17 00:00:00 2001
Message-Id: <cover-v3-0.9-0000000000-20210805T103237Z-avarab@gmail.com>
In-Reply-To: <cover-0.8-00000000000-20210721T225504Z-avarab@gmail.com>
References: <cover-0.8-00000000000-20210721T225504Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 5 Aug 2021 12:32:37 +0200
Subject: [PATCH v3 0/9] test-lib tests: split off subtest code in t0000 into lib-subtest.sh
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This series has been looking for reviewer attention for a while. It
splits up the testing of test-lib.sh itself from t0000-basic.sh into a
lib-subtest.sh library, a subsequent series of mine makes use of that
library.

The diffstat is nicely negative since a lot of the test code is
something we could delete as redundant, the tests are also made
stricter as a result (e.g. now checking 1 exit code, not any
non-zero).

For v2, see:
https://lore.kernel.org/git/cover-0.8-00000000000-20210721T225504Z-avarab@gmail.com/

The ony tricky part of this series is the "clever" way of (ab)using
the object store and tags to detect copy/pasted tests. For this v3
I've split that up into its own commit, see [56]/9 for the removal of
the copy/pasting and the assertion, respectively.

This series also depended on ps/t0000-output-directory-fix and
jk/t0000-subtests-fix, since both made it mo "master" it's been
rebased on "master". The range-diff that's not the split-up around
[56]/9 is due to that rebasing.

Ævar Arnfjörð Bjarmason (9):
  test-lib tests: move "run_sub_test" to a new lib-subtest.sh
  test-lib tests: split up "write and run" into two functions
  test-lib tests: stop using a subshell in write_sub_test_lib_test()
  test-lib tests: don't provide a description for the sub-tests
  test-lib tests: get rid of copy/pasted mock test code
  test-lib tests: assert no copy/pasted mock test code
  test-lib tests: avoid subshell for "test_cmp" for readability
  test-lib tests: refactor common part of check_sub_test_lib_test*()
  test-lib tests: assert 1 exit code, not non-zero

 t/lib-subtest.sh | 127 ++++++++++++++
 t/t0000-basic.sh | 448 +++++++++++++----------------------------------
 2 files changed, 245 insertions(+), 330 deletions(-)
 create mode 100644 t/lib-subtest.sh

Range-diff against v2:
 1:  7a06ea3a7b =  1:  3f34420a3e test-lib tests: move "run_sub_test" to a new lib-subtest.sh
 2:  28117b84ab !  2:  c9c16016da test-lib tests: split up "write and run" into two functions
    @@ t/lib-subtest.sh: _run_sub_test_lib_test_common () {
      run_sub_test_lib_test () {
      	_run_sub_test_lib_test_common '' "$@"
      }
    -@@ t/lib-subtest.sh: check_sub_test_lib_test_err () {
    - 		test_cmp expect.err err
    - 	)
    - }
    -+
     
      ## t/t0000-basic.sh ##
     @@ t/t0000-basic.sh: test_expect_success 'success is reported like this' '
 3:  7d5ed335a3 =  3:  76f57eadcd test-lib tests: stop using a subshell in write_sub_test_lib_test()
 4:  2a0dd64da9 =  4:  cde015c7dd test-lib tests: don't provide a description for the sub-tests
 5:  f60190dec6 !  5:  7d1e6b9a3e test-lib tests: get rid of copy/pasted mock test code
    @@ Commit message
         run_sub_test_lib_test*() functions let's fix those tests in
         t0000-basic.sh that were verbosely copy/pasting earlier tests.
     
    -    I'm (ab)using writing a tag object under a ref-name that's
    -    content-addressable from the content of the test script. If we can
    -    update-ref that it's unique, if not we've got a duplicate. The tag
    -    object stores the name of the earlier test for reporting the error.
    +    In a subsequent commit we'll add an assertion to check whether we
    +    caught all of the copy/pasting.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/lib-subtest.sh ##
    -@@
    -+_assert_unique_sub_test () {
    -+	name=$1 &&
    -+
    -+	# Alert about the copy/paste programming
    -+	hash=$(git hash-object -w "$name") &&
    -+	cat >tag.sig <<-EOF &&
    -+	object $hash
    -+	type blob
    -+	tag $hash
    -+	tagger . <> 0 +0000
    -+
    -+	duplicate script detected!
    -+
    -+	This test script was already written as:
    -+
    -+	$name
    -+
    -+	You can just re-use its test code with your own
    -+	run_sub_test_lib_test*()
    -+	EOF
    -+
    -+	tag=$(git mktag <tag.sig) &&
    -+	if ! git update-ref refs/tags/blob-$hash $tag $(test_oid zero) 2>/dev/null
    -+	then
    -+		msg=$(git for-each-ref refs/tags/blob-$hash \
    -+			--format='%(contents)' refs/tags/blob-$hash)
    -+		error "on write of $name: $msg"
    -+		return 1
    -+	fi
    -+}
    -+
    - write_sub_test_lib_test () {
    - 	name="$1" # stdin is the body of the test code
    - 	mkdir "$name" &&
    -@@ t/lib-subtest.sh: write_sub_test_lib_test () {
    - 	# Point to the t/test-lib.sh, which isn't in ../ as usual
    - 	. "\$TEST_DIRECTORY"/test-lib.sh
    - 	EOF
    --	cat >>"$name/$name.sh"
    -+	cat >>"$name/$name.sh" &&
    -+	_assert_unique_sub_test "$name/$name.sh"
    - }
    - 
    - _run_sub_test_lib_test_common () {
    -
      ## t/t0000-basic.sh ##
     @@ t/t0000-basic.sh: test_expect_success 'subtest: --verbose option' '
      '
 -:  ---------- >  6:  bc79b29f3c test-lib tests: assert no copy/pasted mock test code
 6:  022ddbabf6 !  7:  48176f3e60 test-lib tests: avoid subshell for "test_cmp" for readability
    @@ t/lib-subtest.sh: run_sub_test_lib_test_err () {
     +	sed -e 's/^> //' -e 's/Z$//' <&3 >"$name"/expect.err &&
     +	test_cmp "$name"/expect.err "$name"/err
      }
    - 
 7:  ae0226e164 =  8:  fda7c4fbe3 test-lib tests: refactor common part of check_sub_test_lib_test*()
 8:  676547e001 =  9:  dd0af5bd6c test-lib tests: assert 1 exit code, not non-zero
-- 
2.33.0.rc0.635.g0ab9d6d3b5a

