From f32f10451913945a79a083e2ba4cd03a274fa60c Mon Sep 17 00:00:00 2001
Message-Id: <patch-v3-1.1-f32f1045191-20211008T134138Z-avarab@gmail.com>
In-Reply-To: <cover-v2-0.2-00000000000-20211004T142523Z-avarab@gmail.com>
References: <cover-v2-0.2-00000000000-20211004T142523Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Fri, 6 Aug 2021 18:06:21 +0200
Subject: [PATCH v3] object-name: make ambiguous object output translatable
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change the output of show_ambiguous_object() added in [1] and last
tweaked in [2] to be more friendly to translators. By being able to
customize the sprintf formats we're even ready for RTL languages.

The "unknown type" message here is unreachable, and has been since
[1], i.e. that code has never worked. If we craft an object of a bogus
type with a conflicting prefix we'll just die:

    $ git rev-parse 8315
    error: short object ID 8315 is ambiguous
    hint: The candidates are:
    fatal: invalid object type

But let's continue to pretend that this works, we can eventually use
the API improvements in my ab/fsck-unexpected-type (once it lands) to
inspect these objects and emit the actual type here, or at least not
die as we emit "unknown type".

1. 1ffa26c461 (get_short_sha1: list ambiguous objects on error,
   2016-09-26)
2. 5cc044e0257 (get_short_oid: sort ambiguous objects by type,
   then SHA-1, 2018-05-10)

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
Range-diff against v2:
1:  55bde16aa23 < -:  ----------- object.[ch]: mark object type names for translation
2:  c0e873543f5 ! 1:  f32f1045191 object-name: make ambiguous object output translatable
    @@ Commit message
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## object-name.c ##
    -@@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, void *data)
    +@@ object-name.c: static int init_object_disambiguation(struct repository *r,
    + static int show_ambiguous_object(const struct object_id *oid, void *data)
      {
      	const struct disambiguate_state *ds = data;
    - 	struct strbuf desc = STRBUF_INIT;
    +-	struct strbuf desc = STRBUF_INIT;
    ++	struct strbuf sb = STRBUF_INIT;
     +	struct strbuf ci_ad = STRBUF_INIT;
     +	struct strbuf ci_s = STRBUF_INIT;
      	int type;
    @@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, voi
     -	       type_name(type) ? type_name(type) : "unknown type",
     -	       desc.buf);
     +	abbrev = repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV);
    -+	if (type == OBJ_COMMIT) {
    ++	if (type == OBJ_COMMIT)
     +		/*
     +		 * TRANSLATORS: This is a line of ambiguous commit
     +		 * object output. E.g.:
     +		 *
     +		 *    "deadbeef commit 2021-01-01 - Some Commit Message"
    -+		 *
    -+		 * The second argument is the "commit" string from
    -+		 * object.c, it should (hopefully) already be
    -+		 * translated.
     +		 */
    -+		strbuf_addf(&desc, _("%s %s %s - %s"), abbrev, ci_ad.buf,
    -+			    _(type_name(type)), ci_s.buf);
    -+	} else if (tag_desc) {
    ++		strbuf_addf(&sb, _("%s commit %s - %s"), abbrev, ci_ad.buf,
    ++			    ci_s.buf);
    ++	else if (tag_desc)
     +		/*
     +		 * TRANSLATORS: This is a line of
     +		 * ambiguous tag object output. E.g.:
    @@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, voi
     +		 * object.c, it should (hopefully) already be
     +		 * translated.
     +		 */
    -+		strbuf_addf(&desc, _("%s %s %s"), abbrev, _(type_name(type)),
    -+			    tag_desc);
    -+	} else {
    -+		const char *tname = type_name(type) ? _(type_name(type)) :
    -+			_(unknown_type);
    ++		strbuf_addf(&sb, _("%s tag - %s"), abbrev, tag_desc);
    ++	else if (type == OBJ_TREE)
     +		/*
     +		 * TRANSLATORS: This is a line of ambiguous <type>
    -+		 * object output. Where <type> is one of the object
    -+		 * types of "tree", "blob", "tag" ("commit" is handled
    -+		 * above).
    -+		 *
    -+		 *    "deadbeef tree"
    -+		 *    "deadbeef blob"
    -+		 *    "deadbeef tag"
    -+		 *    "deadbeef unknown type"
    -+		 *
    -+		 * Note that annotated tags use a separate format
    -+		 * outlined above.
    -+		 *
    -+		 * The second argument is the "tree", "blob" or "tag"
    -+		 * string from object.c, or the "unknown type" string
    -+		 * in the case of an unknown type. All of them should
    -+		 * (hopefully) already be translated.
    ++		 * object output. E.g. "deadbeef tree".
     +		 */
    -+		strbuf_addf(&desc, _("%s %s"), abbrev, tname);
    -+	}
    -+
    ++		strbuf_addf(&sb, _("%s tree"), abbrev);
    ++	else if (type == OBJ_BLOB)
    ++		/*
    ++		 * TRANSLATORS: This is a line of ambiguous <type>
    ++		 * object output. E.g. "deadbeef blob".
    ++		 */
    ++		strbuf_addf(&sb, _("%s blob"), abbrev);
    ++	else
    ++		/*
    ++		 * TRANSLATORS: This is a line of ambiguous <type>
    ++		 * object output referring to a broken object. This
    ++		 * should not happen!
    ++		 */
    ++		strbuf_addf(&sb, _("%s <bad object type>"), abbrev);
    + 
    +-	strbuf_release(&desc);
     +	/*
     +	 * TRANSLATORS: This is line item of ambiguous object output,
     +	 * translated above.
     +	 */
    -+	advise(_("  %s\n"), desc.buf);
    - 
    - 	strbuf_release(&desc);
    ++	advise(_("  %s\n"), sb.buf);
    ++
    ++	strbuf_release(&sb);
     +	strbuf_release(&ci_ad);
     +	strbuf_release(&ci_s);
      	return 0;

 object-name.c | 66 ++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 58 insertions(+), 8 deletions(-)

diff --git a/object-name.c b/object-name.c
index fdff4601b2c..8a0627ad2b4 100644
--- a/object-name.c
+++ b/object-name.c
@@ -354,8 +354,12 @@ static int init_object_disambiguation(struct repository *r,
 static int show_ambiguous_object(const struct object_id *oid, void *data)
 {
 	const struct disambiguate_state *ds = data;
-	struct strbuf desc = STRBUF_INIT;
+	struct strbuf sb = STRBUF_INIT;
+	struct strbuf ci_ad = STRBUF_INIT;
+	struct strbuf ci_s = STRBUF_INIT;
 	int type;
+	const char *tag_desc = NULL;
+	const char *abbrev;
 
 	if (ds->fn && !ds->fn(ds->repo, oid, ds->cb_data))
 		return 0;
@@ -366,20 +370,66 @@ static int show_ambiguous_object(const struct object_id *oid, void *data)
 		if (commit) {
 			struct pretty_print_context pp = {0};
 			pp.date_mode.type = DATE_SHORT;
-			format_commit_message(commit, " %ad - %s", &desc, &pp);
+			format_commit_message(commit, "%ad", &ci_ad, &pp);
+			format_commit_message(commit, "%s", &ci_s, &pp);
 		}
 	} else if (type == OBJ_TAG) {
 		struct tag *tag = lookup_tag(ds->repo, oid);
 		if (!parse_tag(tag) && tag->tag)
-			strbuf_addf(&desc, " %s", tag->tag);
+			tag_desc = tag->tag;
 	}
 
-	advise("  %s %s%s",
-	       repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV),
-	       type_name(type) ? type_name(type) : "unknown type",
-	       desc.buf);
+	abbrev = repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV);
+	if (type == OBJ_COMMIT)
+		/*
+		 * TRANSLATORS: This is a line of ambiguous commit
+		 * object output. E.g.:
+		 *
+		 *    "deadbeef commit 2021-01-01 - Some Commit Message"
+		 */
+		strbuf_addf(&sb, _("%s commit %s - %s"), abbrev, ci_ad.buf,
+			    ci_s.buf);
+	else if (tag_desc)
+		/*
+		 * TRANSLATORS: This is a line of
+		 * ambiguous tag object output. E.g.:
+		 *
+		 *    "deadbeef tag Some Tag Message"
+		 *
+		 * The second argument is the "tag" string from
+		 * object.c, it should (hopefully) already be
+		 * translated.
+		 */
+		strbuf_addf(&sb, _("%s tag - %s"), abbrev, tag_desc);
+	else if (type == OBJ_TREE)
+		/*
+		 * TRANSLATORS: This is a line of ambiguous <type>
+		 * object output. E.g. "deadbeef tree".
+		 */
+		strbuf_addf(&sb, _("%s tree"), abbrev);
+	else if (type == OBJ_BLOB)
+		/*
+		 * TRANSLATORS: This is a line of ambiguous <type>
+		 * object output. E.g. "deadbeef blob".
+		 */
+		strbuf_addf(&sb, _("%s blob"), abbrev);
+	else
+		/*
+		 * TRANSLATORS: This is a line of ambiguous <type>
+		 * object output referring to a broken object. This
+		 * should not happen!
+		 */
+		strbuf_addf(&sb, _("%s <bad object type>"), abbrev);
 
-	strbuf_release(&desc);
+	/*
+	 * TRANSLATORS: This is line item of ambiguous object output,
+	 * translated above.
+	 */
+	advise(_("  %s\n"), sb.buf);
+
+	strbuf_release(&sb);
+	strbuf_release(&ci_ad);
+	strbuf_release(&ci_s);
 	return 0;
 }
 
-- 
2.33.0.1446.g6af949f83bd

