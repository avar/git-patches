From c03a03297897b6108e8f142046b79628709baef9 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v3-0.3-00000000000-20211008T190927Z-avarab@gmail.com>
In-Reply-To: <cover-v2-0.2-00000000000-20211004T142523Z-avarab@gmail.com>
References: <cover-v2-0.2-00000000000-20211004T142523Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Fri, 8 Oct 2021 21:09:27 +0200
Subject: [PATCH v3 0/3] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (3):
  object-name: remove unreachable "unknown type" handling
  object-name: make ambiguous object output translatable
  object-name: show date for ambiguous tag objects

 object-name.c | 87 ++++++++++++++++++++++++++++++++++++++++++++-------
 1 file changed, 75 insertions(+), 12 deletions(-)

Range-diff against v2:
1:  55bde16aa23 ! 1:  fb29e10ee35 object.[ch]: mark object type names for translation
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    object.[ch]: mark object type names for translation
    +    object-name: remove unreachable "unknown type" handling
     
    -    Mark the "commit", "tree", "blob" and "tag" types for translation, and
    -    add an extern "unknown type" string for the OBJ_NONE case.
    +    Remove the "unknown type" handling when displaying the ambiguous
    +    object list. See [1] for the current output, and [1] for the commit
    +    that added the "unknown type" handling.
     
    -    It is usually bad practice to translate individual words like this,
    -    but for e.g. the list list output emitted by the "short object ID dead
    -    is ambiguous" advice it makes sense.
    +    The reason this code wasn't reachable is because we're not passing in
    +    OBJECT_INFO_ALLOW_UNKNOWN_TYPE, so we'll just die in sort_ambiguous()
    +    before we get to show_ambiguous_object():
     
    -    A subsequent commit will make that output translatable, and use these
    -    translation markings to do so. Well, we won't use "commit", but let's
    -    mark it up anyway for consistency. It'll probably come in handy sooner
    -    than later to have it already be translated, and it's to much of a
    -    burden to place on translators if they're translating the other three
    -    object types anyway.
    +        $ git rev-parse 8315
    +        error: short object ID 8315 is ambiguous
    +        hint: The candidates are:
    +        fatal: invalid object type
     
    -    Aside: I think it would probably make sense to change the "NULL" entry
    -    for type_name() to be the "unknown type". I've ran into cases where
    -    type_name() was unconditionally interpolated in e.g. an sprintf()
    -    format, but let's leave that for #leftoverbits as that would be
    -    changing the behavior of the type_name() function.
    +    We should do better here, but let's leave that for some future
    +    improvement. In a subsequent commit I'll improve the output we do
    +    show, and not having to handle the "unknown type" case simplifies that
    +    change.
     
    -    All of these will be new in the git.pot file, except "blob" which will
    -    be shared with a "cat-file" command-line option, see
    -    7bcf3414535 (cat-file --textconv/--filters: allow specifying the path
    -    separately, 2016-09-09) for its introduction.
    +    Even though we know that this isn't reachable let's back that up with
    +    an assert() both for self-documentation and sanity checking.
    +
    +    1. 5cc044e0257 (get_short_oid: sort ambiguous objects by type,
    +       then SHA-1, 2018-05-10)
    +    2. 1ffa26c461 (get_short_sha1: list ambiguous objects on error,
    +       2016-09-26)
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## object.c ##
    -@@ object.c: struct object *get_indexed_object(unsigned int idx)
    + ## object-name.c ##
    +@@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, void *data)
    + 		return 0;
      
    - static const char *object_type_strings[] = {
    - 	NULL,		/* OBJ_NONE = 0 */
    --	"commit",	/* OBJ_COMMIT = 1 */
    --	"tree",		/* OBJ_TREE = 2 */
    --	"blob",		/* OBJ_BLOB = 3 */
    --	"tag",		/* OBJ_TAG = 4 */
    -+	/*
    -+	 * TRANSLATORS: "commit", "tree", "blob" and "tag" are the
    -+	 * name of Git's object types. These names are interpolated
    -+	 * stand-alone when doing so is unambiguous for translation
    -+	 * and doesn't require extra context. E.g. as part of an
    -+	 * already-translated string that needs to have a type name
    -+	 * quoted verbatim, or the short description of a command-line
    -+	 * option expecting a given type.
    -+	 */
    -+	N_("commit"),	/* OBJ_COMMIT = 1 */
    -+	N_("tree"),	/* OBJ_TREE = 2 */
    -+	N_("blob"),	/* OBJ_BLOB = 3 */
    -+	N_("tag"),	/* OBJ_TAG = 4 */
    - };
    + 	type = oid_object_info(ds->repo, oid, NULL);
    ++	assert(type == OBJ_TREE || type == OBJ_COMMIT ||
    ++	       type == OBJ_BLOB || type == OBJ_TAG);
    + 	if (type == OBJ_COMMIT) {
    + 		struct commit *commit = lookup_commit(ds->repo, oid);
    + 		if (commit) {
    +@@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, void *data)
      
    -+/*
    -+ * TRANSLATORS: This is the short type name of an object that's not
    -+ * one of Git's known object types, as opposed to "commit", "tree",
    -+ * "blob" and "tag" above.
    -+ *
    -+ * A user is unlikely to ever encounter these, but they can be
    -+ * manually created with "git hash-object --literally".
    -+ */
    -+const char *unknown_type = N_("unknown type");
    -+
    - const char *type_name(unsigned int type)
    - {
    - 	if (type >= ARRAY_SIZE(object_type_strings))
    -
    - ## object.h ##
    -@@ object.h: struct object {
    - 	struct object_id oid;
    - };
    + 	advise("  %s %s%s",
    + 	       repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV),
    +-	       type_name(type) ? type_name(type) : "unknown type",
    +-	       desc.buf);
    ++	       type_name(type), desc.buf);
      
    -+extern const char *unknown_type;
    - const char *type_name(unsigned int type);
    - int type_from_string_gently(const char *str, ssize_t, int gentle);
    - #define type_from_string(str) type_from_string_gently(str, -1, 0)
    + 	strbuf_release(&desc);
    + 	return 0;
2:  c0e873543f5 ! 2:  904d9f7153c object-name: make ambiguous object output translatable
    @@ Commit message
         object-name: make ambiguous object output translatable
     
         Change the output of show_ambiguous_object() added in [1] and last
    -    tweaked in [2] to be more friendly to translators. By being able to
    -    customize the sprintf formats we're even ready for RTL languages.
    -
    -    The "unknown type" message here is unreachable, and has been since
    -    [1], i.e. that code has never worked. If we craft an object of a bogus
    -    type with a conflicting prefix we'll just die:
    -
    -        $ git rev-parse 8315
    -        error: short object ID 8315 is ambiguous
    -        hint: The candidates are:
    -        fatal: invalid object type
    -
    -    But let's continue to pretend that this works, we can eventually use
    -    the API improvements in my ab/fsck-unexpected-type (once it lands) to
    -    inspect these objects and emit the actual type here, or at least not
    -    die as we emit "unknown type".
    +    tweaked in [2] and the preceding commit to be more friendly to
    +    translators. By being able to customize the "<SP><SP>%s\n" format
    +    we're even ready for RTL languages, who'd presumably like to change
    +    that to "%s<SP><SP>\n".
     
         1. 1ffa26c461 (get_short_sha1: list ambiguous objects on error,
            2016-09-26)
    @@ Commit message
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## object-name.c ##
    -@@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, void *data)
    +@@ object-name.c: static int init_object_disambiguation(struct repository *r,
    + static int show_ambiguous_object(const struct object_id *oid, void *data)
      {
      	const struct disambiguate_state *ds = data;
    - 	struct strbuf desc = STRBUF_INIT;
    -+	struct strbuf ci_ad = STRBUF_INIT;
    -+	struct strbuf ci_s = STRBUF_INIT;
    - 	int type;
    -+	const char *tag_desc = NULL;
    -+	const char *abbrev;
    +-	struct strbuf desc = STRBUF_INIT;
    +-	int type;
    ++	struct strbuf sb = STRBUF_INIT;
    ++	enum object_type type;
    ++	const char *hash;
      
      	if (ds->fn && !ds->fn(ds->repo, oid, ds->cb_data))
      		return 0;
     @@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, void *data)
    + 	type = oid_object_info(ds->repo, oid, NULL);
    + 	assert(type == OBJ_TREE || type == OBJ_COMMIT ||
    + 	       type == OBJ_BLOB || type == OBJ_TAG);
    +-	if (type == OBJ_COMMIT) {
    ++
    ++	hash = repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV);
    ++
    ++	switch (type) {
    ++	case OBJ_COMMIT:
    ++	{
    ++		struct strbuf ad = STRBUF_INIT;
    ++		struct strbuf s = STRBUF_INIT;
    + 		struct commit *commit = lookup_commit(ds->repo, oid);
      		if (commit) {
      			struct pretty_print_context pp = {0};
      			pp.date_mode.type = DATE_SHORT;
     -			format_commit_message(commit, " %ad - %s", &desc, &pp);
    -+			format_commit_message(commit, "%ad", &ci_ad, &pp);
    -+			format_commit_message(commit, "%s", &ci_s, &pp);
    ++			format_commit_message(commit, "%ad", &ad, &pp);
    ++			format_commit_message(commit, "%s", &s, &pp);
      		}
    - 	} else if (type == OBJ_TAG) {
    - 		struct tag *tag = lookup_tag(ds->repo, oid);
    - 		if (!parse_tag(tag) && tag->tag)
    --			strbuf_addf(&desc, " %s", tag->tag);
    -+			tag_desc = tag->tag;
    - 	}
    - 
    --	advise("  %s %s%s",
    --	       repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV),
    --	       type_name(type) ? type_name(type) : "unknown type",
    --	       desc.buf);
    -+	abbrev = repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV);
    -+	if (type == OBJ_COMMIT) {
    +-	} else if (type == OBJ_TAG) {
    ++
     +		/*
     +		 * TRANSLATORS: This is a line of ambiguous commit
     +		 * object output. E.g.:
     +		 *
     +		 *    "deadbeef commit 2021-01-01 - Some Commit Message"
    -+		 *
    -+		 * The second argument is the "commit" string from
    -+		 * object.c, it should (hopefully) already be
    -+		 * translated.
     +		 */
    -+		strbuf_addf(&desc, _("%s %s %s - %s"), abbrev, ci_ad.buf,
    -+			    _(type_name(type)), ci_s.buf);
    -+	} else if (tag_desc) {
    ++		strbuf_addf(&sb, _("%s commit %s - %s"), hash, ad.buf, s.buf);
    ++
    ++		strbuf_release(&ad);
    ++		strbuf_release(&s);
    ++		break;
    ++	}
    ++	case OBJ_TAG:
    ++	{
    + 		struct tag *tag = lookup_tag(ds->repo, oid);
    ++		const char *tag_tag = "";
    ++
    + 		if (!parse_tag(tag) && tag->tag)
    +-			strbuf_addf(&desc, " %s", tag->tag);
    ++			tag_tag = tag->tag;
    ++
     +		/*
     +		 * TRANSLATORS: This is a line of
     +		 * ambiguous tag object output. E.g.:
    @@ object-name.c: static int show_ambiguous_object(const struct object_id *oid, voi
     +		 * object.c, it should (hopefully) already be
     +		 * translated.
     +		 */
    -+		strbuf_addf(&desc, _("%s %s %s"), abbrev, _(type_name(type)),
    -+			    tag_desc);
    -+	} else {
    -+		const char *tname = type_name(type) ? _(type_name(type)) :
    -+			_(unknown_type);
    ++		strbuf_addf(&sb, _("%s tag %s"), hash, tag_tag);
    ++		break;
    ++	}
    ++	case OBJ_TREE:
     +		/*
     +		 * TRANSLATORS: This is a line of ambiguous <type>
    -+		 * object output. Where <type> is one of the object
    -+		 * types of "tree", "blob", "tag" ("commit" is handled
    -+		 * above).
    -+		 *
    -+		 *    "deadbeef tree"
    -+		 *    "deadbeef blob"
    -+		 *    "deadbeef tag"
    -+		 *    "deadbeef unknown type"
    -+		 *
    -+		 * Note that annotated tags use a separate format
    -+		 * outlined above.
    -+		 *
    -+		 * The second argument is the "tree", "blob" or "tag"
    -+		 * string from object.c, or the "unknown type" string
    -+		 * in the case of an unknown type. All of them should
    -+		 * (hopefully) already be translated.
    ++		 * object output. E.g. "deadbeef tree".
     +		 */
    -+		strbuf_addf(&desc, _("%s %s"), abbrev, tname);
    -+	}
    -+
    ++		strbuf_addf(&sb, _("%s tree"), hash);
    ++		break;
    ++	case OBJ_BLOB:
    ++		/*
    ++		 * TRANSLATORS: This is a line of ambiguous <type>
    ++		 * object output. E.g. "deadbeef blob".
    ++		 */
    ++		strbuf_addf(&sb, _("%s blob"), hash);
    ++		break;
    ++	default:
    ++		BUG("unreachable");
    + 	}
    + 
    +-	advise("  %s %s%s",
    +-	       repo_find_unique_abbrev(ds->repo, oid, DEFAULT_ABBREV),
    +-	       type_name(type), desc.buf);
     +	/*
     +	 * TRANSLATORS: This is line item of ambiguous object output,
     +	 * translated above.
     +	 */
    -+	advise(_("  %s\n"), desc.buf);
    ++	advise(_("  %s"), sb.buf);
      
    - 	strbuf_release(&desc);
    -+	strbuf_release(&ci_ad);
    -+	strbuf_release(&ci_s);
    +-	strbuf_release(&desc);
    ++	strbuf_release(&sb);
      	return 0;
      }
      
-:  ----------- > 3:  c03a0329789 object-name: show date for ambiguous tag objects
-- 
2.33.0.1446.g6af949f83bd

