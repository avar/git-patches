From 276e226f0a86da39efa9d2927d980ba305088790 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v3-00.23-00000000000-20211116T114103Z-avarab@gmail.com>
In-Reply-To: <cover-v2-00.18-00000000000-20211112T214150Z-avarab@gmail.com>
References: <cover-v2-00.18-00000000000-20211112T214150Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 16 Nov 2021 12:41:03 +0100
Subject: [PATCH v3 00/23] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (23):
  Makefile: don't invoke msgfmt with --statistics
  Makefile: don't set up "perl/build" rules under NO_PERL=Y
  Makefile: use "=" not ":=" for po/* and perl/*
  Makefile: clean perl/build/ even with NO_PERL=Y
  Makefile: remove "mv $@ $@+" dance redundant to .DELETE_ON_ERROR
  Makefile: guard Perl-only variable assignments
  Makefile: change "ifndef NO_PERL" to "ifdef NO_PERL"
  Makefile: adjust Perl-related comments & whitespace
  Makefile: correct "GIT-PERL-{DEFINES,HEADER}" dependency graph
  Makefile: create a GIT-PYTHON-DEFINES, like "PERL"
  Makefile: stop needing @@GIT_VERSION@@ in *.perl scripts
  Makefiles: add "shared.mak", move ".DELETE_ON_ERROR" to it
  Makefile: move $(comma), $(empty) and $(space) to shared.mak
  Makefile: re-add and use the "shellquote" macros
  Makefile: add a "TRACK_template" for GIT-*{FLAGS,DEFINES,...}
  Makefile: add "$(QUIET)" boilerplate to shared.mak
  Makefile: use $(wspfx) for $(QUIET...) in shared.mak
  Makefiles: add and use wildcard "mkdir -p" template
  Makefile: correct the dependency graph of hook-list.h
  Makefile: use $(file) I/O instead of "FORCE" when possible
  Makefile: disable GNU make built-in wildcard rules
  Makefile: define $(LIB_H) in terms of $(FIND_SOURCE_FILES)
  Makefile: move ".SUFFIXES" rule to shared.mak

 .gitignore             |   2 +-
 Documentation/Makefile |  71 +---------
 Makefile               | 313 +++++++++++++++--------------------------
 config.mak.uname       |   1 -
 git-cvsserver.perl     |   6 +-
 git-send-email.perl    |   7 +-
 git-svn.perl           |   2 +-
 shared.mak             | 187 ++++++++++++++++++++++++
 t/Makefile             |  34 ++---
 templates/Makefile     |  19 +--
 10 files changed, 337 insertions(+), 305 deletions(-)
 create mode 100644 shared.mak

Range-diff against v2:
 7:  75ebf7b04e5 =  1:  1621ca72c1d Makefile: don't invoke msgfmt with --statistics
 8:  138f60ba37b =  2:  b7c36c9fea0 Makefile: don't set up "perl/build" rules under NO_PERL=Y
 9:  472e1eb74bd =  3:  510499d18ba Makefile: use "=" not ":=" for po/* and perl/*
10:  a5ce2dce164 =  4:  37f3591bcca Makefile: clean perl/build/ even with NO_PERL=Y
11:  04dbc1d2809 =  5:  e38c90ad0b6 Makefile: remove "mv $@ $@+" dance redundant to .DELETE_ON_ERROR
12:  eea89794493 =  6:  98e14c7eba9 Makefile: guard Perl-only variable assignments
13:  e06732d4639 =  7:  047a42b01cf Makefile: change "ifndef NO_PERL" to "ifdef NO_PERL"
14:  a9502a23989 =  8:  0c0a3de390e Makefile: adjust Perl-related comments & whitespace
15:  c1336fc0a56 =  9:  1ece3160915 Makefile: correct "GIT-PERL-{DEFINES,HEADER}" dependency graph
16:  41f65a12205 = 10:  e9b61cd0ba5 Makefile: create a GIT-PYTHON-DEFINES, like "PERL"
17:  bfa15059d60 = 11:  b020f8e3257 Makefile: stop needing @@GIT_VERSION@@ in *.perl scripts
18:  656d02ab641 = 12:  19539ce7d2d Makefiles: add "shared.mak", move ".DELETE_ON_ERROR" to it
19:  6e25ac71cbc = 13:  6c9291c2c9f Makefile: move $(comma), $(empty) and $(space) to shared.mak
20:  64296e6e8e5 = 14:  e811a907b08 Makefile: re-add and use the "shellquote" macros
21:  5654d7f7f29 = 15:  fac30fe8b56 Makefile: add a "TRACK_template" for GIT-*{FLAGS,DEFINES,...}
22:  0a348b54491 = 16:  a3e3acea82d Makefile: add "$(QUIET)" boilerplate to shared.mak
23:  34f692144d1 = 17:  22264f431c8 Makefile: use $(wspfx) for $(QUIET...) in shared.mak
24:  5b3986bc4a8 = 18:  d61e2b44f68 Makefiles: add and use wildcard "mkdir -p" template
 2:  5724907e49b ! 19:  234b4eb613c Makefile: remove $(GIT_VERSION) from $(SCRIPT_DEFINES)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: remove $(GIT_VERSION) from $(SCRIPT_DEFINES)
    +    Makefile: correct the dependency graph of hook-list.h
     
    -    Remove the $(GIT_VERSION) from $(SCRIPT_DEFINES). Now every time HEAD
    -    changes in a development copy we don't need to re-build the scripts
    -    and script libraries.
    -
    -    This has not been needed since 2b9391bc675 (Makefile: do not replace
    -    @@GIT_VERSION@@ in shell scripts, 2012-06-20). On my setup this
    -    changes the re-making of 44 targets in a development copy where moved
    -    HEAD to 27.
    -
    -    The $(GIT_VERSION) was seemingly left here by mistake or omission. We
    -    didn't need it since 2b9391bc675, but in the later
    -    e4dd89ab984 (Makefile: update scripts when build-time parameters
    -    change, 2012-06-20) it was added to SCRIPT_DEFINES.
    -
    -    The two were part of the same series of patches, and given the summary
    -    in [1] and [2] it looks like this was probably a case of some earlier
    -    version of a later patch being combined with an updated earlier patch.
    -
    -    1. https://lore.kernel.org/git/20120619232231.GA6328@sigill.intra.peff.net/
    -    2. https://lore.kernel.org/git/20120619232453.GB6496@sigill.intra.peff.net/
    +    Fix an issue in my cfe853e66be (hook-list.h: add a generated list of
    +    hooks, like config-list.h, 2021-09-26), the builtin/help.c was
    +    inadvertently made to depend on hook-list.h, but it's used by
    +    builtin/bugreport.c.
     
    +    Reported-by: Mike Hommey <mh@glandium.org>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Makefile ##
    -@@ Makefile: command-list.h: $(wildcard Documentation/git*.txt)
    - hook-list.h: generate-hooklist.sh Documentation/githooks.txt
    - 	$(QUIET_GEN)$(SHELL_PATH) ./generate-hooklist.sh >$@
    +@@ Makefile: git$X: git.o GIT-LDFLAGS $(BUILTIN_OBJS) $(GITLIBS)
    + 
    + help.sp help.s help.o: command-list.h
    + hook.sp hook.s hook.o: hook-list.h
    ++builtin/bugreport.sp builtin/bugreport.s builtin/bugreport.o: hook-list.h
      
    --SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):$(GIT_VERSION):\
    -+SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):\
    - 	$(localedir_SQ):$(NO_CURL):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\
    - 	$(gitwebdir_SQ):$(PERL_PATH_SQ):$(SANE_TEXT_GREP):$(PAGER_ENV):\
    - 	$(perllibdir_SQ)
    +-builtin/help.sp builtin/help.s builtin/help.o: config-list.h hook-list.h GIT-PREFIX
    ++builtin/help.sp builtin/help.s builtin/help.o: config-list.h GIT-PREFIX
    + builtin/help.sp builtin/help.s builtin/help.o: EXTRA_CPPFLAGS = \
    + 	'-DGIT_HTML_PATH="$(htmldir_relative_SQ)"' \
    + 	'-DGIT_MAN_PATH="$(mandir_relative_SQ)"' \
 3:  d37ea95feef ! 20:  567ad5c3ebc Makefile: remove $(NO_CURL) from $(SCRIPT_DEFINES)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: remove $(NO_CURL) from $(SCRIPT_DEFINES)
    +    Makefile: use $(file) I/O instead of "FORCE" when possible
     
    -    Stop including $(NO_CURL) in $(SCRIPT_DEFINES). The "@NO_CURL@"
    -    replacement added in 6c5c62f3401 (Print an error if cloning a http
    -    repo and NO_CURL is set, 2006-02-15) has not been referenced by
    -    anything in-tree since 49eb8d39c78 (Remove contrib/examples/*,
    -    2018-03-25).
    +    Provide an alternate implementation of the recently added
    +    "TRACK_template" which uses GNU make 4.2 features. If the 'file'
    +    function is available we don't need to shell out at all to check if
    +    our tracked files change.
     
    -    That commit removed the reference from contrib/examples/*, but this
    -    @@NO_CURL@@ hasn't been used since git-pull.sh was the primary entry
    -    point for "git pull".
    +    We need to use the intermediate TRACK_template calling a
    +    TRACK_template_eval within the generated rule so that we don't eagerly
    +    fleshen these when "make" reads the file.
    +
    +    This doesn't make the runtime faster on my system, but helps to cut
    +    down on the noise of things we shell out for
    +    unconditionally. I.e. running "make" with "SHELL_PATH='sh -x'" (twice,
    +    so we pick up the setting) shows than a no-op run went from emitting:
    +
    +        $ SHELL_PATH='sh -x' make -j8 >/dev/null 2>&1; SHELL_PATH='sh -x' make 2>&1 |wc -l
    +        124
    +
    +    To:
    +
    +        $ SHELL_PATH='sh -x' make -j8 >/dev/null 2>&1; SHELL_PATH='sh -x' make 2>&1 |wc -l
    +        95
    +
    +    That 124 to 95 number is a rough approximation of how many times we
    +    shell out. "strace -f -c" similarly shows that we went from 8798 to
    +    8466 syscalls. So this brings us further along in the goal of making
    +    "make" do as little as possible when it's got nothing to re-build (see
    +    [2]).
    +
    +    1. https://lore.kernel.org/git/874kdn1j6i.fsf@evledraar.gmail.com/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Makefile ##
    -@@ Makefile: hook-list.h: generate-hooklist.sh Documentation/githooks.txt
    - 	$(QUIET_GEN)$(SHELL_PATH) ./generate-hooklist.sh >$@
    + ## shared.mak ##
    +@@
    + #    info make --index-search=.DELETE_ON_ERROR
    + .DELETE_ON_ERROR:
    + 
    ++### GNU Make version detection
    ++# We don't care about "release" versions like the "90" in "3.99.90"
    ++MAKE_VERSION_MAJOR = $(word 1,$(subst ., ,$(MAKE_VERSION)))
    ++MAKE_VERSION_MINOR = $(word 2,$(subst ., ,$(MAKE_VERSION)))
    ++
    ++# The oldest supported version of GNU make is 3-something. So "not v3"
    ++# is a future-proof way to ask "is it modern?"
    ++ifneq ($(MAKE_VERSION_MAJOR),3)
    ++# $(file >[...]) and $(file >>[...]) is in 4.0...
    ++MAKE_HAVE_FILE_WRITE = Need version 4.0 or later (released in late 2013)
    ++# .. but we need 4.2 for $(file <[...])
    ++ifneq ($(filter-out 0 1,$(MAKE_VERSION_MINOR)),)
    ++MAKE_HAVE_FILE_READ = Need version 4.2 or later (released in mid-2016)
    ++endif
    ++endif
    ++
    + ### Quoting helpers
    + 
    + ## Quote a ' inside a '': FOO='$(call shq,$(BAR))'
    +@@ shared.mak: endef
      
    - SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):\
    --	$(localedir_SQ):$(NO_CURL):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\
    -+	$(localedir_SQ):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\
    - 	$(gitwebdir_SQ):$(PERL_PATH_SQ):$(SANE_TEXT_GREP):$(PAGER_ENV):\
    - 	$(perllibdir_SQ)
    - GIT-SCRIPT-DEFINES: FORCE
    -@@ Makefile: sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    -     -e 's|@SHELL_PATH@|$(SHELL_PATH_SQ)|' \
    -     -e 's|@@DIFF@@|$(DIFF_SQ)|' \
    -     -e 's|@@LOCALEDIR@@|$(localedir_SQ)|g' \
    --    -e 's/@@NO_CURL@@/$(NO_CURL)/g' \
    -     -e 's/@@USE_GETTEXT_SCHEME@@/$(USE_GETTEXT_SCHEME)/g' \
    -     -e $(BROKEN_PATH_FIX) \
    -     -e 's|@@GITWEBDIR@@|$(gitwebdir_SQ)|g' \
    + ## Template for making a GIT-SOMETHING, which changes if a
    + ## TRACK_SOMETHING variable changes.
    ++##
    ++## This is the slower version used on GNU make <4.2.
    ++ifndef MAKE_HAVE_FILE_READ
    ++
    + define TRACK_template
    + .PHONY: FORCE
    + $(1): FORCE
    +@@ shared.mak: $(1): FORCE
    + 		echo "$$$$FLAGS" >$(1); \
    + 	fi
    + endef
    ++
    ++endif # !MAKE_HAVE_FILE_READ
    ++
    ++## A TRACK_template template compatible with the one above. Uses
    ++## features of GNU make >=4.2 to avoid shelling out for this "hot"
    ++## "FORCE" logic.
    ++##
    ++## Since version >=4.2 can do both "I" and "O" in I/O with using
    ++## $(file <)/$(file >) we read the GIT-SOMETHING file into a variable
    ++## with the former, and if it's different from our expected value
    ++## write it out with the latter.
    ++ifdef MAKE_HAVE_FILE_READ
    ++
    ++define TRACK_template_eval
    ++$(1)_WRITE =
    ++$(1)_EXISTS = $(wildcard $(1))
    ++ifeq ($$($(1)_EXISTS),)
    ++$(1)_WRITE = new
    ++else
    ++$(1)_CONTENT = $(file <$(1))
    ++ifeq ($$($(1)_CONTENT),$($(2)))
    ++$(1)_WRITE = same
    ++else
    ++$(1)_WRITE = changed
    ++endif
    ++endif
    ++ifneq ($$($(1)_WRITE),same)
    ++$$(info $$(wspfx) $(1) parameters ($$($(1)_WRITE)))
    ++$$(file >$(1),$($(2)))
    ++endif
    ++endef # TRACK_template_eval
    ++
    ++define TRACK_template
    ++$(1):
    ++	$$(eval $$(call TRACK_template_eval,$(1),$(2)))
    ++endef
    ++
    ++endif # MAKE_HAVE_FILE_READ
 -:  ----------- > 21:  cb3ae5ce00b Makefile: disable GNU make built-in wildcard rules
 1:  5f265ba82cc ! 22:  88cfc946b37 Makefile: move git-SCRIPT-DEFINES adjacent to $(SCRIPT_DEFINES)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: move git-SCRIPT-DEFINES adjacent to $(SCRIPT_DEFINES)
    +    Makefile: define $(LIB_H) in terms of $(FIND_SOURCE_FILES)
     
    -    When "GIT-SCRIPT-DEFINES" was added in e4dd89ab984 (Makefile: update
    -    scripts when build-time parameters change, 2012-06-20) the rules for
    -    generating the scripts themselves were moved further away from the
    -    "cmd_munge_script" added in 46bac904581 (Do not install shell
    -    libraries executable, 2010-01-31).
    +    Combine the definitions of $(FIND_SOURCE_FILES) and $(LIB_H) to speed
    +    up the Makefile, as these are the two main expensive $(shell) commands
    +    that we execute unconditionally.
     
    -    Let's move these around so that the variables and defines needed by
    -    given targets immediately precede them. This is not needed for any
    -    subsequent changes to work, but makes the code consistent with how
    -    GIT-PERL-DEFINES is structured.
    +    When see what was in $(FOUND_SOURCE_FILES) that wasn't in $(LIB_H) via
    +    the ad-hoc test of:
    +
    +        $(error $(filter-out $(LIB_H),$(filter %.h,$(ALL_SOURCE_FILES))))
    +        $(error $(filter-out $(ALL_SOURCE_FILES),$(filter %.h,$(LIB_H))))
    +
    +    We'll get, respectively:
    +
    +        Makefile:850: *** t/helper/test-tool.h.  Stop.
    +        Makefile:850: *** .  Stop.
    +
    +    I.e. we only had a discrepancy when it came to
    +    t/helper/test-tool.h. In terms of correctness this was broken before,
    +    but now works:
    +
    +        $ make t/helper/test-tool.hco
    +            HDR t/helper/test-tool.h
    +
    +    This speeds things up a lot:
    +
    +        $ git -c hyperfine.hook.setup= hyperfine -L rev HEAD~1,HEAD~0 -s 'make -j8 all NO_TCLTK=Y' 'make NO_TCLTK=Y' --war
    +        mup 10 -M 10
    +        Benchmark 1: make NO_TCLTK=Y' in 'HEAD~1
    +          Time (mean ± σ):      99.5 ms ±   0.5 ms    [User: 83.4 ms, System: 20.7 ms]
    +          Range (min … max):    98.8 ms … 100.2 ms    10 runs
    +
    +        Benchmark 2: make NO_TCLTK=Y' in 'HEAD~0
    +          Time (mean ± σ):      69.4 ms ±   0.5 ms    [User: 58.8 ms, System: 14.2 ms]
    +          Range (min … max):    68.9 ms …  70.3 ms    10 runs
    +
    +        Summary
    +          'make NO_TCLTK=Y' in 'HEAD~0' ran
    +            1.43 ± 0.01 times faster than 'make NO_TCLTK=Y' in 'HEAD~1'
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Makefile ##
    -@@ Makefile: SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):$(GIT_VERSION):\
    - 	$(localedir_SQ):$(NO_CURL):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\
    - 	$(gitwebdir_SQ):$(PERL_PATH_SQ):$(SANE_TEXT_GREP):$(PAGER_ENV):\
    - 	$(perllibdir_SQ)
    -+GIT-SCRIPT-DEFINES: FORCE
    -+	@FLAGS='$(SCRIPT_DEFINES)'; \
    -+	    if test x"$$FLAGS" != x"`cat $@ 2>/dev/null`" ; then \
    -+		echo >&2 "    * new script parameters"; \
    -+		echo "$$FLAGS" >$@; \
    -+            fi
    +@@ Makefile: GENERATED_H += hook-list.h
    + .PHONY: generated-hdrs
    + generated-hdrs: $(GENERATED_H)
    + 
    +-LIB_H := $(sort $(patsubst ./%,%,$(shell git ls-files '*.h' ':!t/' ':!Documentation/' 2>/dev/null || \
    ++## Exhaustive lists of our source files, either dynamically generated,
    ++## or hardcoded.
    ++SOURCES_CMD = ( \
    ++	git ls-files \
    ++		'*.[hcS]' \
    ++		'*.sh' \
    ++		':!*[tp][0-9][0-9][0-9][0-9]*' \
    ++		':!contrib' \
    ++		2>/dev/null || \
    + 	$(FIND) . \
    +-	-name .git -prune -o \
    +-	-name t -prune -o \
    +-	-name Documentation -prune -o \
    +-	-name '*.h' -print)))
    ++		\( -name .git -type d -prune \) \
    ++		-o \( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \) \
    ++		-o \( -name contrib -type d -prune \) \
    ++		-o \( -name build -type d -prune \) \
    ++		-o \( -name 'trash*' -type d -prune \) \
    ++		-o \( -name '*.[hcS]' -type f -print \) \
    ++		-o \( -name '*.sh' -type f -print \) \
    ++		| sed -e 's|^\./||' \
    ++	)
    ++FOUND_SOURCE_FILES := $(shell $(SOURCES_CMD))
    ++
    ++FOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))
    ++FOUND_H_SOURCES = $(filter %.h,$(FOUND_SOURCE_FILES))
    ++
    ++COCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES),$(FOUND_C_SOURCES))
     +
    - define cmd_munge_script
    - sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    -     -e 's|@SHELL_PATH@|$(SHELL_PATH_SQ)|' \
    -@@ Makefile: sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    -     $@.sh >$@+
    - endef
    ++LIB_H = $(FOUND_H_SOURCES)
      
    --GIT-SCRIPT-DEFINES: FORCE
    --	@FLAGS='$(SCRIPT_DEFINES)'; \
    --	    if test x"$$FLAGS" != x"`cat $@ 2>/dev/null`" ; then \
    --		echo >&2 "    * new script parameters"; \
    --		echo "$$FLAGS" >$@; \
    --            fi
    + LIB_OBJS += abspath.o
    + LIB_OBJS += add-interactive.o
    +@@ Makefile: perl/build/man/man3/Git.3pm: perl/Git.pm
    + 	$(call mkdir_p_parent_template)
    + 	$(QUIET_GEN)pod2man $< $@
    + 
    +-FIND_SOURCE_FILES = ( \
    +-	git ls-files \
    +-		'*.[hcS]' \
    +-		'*.sh' \
    +-		':!*[tp][0-9][0-9][0-9][0-9]*' \
    +-		':!contrib' \
    +-		2>/dev/null || \
    +-	$(FIND) . \
    +-		\( -name .git -type d -prune \) \
    +-		-o \( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \) \
    +-		-o \( -name contrib -type d -prune \) \
    +-		-o \( -name build -type d -prune \) \
    +-		-o \( -name 'trash*' -type d -prune \) \
    +-		-o \( -name '*.[hcS]' -type f -print \) \
    +-		-o \( -name '*.sh' -type f -print \) \
    +-		| sed -e 's|^\./||' \
    +-	)
    +-
    +-FOUND_SOURCE_FILES = $(shell $(FIND_SOURCE_FILES))
     -
    + $(ETAGS_TARGET): $(FOUND_SOURCE_FILES)
    + 	$(QUIET_GEN)$(RM) $@+ && \
    + 	echo $(FOUND_SOURCE_FILES) | xargs etags -a -o $@+ && \
    +@@ Makefile: check: $(GENERATED_H)
    + 		exit 1; \
    + 	fi
    + 
    +-FOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))
    +-COCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES),$(FOUND_C_SOURCES))
     -
    - $(SCRIPT_SH_GEN) : % : %.sh GIT-SCRIPT-DEFINES
    - 	$(QUIET_GEN)$(cmd_munge_script) && \
    - 	chmod +x $@+ && \
    + %.cocci.patch: %.cocci $(COCCI_SOURCES)
    + 	$(QUIET_SPATCH) \
    + 	if test $(SPATCH_BATCH_SIZE) = 0; then \
 4:  7d02f60eb66 <  -:  ----------- git-instaweb: unconditionally assume that gitweb is mod_perl capable
 5:  7fd3951f643 <  -:  ----------- git-sh-setup: remove unused sane_egrep() function
 6:  bb4b27494eb <  -:  ----------- git-sh-setup: remove "sane_grep", it's not needed anymore
 -:  ----------- > 23:  276e226f0a8 Makefile: move ".SUFFIXES" rule to shared.mak
-- 
2.34.0.795.g1e9501ab396

