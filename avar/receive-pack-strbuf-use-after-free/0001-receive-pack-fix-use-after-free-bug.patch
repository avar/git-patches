From f1613548cc2ada6920cafe99a9bd17e09765acd8 Mon Sep 17 00:00:00 2001
In-Reply-To: <tencent_1D3185A4545436CD715E41F5@qq.com>
References: <tencent_1D3185A4545436CD715E41F5@qq.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Mon, 18 Feb 2019 14:37:02 +0100
Subject: [PATCH] receive-pack: fix use after free bug
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

The resolve_ref_unsafe() function can, and sometimes will in the case
of this codepath, return the char * passed to it to the caller. In
this case we construct a strbuf, free it, and then continue using the
dst_name after that free().

The code being fixed dates back to da3efdb17b ("receive-pack: detect
aliased updates which can occur with symrefs", 2010-04-19). When it
was originally added it didn't have this bug, it was introduced when
it was subsequently modified to use strbuf in 6b01ecfe22 ("ref
namespaces: Support remote repositories via upload-pack and
receive-pack", 2011-07-08).

Reported-by: 王健强 <jianqiang.wang@securitygossip.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---

On Mon, Feb 18, 2019 at 2:07 PM 王健强 <jianqiang.wang@securitygossip.com> wrote:
>
> hello developers:
>         I found a potential use after bug in git latest version.
>         in /builtin/receive-pack.c.
>         line 1210 "dst_name = resolve_ref_unsafe(buf.buf, 0, NULL, &flag);", the function "resolve_ref_unsafe" may directly return the first argument "buf.buf" whose value will be assigned to "dst_name".
>         in line 1211 "strbuf_release(&buf);". the memory region "buf.buf" is released which means "dst_name" is freed.
>         in the following lines, "dst_name" is used which causes the bug.
>         I hope it would help you!

Thanks. I can confirm this. Here's a patch that fixes the issue.

For on-list members, I also pushed it as
avar/receive-pack-strbuf-use-after-free to git/cabal.git :
https://github.com/git/cabal/tree/avar/receive-pack-strbuf-use-after-free

Maybe others have better ideas if/how this can be exploited in
practice. The dst_name memory are could point to anything at this
point, and we'll first check if it's a valid pointer, then pass it to
strip_namespace(), and then use it in a string list lookup. So
e.g. with this (which seems possible due to this):

            dst_name = (char *)strip_namespace(dst_name);
    +       dst_name = "refs/heads/master";

We'll fail two tests due to trying to update the wrong ref to the
wrong value, whether it's exploitable remotely in practice is another
matter.

My hunch says no, since any malicious use of this would need to
arrange for a remote receive-pack process to "free" memory in such a
way that it reads the bad thing you're interested in replacing instead
of the value it thought it had. Theoretically possible, but seems
implausible in practice.

 builtin/receive-pack.c | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/builtin/receive-pack.c b/builtin/receive-pack.c
index d58b7750b6..643e641d9b 100644
--- a/builtin/receive-pack.c
+++ b/builtin/receive-pack.c
@@ -1201,13 +1201,18 @@ static void run_update_post_hook(struct command *commands)
 static void check_aliased_update(struct command *cmd, struct string_list *list)
 {
 	struct strbuf buf = STRBUF_INIT;
-	const char *dst_name;
+	int buf_detached = 0;
+	char *dst_name;
 	struct string_list_item *item;
 	struct command *dst_cmd;
 	int flag;
 
 	strbuf_addf(&buf, "%s%s", get_git_namespace(), cmd->ref_name);
-	dst_name = resolve_ref_unsafe(buf.buf, 0, NULL, &flag);
+	dst_name = (char *)resolve_ref_unsafe(buf.buf, 0, NULL, &flag);
+	if (dst_name == buf.buf) {
+		buf_detached = 1;
+		strbuf_detach(&buf, NULL);
+	}
 	strbuf_release(&buf);
 
 	if (!(flag & REF_ISSYMREF))
@@ -1217,12 +1222,17 @@ static void check_aliased_update(struct command *cmd, struct string_list *list)
 		rp_error("refusing update to broken symref '%s'", cmd->ref_name);
 		cmd->skip_update = 1;
 		cmd->error_string = "broken symref";
+		if (buf_detached)
+			free(dst_name);
 		return;
 	}
-	dst_name = strip_namespace(dst_name);
+	dst_name = (char *)strip_namespace(dst_name);
 
-	if ((item = string_list_lookup(list, dst_name)) == NULL)
+	if ((item = string_list_lookup(list, dst_name)) == NULL) {
+		if (buf_detached)
+			free(dst_name);
 		return;
+	}
 
 	cmd->skip_update = 1;
 
-- 
2.21.0.rc0.258.g878e2cd30e

