From 1e38bfa7f9599ee4e4f274bdaf1747046eb9ef5a Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-00.33-00000000000-20220831T230246Z-avarab@gmail.com>
In-Reply-To: <cover.1657819649.git.matheus.bernardino@usp.br>
References: <cover.1657819649.git.matheus.bernardino@usp.br>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 1 Sep 2022 01:02:46 +0200
Subject: [PATCH v2 00/33] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Glen Choo (2):
  submodule--helper: add "const" to copy of "update_data"
  submodule--helper: refactor "errmsg_str" to be a "struct strbuf"

Ævar Arnfjörð Bjarmason (31):
  submodule tests: test usage behavior
  submodule tests: test for "add <repository> <abs-path>"
  submodule--helper: remove unused "name" helper
  submodule--helper: remove unused "list" helper
  test-tool submodule-config: remove unused "--url" handling
  submodule--helper: move "is-active" to a test-tool
  submodule--helper: move "check-name" to a test-tool
  submodule--helper: move "resolve-relative-url-test" to a test-tool
  submodule--helper style: don't separate declared variables with \n\n
  submodule--helper style: add \n\n after variable declarations
  submodule--helper: replace memset() with { 0 }-initialization
  submodule--helper: use xstrfmt() in clone_submodule()
  submodule--helper: move "sb" in clone_submodule() to its own scope
  submodule--helper: add "const" to passed "module_clone_data"
  submodule--helper: add "const" to passed "struct update_data"
  submodule--helper: don't redundantly check "else if (res)"
  submodule--helper: rename "int res" to "int ret"
  submodule--helper: return "ret", not "1" from update_submodule()
  submodule--helper: add missing braces to "else" arm
  submodule--helper: don't call submodule_strategy_to_string() in BUG()
  submodule API: don't handle SM_..{UNSPECIFIED,COMMAND} in to_string()
  submodule--helper: use "code" in run_update_command()
  submodule--helper: don't exit() on failure, return
  submodule--helper: libify determine_submodule_update_strategy()
  submodule--helper: libify "must_die_on_failure" code paths
  submodule--helper update: don't override 'checkout' exit code
  submodule--helper: libify "must_die_on_failure" code paths (for die)
  submodule--helper: check repo{_submodule,}_init() return values
  submodule--helper: libify more "die" paths for module_update()
  submodule--helper: libify even more "die" paths for module_update()
  submodule--helper: fix bad config API usage

 Makefile                         |   1 +
 builtin/submodule--helper.c      | 546 ++++++++++++++-----------------
 git-compat-util.h                |   3 +
 repository.h                     |   3 +
 submodule.c                      |  12 +-
 submodule.h                      |   2 +-
 t/helper/test-submodule-config.c |  11 +-
 t/helper/test-submodule.c        | 146 +++++++++
 t/helper/test-tool-utils.h       |   9 +
 t/helper/test-tool.c             |   7 +-
 t/helper/test-tool.h             |   1 +
 t/t0060-path-utils.sh            |   2 +-
 t/t7400-submodule-basic.sh       |  56 ++--
 t/t7406-submodule-update.sh      |   2 +-
 t/t7413-submodule-is-active.sh   |  35 +-
 t/t7450-bad-git-dotfiles.sh      |   2 +-
 16 files changed, 467 insertions(+), 371 deletions(-)
 create mode 100644 t/helper/test-submodule.c
 create mode 100644 t/helper/test-tool-utils.h

Range-diff against v1:
 -:  ----------- >  1:  2e882837026 submodule tests: test usage behavior
 -:  ----------- >  2:  a015be8e89a submodule tests: test for "add <repository> <abs-path>"
 -:  ----------- >  3:  27a455d231a submodule--helper: remove unused "name" helper
 1:  f3b275fd5b5 !  4:  6714a04a5c8 doc: grep: unify configuration variables definitions
    @@
      ## Metadata ##
    -Author: Matheus Tavares <matheus.bernardino@usp.br>
    +Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    doc: grep: unify configuration variables definitions
    +    submodule--helper: remove unused "list" helper
     
    -    The configuration variables for git-grep are duplicated in
    -    "Documentation/git-grep.txt" and "Documentation/config/grep.txt", which
    -    gqcan make maintenance difficult. The first also contains a definition
    -    that is not present in the latter (grep.fullName), and the latter
    -    received a wording improvement that was not replicated in the former:
    -    see 91028f765 ("grep: clarify what `grep.patternType=default` means",
    -    2021-12-05).
    +    Remove the "submodule--helper list" sub-command, which hasn't been
    +    used by git-submodule.sh since 2964d6e5e1e (submodule: port subcommand
    +    'set-branch' from shell to C, 2020-06-02).
     
    -    To avoid such problems, unify the information in one file and include it
    -    in the other.
    +    There was a test added in 2b56bb7a87a (submodule helper list: respect
    +    correct path prefix, 2016-02-24) which relied on it, but the right
    +    thing to do here is to delete that test as well.
     
    -    Signed-off-by: Matheus Tavares <matheus.bernardino@usp.br>
    +    That test was regression testing the "list" subcommand itself. We're
    +    not getting anything useful from the "list | cut -f2" invocation that
    +    we couldn't get from "foreach 'echo $sm_path'".
     
    - ## Documentation/config/grep.txt ##
    -@@ Documentation/config/grep.txt: grep.extendedRegexp::
    - 	other than 'default'.
    - 
    - grep.threads::
    --	Number of grep worker threads to use.
    --	See `grep.threads` in linkgit:git-grep[1] for more information.
    -+	Number of grep worker threads to use. See `--threads`
    -+ifndef::git-grep[]
    -+	in linkgit:git-grep[1]
    -+endif::git-grep[]
    -+	for more information.
    -+
    -+grep.fullName::
    -+	If set to true, enable `--full-name` option by default.
    - 
    - grep.fallbackToNoIndex::
    - 	If set to true, fall back to git grep --no-index if git grep
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/git-grep.txt ##
    -@@ Documentation/git-grep.txt: registered in the index file, or blobs in given tree objects.  Patterns
    - are lists of one or more search expressions separated by newline
    - characters.  An empty string as search expression matches all lines.
    + ## builtin/submodule--helper.c ##
    +@@ builtin/submodule--helper.c: static char *get_up_path(const char *path)
    + 	return strbuf_detach(&sb, NULL);
    + }
      
    +-static int module_list(int argc, const char **argv, const char *prefix)
    +-{
    +-	int i;
    +-	struct pathspec pathspec;
    +-	struct module_list list = MODULE_LIST_INIT;
     -
    - OPTIONS
    - -------
    - --cached::
    -@@ Documentation/git-grep.txt: providing this option will cause it to die.
    - 	a non-zero status.
    - 
    - --threads <num>::
    --	Number of grep worker threads to use.
    --	See `grep.threads` in 'CONFIGURATION' for more information.
    -+	Number of grep worker threads to use. If not provided (or set to
    -+	0), Git will use as many worker threads as the number of logical
    -+	cores available. The default value can also be set with the
    -+	`grep.threads` configuration.
    - 
    - -f <file>::
    - 	Read patterns from <file>, one per line.
    -@@ Documentation/git-grep.txt: performance in this case, it might be desirable to use `--threads=1`.
    - CONFIGURATION
    - -------------
    - 
    --grep.lineNumber::
    --	If set to true, enable `-n` option by default.
    +-	struct option module_list_options[] = {
    +-		OPT_STRING(0, "prefix", &prefix,
    +-			   N_("path"),
    +-			   N_("alternative anchor for relative paths")),
    +-		OPT_END()
    +-	};
     -
    --grep.column::
    --	If set to true, enable the `--column` option by default.
    +-	const char *const git_submodule_helper_usage[] = {
    +-		N_("git submodule--helper list [--prefix=<path>] [<path>...]"),
    +-		NULL
    +-	};
     -
    --grep.patternType::
    --	Set the default matching behavior. Using a value of 'basic', 'extended',
    --	'fixed', or 'perl' will enable the `--basic-regexp`, `--extended-regexp`,
    --	`--fixed-strings`, or `--perl-regexp` option accordingly, while the
    --	value 'default' will return to the default matching behavior.
    +-	argc = parse_options(argc, argv, prefix, module_list_options,
    +-			     git_submodule_helper_usage, 0);
     -
    --grep.extendedRegexp::
    --	If set to true, enable `--extended-regexp` option by default. This
    --	option is ignored when the `grep.patternType` option is set to a value
    --	other than 'default'.
    +-	if (module_list_compute(argc, argv, prefix, &pathspec, &list) < 0)
    +-		return 1;
     -
    --grep.threads::
    --	Number of grep worker threads to use. If unset (or set to 0), Git will
    --	use as many threads as the number of logical cores available.
    +-	for (i = 0; i < list.nr; i++) {
    +-		const struct cache_entry *ce = list.entries[i];
     -
    --grep.fullName::
    --	If set to true, enable `--full-name` option by default.
    +-		if (ce_stage(ce))
    +-			printf("%06o %s U\t", ce->ce_mode,
    +-			       oid_to_hex(null_oid()));
    +-		else
    +-			printf("%06o %s %d\t", ce->ce_mode,
    +-			       oid_to_hex(&ce->oid), ce_stage(ce));
     -
    --grep.fallbackToNoIndex::
    --	If set to true, fall back to git grep --no-index if git grep
    --	is executed outside of a git repository.  Defaults to false.
    +-		fprintf(stdout, "%s\n", ce->name);
    +-	}
    +-	return 0;
    +-}
     -
    -+:git-grep: 1
    -+include::config/grep.txt[]
    + static void for_each_listed_submodule(const struct module_list *list,
    + 				      each_submodule_fn fn, void *cb_data)
    + {
    +@@ builtin/submodule--helper.c: struct cmd_struct {
    + };
    + 
    + static struct cmd_struct commands[] = {
    +-	{"list", module_list, 0},
    + 	{"clone", module_clone, SUPPORT_SUPER_PREFIX},
    + 	{"add", module_add, 0},
    + 	{"update", module_update, SUPPORT_SUPER_PREFIX},
    +
    + ## t/t7400-submodule-basic.sh ##
    +@@ t/t7400-submodule-basic.sh: test_expect_success 'submodule add clone shallow submodule' '
    + 	)
    + '
      
    - GIT
    - ---
    +-test_expect_success 'submodule helper list is not confused by common prefixes' '
    +-	mkdir -p dir1/b &&
    +-	(
    +-		cd dir1/b &&
    +-		git init &&
    +-		echo hi >testfile2 &&
    +-		git add . &&
    +-		git commit -m "test1"
    +-	) &&
    +-	mkdir -p dir2/b &&
    +-	(
    +-		cd dir2/b &&
    +-		git init &&
    +-		echo hello >testfile1 &&
    +-		git add .  &&
    +-		git commit -m "test2"
    +-	) &&
    +-	git submodule add /dir1/b dir1/b &&
    +-	git submodule add /dir2/b dir2/b &&
    +-	git commit -m "first submodule commit" &&
    +-	git submodule--helper list dir1/b | cut -f 2 >actual &&
    +-	echo "dir1/b" >expect &&
    +-	test_cmp expect actual
    +-'
    +-
    + test_expect_success 'setup superproject with submodules' '
    + 	git init sub1 &&
    + 	test_commit -C sub1 test &&
 -:  ----------- >  5:  83516cdcb5c test-tool submodule-config: remove unused "--url" handling
 -:  ----------- >  6:  51d2d946b4f submodule--helper: move "is-active" to a test-tool
 -:  ----------- >  7:  3258b5a609d submodule--helper: move "check-name" to a test-tool
 -:  ----------- >  8:  4e6929f05ec submodule--helper: move "resolve-relative-url-test" to a test-tool
 -:  ----------- >  9:  76b55b9105f submodule--helper style: don't separate declared variables with \n\n
 -:  ----------- > 10:  44b27475864 submodule--helper style: add \n\n after variable declarations
 -:  ----------- > 11:  008c6f4ac59 submodule--helper: replace memset() with { 0 }-initialization
 -:  ----------- > 12:  84504a86a72 submodule--helper: use xstrfmt() in clone_submodule()
 -:  ----------- > 13:  474d1a9e13e submodule--helper: move "sb" in clone_submodule() to its own scope
 -:  ----------- > 14:  e514f0b68c0 submodule--helper: add "const" to passed "module_clone_data"
 -:  ----------- > 15:  30be00d5cf7 submodule--helper: add "const" to copy of "update_data"
 -:  ----------- > 16:  b77364015cf submodule--helper: add "const" to passed "struct update_data"
 -:  ----------- > 17:  52da0d60b47 submodule--helper: refactor "errmsg_str" to be a "struct strbuf"
 -:  ----------- > 18:  1786e40ec99 submodule--helper: don't redundantly check "else if (res)"
 -:  ----------- > 19:  bc7d401bfb3 submodule--helper: rename "int res" to "int ret"
 -:  ----------- > 20:  fdd9ef8b6f6 submodule--helper: return "ret", not "1" from update_submodule()
 -:  ----------- > 21:  9edd68f9c5a submodule--helper: add missing braces to "else" arm
 -:  ----------- > 22:  f0ada6854c2 submodule--helper: don't call submodule_strategy_to_string() in BUG()
 -:  ----------- > 23:  d101aa6c8c5 submodule API: don't handle SM_..{UNSPECIFIED,COMMAND} in to_string()
 2:  d40ed2c351f ! 24:  77d21b570e3 doc: apply: unify configuration variables definitions
    @@
      ## Metadata ##
    -Author: Matheus Tavares <matheus.bernardino@usp.br>
    +Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    doc: apply: unify configuration variables definitions
    -
    -    Note that apply.ignoreWhitespace and apply.whitespace are defined with
    -    slightly different wordings at git-apply.txt and config/apply.txt.
    -    Nevertheless, there is no loss of information from using one or the
    -    other, so I kept the latter for the single unified definition.
    -
    -    Signed-off-by: Matheus Tavares <matheus.bernardino@usp.br>
    -
    - ## Documentation/config/apply.txt ##
    -@@ Documentation/config/apply.txt: apply.ignoreWhitespace::
    - 	option.
    - 	When set to one of: no, none, never, false tells 'git apply' to
    - 	respect all whitespace differences.
    -+ifndef::git-apply[]
    - 	See linkgit:git-apply[1].
    -+endif::git-apply[]
    +    submodule--helper: use "code" in run_update_command()
    +
    +    Apply some DRY principles in run_update_command() and don't have two
    +    "switch" statements over "ud->update_strategy.type" determine the same
    +    thing.
    +
    +    First we were setting "must_die_on_failure = 1" in all cases except
    +    "SM_UPDATE_CHECKOUT" (and we'd BUG(...) out on the rest). This code
    +    was added in c51f8f94e5b (submodule--helper: run update procedures
    +    from C, 2021-08-24).
    +
    +    Then we'd duplicate same "switch" logic when we were using the
    +    "must_die_on_failure" variable.
    +
    +    Let's instead have the "case" branches in that inner "switch"
    +    determine whether or not the "update must continue" by picking an exit
    +    code.
    +
    +    This also mostly avoids hardcoding the "128" exit code, instead we can
    +    make use of the return value of the die_message() function, which
    +    we've been calling here since 55b3f12cb54 (submodule update: use
    +    die_message(), 2022-03-15). We're still hardcoding it to determine if
    +    we "exit()", but subsequent commit(s) will address that.
    +
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    +
    + ## builtin/submodule--helper.c ##
    +@@ builtin/submodule--helper.c: static int run_update_command(const struct update_data *ud, int subforce)
    + {
    + 	struct child_process cp = CHILD_PROCESS_INIT;
    + 	char *oid = oid_to_hex(&ud->oid);
    +-	int must_die_on_failure = 0;
      
    - apply.whitespace::
    - 	Tells 'git apply' how to handle whitespaces, in the same way
    --	as the `--whitespace` option. See linkgit:git-apply[1].
    -+	as the `--whitespace` option.
    -+ifndef::git-apply[]
    -+	See linkgit:git-apply[1].
    -+endif::git-apply[]
    -
    - ## Documentation/git-apply.txt ##
    -@@ Documentation/git-apply.txt: has no effect when `--index` or `--cached` is in use.
    - CONFIGURATION
    - -------------
    + 	switch (ud->update_strategy.type) {
    + 	case SM_UPDATE_CHECKOUT:
    +@@ builtin/submodule--helper.c: static int run_update_command(const struct update_data *ud, int subforce)
    + 		strvec_push(&cp.args, "rebase");
    + 		if (ud->quiet)
    + 			strvec_push(&cp.args, "--quiet");
    +-		must_die_on_failure = 1;
    + 		break;
    + 	case SM_UPDATE_MERGE:
    + 		cp.git_cmd = 1;
    + 		strvec_push(&cp.args, "merge");
    + 		if (ud->quiet)
    + 			strvec_push(&cp.args, "--quiet");
    +-		must_die_on_failure = 1;
    + 		break;
    + 	case SM_UPDATE_COMMAND:
    + 		cp.use_shell = 1;
    + 		strvec_push(&cp.args, ud->update_strategy.command);
    +-		must_die_on_failure = 1;
    + 		break;
    + 	default:
    + 		BUG("unexpected update strategy type: %d",
    +@@ builtin/submodule--helper.c: static int run_update_command(const struct update_data *ud, int subforce)
    + 	cp.dir = xstrdup(ud->sm_path);
    + 	prepare_submodule_repo_env(&cp.env);
    + 	if (run_command(&cp)) {
    ++		int ret;
    ++
    + 		switch (ud->update_strategy.type) {
    + 		case SM_UPDATE_CHECKOUT:
    + 			die_message(_("Unable to checkout '%s' in submodule path '%s'"),
    + 				    oid, ud->displaypath);
    ++			/* the command failed, but update must continue */
    ++			ret = 1;
    + 			break;
    + 		case SM_UPDATE_REBASE:
    +-			die_message(_("Unable to rebase '%s' in submodule path '%s'"),
    +-			    oid, ud->displaypath);
    ++			ret = die_message(_("Unable to rebase '%s' in submodule path '%s'"),
    ++					  oid, ud->displaypath);
    + 			break;
    + 		case SM_UPDATE_MERGE:
    +-			die_message(_("Unable to merge '%s' in submodule path '%s'"),
    +-			    oid, ud->displaypath);
    ++			ret = die_message(_("Unable to merge '%s' in submodule path '%s'"),
    ++					  oid, ud->displaypath);
    + 			break;
    + 		case SM_UPDATE_COMMAND:
    +-			die_message(_("Execution of '%s %s' failed in submodule path '%s'"),
    +-			    ud->update_strategy.command, oid, ud->displaypath);
    ++			ret = die_message(_("Execution of '%s %s' failed in submodule path '%s'"),
    ++					  ud->update_strategy.command, oid, ud->displaypath);
    + 			break;
    + 		default:
    + 			BUG("unexpected update strategy type: %d",
    + 			    ud->update_strategy.type);
    + 		}
    +-		if (must_die_on_failure)
    +-			exit(128);
      
    --apply.ignoreWhitespace::
    --	Set to 'change' if you want changes in whitespace to be ignored by default.
    --	Set to one of: no, none, never, false if you want changes in
    --	whitespace to be significant.
    --apply.whitespace::
    --	When no `--whitespace` flag is given from the command
    --	line, this configuration item is used as the default.
    -+:git-apply: 1
    -+include::config/apply.txt[]
    +-		/* the command failed, but update must continue */
    +-		return 1;
    ++		if (ret == 128)
    ++			exit(ret);
    ++		return ret;
    + 	}
      
    - SUBMODULES
    - ----------
    + 	if (ud->quiet)
 -:  ----------- > 25:  99717171578 submodule--helper: don't exit() on failure, return
 3:  5338d50c99c ! 26:  512106bc6be doc: notes: unify configuration variables definitions
    @@
      ## Metadata ##
    -Author: Matheus Tavares <matheus.bernardino@usp.br>
    +Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    doc: notes: unify configuration variables definitions
    +    submodule--helper: libify determine_submodule_update_strategy()
     
    -    Unify duplicated configuration descriptions from git-notes.txt and
    -    config.txt in order to facilitate maintenance and update. There are some
    -    discrepancies between these two files: git-notes.txt received two
    -    updates that were not made in config.txt: see 66c4c32
    -    ("Documentation/notes: simplify treatment of default display refs",
    -    2010-05-08) and c5ce183 ("Documentation/notes: clean up description of
    -    rewriting configuration", 2010-05-08 ). And there was also an update to
    -    config.txt not propagated to git-notes.txt: see 2b4aa89 ("Documentation:
    -    basic configuration of notes.rewriteRef", 2011-09-13). Let's make sure
    -    to include all these three updates in the unified version.
    +    Libify the determine_submodule_update_strategy() by having it invoke
    +    die_message() rather than die(), and returning the code die_message()
    +    returns on failure.
     
    -    Signed-off-by: Matheus Tavares <matheus.bernardino@usp.br>
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/config/notes.txt ##
    -@@ Documentation/config/notes.txt: notes.mergeStrategy::
    - 	Which merge strategy to choose by default when resolving notes
    - 	conflicts.  Must be one of `manual`, `ours`, `theirs`, `union`, or
    - 	`cat_sort_uniq`.  Defaults to `manual`.  See "NOTES MERGE STRATEGIES"
    --	section of linkgit:git-notes[1] for more information on each strategy.
    -+	section
    -+ifdef::git-notes[above]
    -+ifndef::git-notes[of linkgit:git-notes[1]]
    -+	for more information on each strategy.
    + ## builtin/submodule--helper.c ##
    +@@ builtin/submodule--helper.c: static int module_clone(int argc, const char **argv, const char *prefix)
    + 	return 0;
    + }
      
    - notes.<name>.mergeStrategy::
    - 	Which merge strategy to choose when doing a notes merge into
    - 	refs/notes/<name>.  This overrides the more general
    --	"notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section in
    --	linkgit:git-notes[1] for more information on the available strategies.
    -+	"notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section
    -+ifdef::git-notes[above]
    -+ifndef::git-notes[in linkgit:git-notes[1]]
    -+	for more information on the available strategies.
    +-static void determine_submodule_update_strategy(struct repository *r,
    +-						int just_cloned,
    +-						const char *path,
    +-						enum submodule_update_type update,
    +-						struct submodule_update_strategy *out)
    ++static int determine_submodule_update_strategy(struct repository *r,
    ++					       int just_cloned,
    ++					       const char *path,
    ++					       enum submodule_update_type update,
    ++					       struct submodule_update_strategy *out)
    + {
    + 	const struct submodule *sub = submodule_from_path(r, null_oid(), path);
    + 	char *key;
    + 	const char *val;
    ++	int ret;
      
    - notes.displayRef::
    --	The (fully qualified) refname from which to show notes when
    --	showing commit messages.  The value of this variable can be set
    --	to a glob, in which case notes from all matching refs will be
    --	shown.  You may also specify this configuration variable
    --	several times.  A warning will be issued for refs that do not
    --	exist, but a glob that does not match any refs is silently
    --	ignored.
    --+
    --This setting can be overridden with the `GIT_NOTES_DISPLAY_REF`
    --environment variable, which must be a colon separated list of refs or
    --globs.
    --+
    --The effective value of "core.notesRef" (possibly overridden by
    --GIT_NOTES_REF) is also implicitly added to the list of refs to be
    --displayed.
    -+	Which ref (or refs, if a glob or specified more than once), in
    -+	addition to the default set by `core.notesRef` or
    -+	`GIT_NOTES_REF`, to read notes from when showing commit
    -+	messages with the 'git log' family of commands.
    -+	This setting can be overridden on the command line or by the
    -+	`GIT_NOTES_DISPLAY_REF` environment variable.
    -+	See linkgit:git-log[1].
    + 	key = xstrfmt("submodule.%s.update", sub->name);
      
    - notes.rewrite.<command>::
    - 	When rewriting commits with <command> (currently `amend` or
    --	`rebase`) and this variable is set to `true`, Git
    --	automatically copies your notes from the original to the
    --	rewritten commit.  Defaults to `true`, but see
    --	"notes.rewriteRef" below.
    -+	`rebase`), if this variable is `false`, git will not copy
    -+	notes from the original to the rewritten commit.  Defaults to
    -+	`true`.  See also "`notes.rewriteRef`" below.
    -++
    -+This setting can be overridden by the `GIT_NOTES_REWRITE_REF`
    -+environment variable.
    + 	if (update) {
    + 		out->type = update;
    + 	} else if (!repo_config_get_string_tmp(r, key, &val)) {
    +-		if (parse_submodule_update_strategy(val, out) < 0)
    +-			die(_("Invalid update mode '%s' configured for submodule path '%s'"),
    +-				val, path);
    ++		if (parse_submodule_update_strategy(val, out) < 0) {
    ++			ret = die_message(_("Invalid update mode '%s' configured for submodule path '%s'"),
    ++					  val, path);
    ++			goto cleanup;
    ++		}
    + 	} else if (sub->update_strategy.type != SM_UPDATE_UNSPECIFIED) {
    + 		if (sub->update_strategy.type == SM_UPDATE_COMMAND)
    + 			BUG("how did we read update = !command from .gitmodules?");
    +@@ builtin/submodule--helper.c: static void determine_submodule_update_strategy(struct repository *r,
    + 	     out->type == SM_UPDATE_NONE))
    + 		out->type = SM_UPDATE_CHECKOUT;
      
    - notes.rewriteMode::
    --	When copying notes during a rewrite (see the
    --	"notes.rewrite.<command>" option), determines what to do if
    --	the target commit already has a note.  Must be one of
    --	`overwrite`, `concatenate`, `cat_sort_uniq`, or `ignore`.
    --	Defaults to `concatenate`.
    -+	When copying notes during a rewrite, what to do if the target
    -+	commit already has a note.  Must be one of `overwrite`,
    -+	`concatenate`, `cat_sort_uniq`, or `ignore`.  Defaults to
    -+	`concatenate`.
    - +
    - This setting can be overridden with the `GIT_NOTES_REWRITE_MODE`
    - environment variable.
    ++	ret = 0;
    ++cleanup:
    + 	free(key);
    ++	return ret;
    + }
      
    - notes.rewriteRef::
    - 	When copying notes during a rewrite, specifies the (fully
    --	qualified) ref whose notes should be copied.  The ref may be a
    --	glob, in which case notes in all matching refs will be copied.
    --	You may also specify this configuration several times.
    -+	qualified) ref whose notes should be copied.  May be a glob,
    -+	in which case notes in all matching refs will be copied.  You
    -+	may also specify this configuration several times.
    - +
    - Does not have a default value; you must configure this variable to
    - enable note rewriting.  Set it to `refs/notes/commits` to enable
    - rewriting for the default commit notes.
    - +
    --This setting can be overridden with the `GIT_NOTES_REWRITE_REF`
    --environment variable, which must be a colon separated list of refs or
    --globs.
    -+Can be overridden with the `GIT_NOTES_REWRITE_REF` environment variable.
    -
    - ## Documentation/git-notes.txt ##
    -@@ Documentation/git-notes.txt: core.notesRef::
    - 	This setting can be overridden through the environment and
    - 	command line.
    + struct update_clone_data {
    +@@ builtin/submodule--helper.c: static void update_data_to_args(const struct update_data *update_data,
    + static int update_submodule(struct update_data *update_data,
    + 			    int *must_die_on_failure)
    + {
    ++	int ret;
    ++
    + 	ensure_core_worktree(update_data->sm_path);
      
    --notes.mergeStrategy::
    --	Which merge strategy to choose by default when resolving notes
    --	conflicts.  Must be one of `manual`, `ours`, `theirs`, `union`, or
    --	`cat_sort_uniq`.  Defaults to `manual`.  See "NOTES MERGE STRATEGIES"
    --	section above for more information on each strategy.
    --+
    --This setting can be overridden by passing the `--strategy` option.
    --
    --notes.<name>.mergeStrategy::
    --	Which merge strategy to choose when doing a notes merge into
    --	refs/notes/<name>.  This overrides the more general
    --	"notes.mergeStrategy".  See the "NOTES MERGE STRATEGIES" section above
    --	for more information on each available strategy.
    --
    --notes.displayRef::
    --	Which ref (or refs, if a glob or specified more than once), in
    --	addition to the default set by `core.notesRef` or
    --	`GIT_NOTES_REF`, to read notes from when showing commit
    --	messages with the 'git log' family of commands.
    --	This setting can be overridden on the command line or by the
    --	`GIT_NOTES_DISPLAY_REF` environment variable.
    --	See linkgit:git-log[1].
    --
    --notes.rewrite.<command>::
    --	When rewriting commits with <command> (currently `amend` or
    --	`rebase`), if this variable is `false`, git will not copy
    --	notes from the original to the rewritten commit.  Defaults to
    --	`true`.  See also "`notes.rewriteRef`" below.
    --+
    --This setting can be overridden by the `GIT_NOTES_REWRITE_REF`
    --environment variable.
    --
    --notes.rewriteMode::
    --	When copying notes during a rewrite, what to do if the target
    --	commit already has a note.  Must be one of `overwrite`,
    --	`concatenate`, `cat_sort_uniq`, or `ignore`.  Defaults to
    --	`concatenate`.
    --+
    --This setting can be overridden with the `GIT_NOTES_REWRITE_MODE`
    --environment variable.
    --
    --notes.rewriteRef::
    --	When copying notes during a rewrite, specifies the (fully
    --	qualified) ref whose notes should be copied.  May be a glob,
    --	in which case notes in all matching refs will be copied.  You
    --	may also specify this configuration several times.
    --+
    --Does not have a default value; you must configure this variable to
    --enable note rewriting.
    --+
    --Can be overridden with the `GIT_NOTES_REWRITE_REF` environment variable.
    + 	update_data->displaypath = get_submodule_displaypath(
    + 		update_data->sm_path, update_data->prefix);
    + 
    +-	determine_submodule_update_strategy(the_repository, update_data->just_cloned,
    +-					    update_data->sm_path, update_data->update_default,
    +-					    &update_data->update_strategy);
    ++	ret = determine_submodule_update_strategy(the_repository,
    ++						  update_data->just_cloned,
    ++						  update_data->sm_path,
    ++						  update_data->update_default,
    ++						  &update_data->update_strategy);
    ++	if (ret) {
    ++		*must_die_on_failure = 1;
    ++		return ret;
    ++	}
    + 
    + 	if (update_data->just_cloned)
    + 		oidcpy(&update_data->suboid, null_oid());
    +@@ builtin/submodule--helper.c: static int update_submodule(struct update_data *update_data,
    + 	}
    + 
    + 	if (!oideq(&update_data->oid, &update_data->suboid) || update_data->force) {
    +-		int ret;
     -
    -+:git-notes: 1
    -+include::config/notes.txt[]
    + 		ret = run_update_procedure(update_data, must_die_on_failure);
    + 		if (*must_die_on_failure)
    + 			return ret;
    +@@ builtin/submodule--helper.c: static int update_submodule(struct update_data *update_data,
    + 	if (update_data->recursive) {
    + 		struct child_process cp = CHILD_PROCESS_INIT;
    + 		struct update_data next = *update_data;
    +-		int ret;
      
    - ENVIRONMENT
    - -----------
    + 		next.prefix = NULL;
    + 		oidcpy(&next.oid, null_oid());
 -:  ----------- > 27:  2b066190739 submodule--helper: libify "must_die_on_failure" code paths
 -:  ----------- > 28:  72e3cdf6543 submodule--helper update: don't override 'checkout' exit code
 -:  ----------- > 29:  a283ae61e6e submodule--helper: libify "must_die_on_failure" code paths (for die)
 -:  ----------- > 30:  ba5c170c3a4 submodule--helper: check repo{_submodule,}_init() return values
 -:  ----------- > 31:  a0d71b4e8bb submodule--helper: libify more "die" paths for module_update()
 -:  ----------- > 32:  3254a8ca6eb submodule--helper: libify even more "die" paths for module_update()
 -:  ----------- > 33:  1e38bfa7f95 submodule--helper: fix bad config API usage
-- 
2.37.3.1420.g76f8a3d556c

