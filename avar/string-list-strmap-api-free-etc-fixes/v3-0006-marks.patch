From 1d398de99f7188137a2c4b1735153487cebe30c7 Mon Sep 17 00:00:00 2001
Message-Id: <RFC-patch-v3-6.9-1d398de99f7-20210806T173953Z-avarab@gmail.com>
In-Reply-To: <RFC-cover-v3-0.9-00000000000-20210806T173953Z-avarab@gmail.com>
References: <20210805230321.532218-1-mathstuf@gmail.com>
	<RFC-cover-v3-0.9-00000000000-20210806T173953Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Thu, 5 Aug 2021 15:41:48 +0200
Subject: [RFCPATCH v3 6/9] marks

---
 bisect.c           |  5 ++---
 builtin/log.c      | 22 +++++++++++-----------
 builtin/remote.c   | 34 ++++++++++++++++++++--------------
 builtin/shortlog.c |  2 +-
 mailmap.c          |  6 ++----
 merge-recursive.c  |  2 +-
 remote-curl.c      |  4 ++--
 wt-status.c        |  6 +++---
 8 files changed, 42 insertions(+), 39 deletions(-)

diff --git a/bisect.c b/bisect.c
index af2863d044b..571d68edd89 100644
--- a/bisect.c
+++ b/bisect.c
@@ -1161,11 +1161,10 @@ int bisect_clean_state(void)
 	int result = 0;
 
 	/* There may be some refs packed during bisection */
-	struct string_list refs_for_removal = STRING_LIST_INIT_NODUP;
+	struct string_list refs_for_removal = STRING_LIST_INIT_DUP;
 	for_each_ref_in("refs/bisect", mark_for_removal, (void *) &refs_for_removal);
-	string_list_append(&refs_for_removal, xstrdup("BISECT_HEAD"));
+	string_list_append(&refs_for_removal, "BISECT_HEAD");
 	result = delete_refs("bisect: remove", &refs_for_removal, REF_NO_DEREF);
-	refs_for_removal.strdup_strings = 1;
 	string_list_clear(&refs_for_removal, 0);
 	unlink_or_warn(git_path_bisect_expected_rev());
 	unlink_or_warn(git_path_bisect_ancestors_ok());
diff --git a/builtin/log.c b/builtin/log.c
index 3d7717ba5ca..2842be52d49 100644
--- a/builtin/log.c
+++ b/builtin/log.c
@@ -772,9 +772,10 @@ static struct string_list extra_hdr = STRING_LIST_INIT_NODUP;
 static struct string_list extra_to = STRING_LIST_INIT_NODUP;
 static struct string_list extra_cc = STRING_LIST_INIT_NODUP;
 
-static void add_header(const char *value)
+static void add_header(const char *orig_value)
 {
 	struct string_list_item *item;
+	char *value = xstrdup(orig_value);
 	int len = strlen(value);
 	while (len && value[len - 1] == '\n')
 		len--;
@@ -789,6 +790,8 @@ static void add_header(const char *value)
 		item = string_list_append(&extra_hdr, value);
 	}
 
+	/* For freeing with string_list_clear_util() */
+	item->util = value;
 	item->string[len] = '\0';
 }
 
@@ -851,7 +854,7 @@ static int git_format_config(const char *var, const char *value, void *cb)
 	if (!strcmp(var, "format.headers")) {
 		if (!value)
 			die(_("format.headers without value"));
-		add_header(value);
+		add_header(xstrdup(value));
 		return 0;
 	}
 	if (!strcmp(var, "format.suffix"))
@@ -1400,9 +1403,9 @@ static int inline_callback(const struct option *opt, const char *arg, int unset)
 static int header_callback(const struct option *opt, const char *arg, int unset)
 {
 	if (unset) {
-		string_list_clear(&extra_hdr, 0);
-		string_list_clear(&extra_to, 0);
-		string_list_clear(&extra_cc, 0);
+		string_list_clear_util(&extra_hdr);
+		string_list_clear_util(&extra_to);
+		string_list_clear_util(&extra_cc);
 	} else {
 		add_header(arg);
 	}
@@ -1830,9 +1833,6 @@ int cmd_format_patch(int argc, const char **argv, const char *prefix)
 		OPT_END()
 	};
 
-	extra_hdr.strdup_strings = 1;
-	extra_to.strdup_strings = 1;
-	extra_cc.strdup_strings = 1;
 	init_log_defaults();
 	init_display_notes(&notes_opt);
 	git_config(git_format_config, NULL);
@@ -2229,9 +2229,9 @@ int cmd_format_patch(int argc, const char **argv, const char *prefix)
 	stop_progress(&progress);
 	free(list);
 	free(branch_name);
-	string_list_clear(&extra_to, 0);
-	string_list_clear(&extra_cc, 0);
-	string_list_clear(&extra_hdr, 0);
+	string_list_clear_util(&extra_to);
+	string_list_clear_util(&extra_cc);
+	string_list_clear_util(&extra_hdr);
 	if (ignore_if_in_upstream)
 		free_patch_ids(&ids);
 
diff --git a/builtin/remote.c b/builtin/remote.c
index b187b429516..ec1dbd49f71 100644
--- a/builtin/remote.c
+++ b/builtin/remote.c
@@ -340,10 +340,24 @@ static void read_branches(void)
 
 struct ref_states {
 	struct remote *remote;
-	struct string_list new_refs, stale, tracked, heads, push;
+
+	struct string_list new_refs;
+	struct string_list stale;
+	struct string_list tracked;
+	struct string_list heads;
+	struct string_list push;
+
 	int queried;
 };
 
+#define REF_STATES_INIT { \
+	.new_refs = STRING_LIST_INIT_DUP, \
+	.stale = STRING_LIST_INIT_DUP, \
+	.tracked = STRING_LIST_INIT_DUP, \
+	.heads = STRING_LIST_INIT_DUP, \
+	.push = STRING_LIST_INIT_DUP, \
+}
+
 static int get_ref_states(const struct ref *remote_refs, struct ref_states *states)
 {
 	struct ref *fetch_map = NULL, **tail = &fetch_map;
@@ -355,9 +369,6 @@ static int get_ref_states(const struct ref *remote_refs, struct ref_states *stat
 			die(_("Could not get fetch map for refspec %s"),
 				states->remote->fetch.raw[i]);
 
-	states->new_refs.strdup_strings = 1;
-	states->tracked.strdup_strings = 1;
-	states->stale.strdup_strings = 1;
 	for (ref = fetch_map; ref; ref = ref->next) {
 		if (!ref->peer_ref || !ref_exists(ref->peer_ref->name))
 			string_list_append(&states->new_refs, abbrev_branch(ref->name));
@@ -406,7 +417,6 @@ static int get_push_ref_states(const struct ref *remote_refs,
 
 	match_push_refs(local_refs, &push_map, &remote->push, MATCH_REFS_NONE);
 
-	states->push.strdup_strings = 1;
 	for (ref = push_map; ref; ref = ref->next) {
 		struct string_list_item *item;
 		struct push_info *info;
@@ -449,7 +459,6 @@ static int get_push_ref_states_noquery(struct ref_states *states)
 	if (remote->mirror)
 		return 0;
 
-	states->push.strdup_strings = 1;
 	if (!remote->push.nr) {
 		item = string_list_append(&states->push, _("(matching)"));
 		info = item->util = xcalloc(1, sizeof(struct push_info));
@@ -483,7 +492,6 @@ static int get_head_names(const struct ref *remote_refs, struct ref_states *stat
 	refspec.force = 0;
 	refspec.pattern = 1;
 	refspec.src = refspec.dst = "refs/heads/*";
-	states->heads.strdup_strings = 1;
 	get_fetch_map(remote_refs, &refspec, &fetch_map_tail, 0);
 	matches = guess_remote_head(find_ref_by_name(remote_refs, "HEAD"),
 				    fetch_map, 1);
@@ -905,7 +913,7 @@ static void clear_push_info(void *util, const char *string)
 {
 	struct push_info *info = util;
 	free(info->dest);
-	free(info);
+	/* note: fixed memleak here */
 }
 
 static void free_remote_ref_states(struct ref_states *states)
@@ -1159,7 +1167,7 @@ static int get_one_entry(struct remote *remote, void *priv)
 		string_list_append(list, remote->name)->util =
 				strbuf_detach(&url_buf, NULL);
 	} else
-		string_list_append(list, remote->name)->util = NULL;
+		string_list_append(list, remote->name);
 	if (remote->pushurl_nr) {
 		url = remote->pushurl;
 		url_nr = remote->pushurl_nr;
@@ -1211,7 +1219,7 @@ static int show(int argc, const char **argv)
 		OPT_BOOL('n', NULL, &no_query, N_("do not query remotes")),
 		OPT_END()
 	};
-	struct ref_states states;
+	struct ref_states states = REF_STATES_INIT;
 	struct string_list info_list = STRING_LIST_INIT_NODUP;
 	struct show_info info;
 
@@ -1333,8 +1341,7 @@ static int set_head(int argc, const char **argv)
 	if (!opt_a && !opt_d && argc == 2) {
 		head_name = xstrdup(argv[1]);
 	} else if (opt_a && !opt_d && argc == 1) {
-		struct ref_states states;
-		memset(&states, 0, sizeof(states));
+		struct ref_states states = REF_STATES_INIT;
 		get_remote_ref_states(argv[0], &states, GET_HEAD_NAMES);
 		if (!states.heads.nr)
 			result |= error(_("Cannot determine remote HEAD"));
@@ -1373,14 +1380,13 @@ static int set_head(int argc, const char **argv)
 static int prune_remote(const char *remote, int dry_run)
 {
 	int result = 0;
-	struct ref_states states;
+	struct ref_states states = REF_STATES_INIT;
 	struct string_list refs_to_prune = STRING_LIST_INIT_NODUP;
 	struct string_list_item *item;
 	const char *dangling_msg = dry_run
 		? _(" %s will become dangling!")
 		: _(" %s has become dangling!");
 
-	memset(&states, 0, sizeof(states));
 	get_remote_ref_states(remote, &states, GET_REF_STATES);
 
 	if (!states.stale.nr) {
diff --git a/builtin/shortlog.c b/builtin/shortlog.c
index 0e6a2ed2b28..adf0a0d244d 100644
--- a/builtin/shortlog.c
+++ b/builtin/shortlog.c
@@ -332,7 +332,7 @@ void shortlog_init(struct shortlog *log)
 
 	read_mailmap(&log->mailmap);
 
-	log->list.strdup_strings = 1;
+	string_list_init_dup(&log->list);
 	log->wrap = DEFAULT_WRAPLEN;
 	log->in1 = DEFAULT_INDENT1;
 	log->in2 = DEFAULT_INDENT2;
diff --git a/mailmap.c b/mailmap.c
index a6bbaac86dc..517c91d187a 100644
--- a/mailmap.c
+++ b/mailmap.c
@@ -50,8 +50,7 @@ static void free_mailmap_entry(void *p, const char *s)
 	free(me->name);
 	free(me->email);
 
-	me->namemap.strdup_strings = 1;
-	string_list_clear_func(&me->namemap, free_mailmap_info);
+	string_list_clear_strings_func(&me->namemap, free_mailmap_info);
 }
 
 /*
@@ -248,8 +247,7 @@ int read_mailmap(struct string_list *map)
 void clear_mailmap(struct string_list *map)
 {
 	debug_mm("mailmap: clearing %d entries...\n", map->nr);
-	map->strdup_strings = 1;
-	string_list_clear_func(map, free_mailmap_entry);
+	string_list_clear_strings_func(map, free_mailmap_entry);
 	debug_mm("mailmap: cleared\n");
 }
 
diff --git a/merge-recursive.c b/merge-recursive.c
index fdd01b735ee..6a3b8179582 100644
--- a/merge-recursive.c
+++ b/merge-recursive.c
@@ -516,7 +516,7 @@ static struct string_list *get_unmerged(struct index_state *istate)
 	struct string_list *unmerged = xcalloc(1, sizeof(struct string_list));
 	int i;
 
-	unmerged->strdup_strings = 1;
+	string_list_init_dup(unmerged);
 
 	/* TODO: audit for interaction with sparse-index. */
 	ensure_full_index(istate);
diff --git a/remote-curl.c b/remote-curl.c
index 6c320d57045..f0c4a5adfa5 100644
--- a/remote-curl.c
+++ b/remote-curl.c
@@ -1485,8 +1485,8 @@ int cmd_main(int argc, const char **argv)
 	options.verbosity = 1;
 	options.progress = !!isatty(2);
 	options.thin = 1;
-	string_list_init(&options.deepen_not, 1);
-	string_list_init(&options.push_options, 1);
+	string_list_init_dup(&options.deepen_not);
+	string_list_init_dup(&options.push_options);
 
 	/*
 	 * Just report "remote-curl" here (folding all the various aliases
diff --git a/wt-status.c b/wt-status.c
index eaed30eafba..88cefe71910 100644
--- a/wt-status.c
+++ b/wt-status.c
@@ -135,9 +135,9 @@ void wt_status_prepare(struct repository *r, struct wt_status *s)
 	s->reference = "HEAD";
 	s->fp = stdout;
 	s->index_file = get_index_file();
-	s->change.strdup_strings = 1;
-	s->untracked.strdup_strings = 1;
-	s->ignored.strdup_strings = 1;
+	string_list_init_dup(&s->change);
+	string_list_init_dup(&s->untracked);
+	string_list_init_dup(&s->ignored);
 	s->show_branch = -1;  /* unspecified */
 	s->show_stash = 0;
 	s->ahead_behind_flags = AHEAD_BEHIND_UNSPECIFIED;
-- 
2.33.0.rc0.646.g806d90da684

