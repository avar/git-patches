From d3bb46754d3c83e81545138b10bc64e991296960 Mon Sep 17 00:00:00 2001
Message-Id: <RFC-patch-v3-4.9-d3bb46754d3-20210806T173953Z-avarab@gmail.com>
In-Reply-To: <RFC-cover-v3-0.9-00000000000-20210806T173953Z-avarab@gmail.com>
References: <20210805230321.532218-1-mathstuf@gmail.com>
	<RFC-cover-v3-0.9-00000000000-20210806T173953Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Thu, 5 Aug 2021 15:42:41 +0200
Subject: [RFCPATCH v3 4/9] better string list API

---
 merge-ort.c       | 11 +++-------
 merge-recursive.c |  8 ++-----
 notes.c           |  6 +----
 string-list.c     | 52 +++++++++++++++++++++++++++----------------
 string-list.h     | 56 +++++++++++++++++++++++++++++++++++++++++++++--
 5 files changed, 93 insertions(+), 40 deletions(-)

diff --git a/merge-ort.c b/merge-ort.c
index 0eb9e45d81e..f97452aa345 100644
--- a/merge-ort.c
+++ b/merge-ort.c
@@ -544,15 +544,10 @@ static void clear_or_reinit_internal_opts(struct merge_options_internal *opti,
 	strmap_func(&opti->conflicted, 0);
 
 	/*
-	 * opti->paths_to_free is similar to opti->paths; we created it with
-	 * strdup_strings = 0 to avoid making _another_ copy of the fullpath
-	 * but now that we've used it and have no other references to these
-	 * strings, it is time to deallocate them.  We do so by temporarily
-	 * setting strdup_strings to 1.
+	 * opti->paths_to_free is similar to opti->paths; it's memory
+	 * we borrowed and need to free with string_list_clear_strings().
 	 */
-	opti->paths_to_free.strdup_strings = 1;
-	string_list_clear(&opti->paths_to_free, 0);
-	opti->paths_to_free.strdup_strings = 0;
+	string_list_clear_strings(&opti->paths_to_free, 0);
 
 	if (opti->attr_index.cache_nr) /* true iff opt->renormalize */
 		discard_index(&opti->attr_index);
diff --git a/merge-recursive.c b/merge-recursive.c
index 8d343bb53bc..fdd01b735ee 100644
--- a/merge-recursive.c
+++ b/merge-recursive.c
@@ -2331,13 +2331,9 @@ static struct hashmap *get_directory_renames(struct diff_queue_struct *pairs)
 		/*
 		 * The relevant directory sub-portion of the original full
 		 * filepaths were xstrndup'ed before inserting into
-		 * possible_new_dirs, and instead of manually iterating the
-		 * list and free'ing each, just lie and tell
-		 * possible_new_dirs that it did the strdup'ing so that it
-		 * will free them for us.
+		 * possible_new_dirs.
 		 */
-		entry->possible_new_dirs.strdup_strings = 1;
-		string_list_clear(&entry->possible_new_dirs, 1);
+		string_list_clear_strings(&entry->possible_new_dirs, 1);
 	}
 
 	return dir_renames;
diff --git a/notes.c b/notes.c
index f87dac40684..a043484bb60 100644
--- a/notes.c
+++ b/notes.c
@@ -1072,11 +1072,7 @@ void enable_ref_display_notes(struct display_notes_opt *opt, int *show_notes,
 void disable_display_notes(struct display_notes_opt *opt, int *show_notes)
 {
 	opt->use_default_notes = -1;
-	/* we have been strdup'ing ourselves, so trick
-	 * string_list into free()ing strings */
-	opt->extra_notes_refs.strdup_strings = 1;
-	string_list_clear(&opt->extra_notes_refs, 0);
-	opt->extra_notes_refs.strdup_strings = 0;
+	string_list_clear_strings(&opt->extra_notes_refs, 0);
 	*show_notes = 0;
 }
 
diff --git a/string-list.c b/string-list.c
index d870dcd51fe..f1ac93d5b9f 100644
--- a/string-list.c
+++ b/string-list.c
@@ -188,11 +188,17 @@ void string_list_remove_empty_items(struct string_list *list, int free_util)
 	filter_string_list(list, free_util, item_is_not_empty, NULL);
 }
 
-void string_list_clear(struct string_list *list, int free_util)
+static void string_list_clear_1(struct string_list *list, int free_strings,
+				int free_util,
+				string_list_clear_func_t clearfunc)
 {
 	if (list->items) {
 		int i;
-		if (list->strdup_strings) {
+		if (clearfunc) {
+			for (i = 0; i < list->nr; i++)
+				clearfunc(list->items[i].util, list->items[i].string);
+		}
+		if (free_strings) {
 			for (i = 0; i < list->nr; i++)
 				free(list->items[i].string);
 		}
@@ -200,28 +206,36 @@ void string_list_clear(struct string_list *list, int free_util)
 			for (i = 0; i < list->nr; i++)
 				free(list->items[i].util);
 		}
-		free(list->items);
+		FREE_AND_NULL(list->items);
 	}
-	list->items = NULL;
 	list->nr = list->alloc = 0;
 }
 
-void string_list_clear_func(struct string_list *list, string_list_clear_func_t clearfunc)
+void string_list_clear(struct string_list *list, int free_util)
 {
-	if (list->items) {
-		int i;
-		if (clearfunc) {
-			for (i = 0; i < list->nr; i++)
-				clearfunc(list->items[i].util, list->items[i].string);
-		}
-		if (list->strdup_strings) {
-			for (i = 0; i < list->nr; i++)
-				free(list->items[i].string);
-		}
-		free(list->items);
-	}
-	list->items = NULL;
-	list->nr = list->alloc = 0;
+	string_list_clear_1(list, list->strdup_strings, free_util, NULL);
+}
+
+void string_list_clear_util(struct string_list *list)
+{
+	string_list_clear_1(list, 0, 1, NULL);
+}
+
+void string_list_clear_strings(struct string_list *list, int free_util)
+{
+	string_list_clear_1(list, 1, free_util, NULL);
+}
+
+void string_list_clear_func(struct string_list *list,
+			    string_list_clear_func_t clearfunc)
+{
+	string_list_clear_1(list, list->strdup_strings, 0, clearfunc);
+}
+
+void string_list_clear_strings_func(struct string_list *list,
+				    string_list_clear_func_t clearfunc)
+{
+	string_list_clear_1(list, 1, 0, clearfunc);
 }
 
 struct string_list_item *string_list_append_nodup(struct string_list *list,
diff --git a/string-list.h b/string-list.h
index 39b35cce91c..9190c1e0d2e 100644
--- a/string-list.h
+++ b/string-list.h
@@ -141,14 +141,66 @@ void filter_string_list(struct string_list *list, int free_util,
  */
 void string_list_clear(struct string_list *list, int free_util);
 
+/**
+ * Free a string list initialized without `strdup_strings = 1`, but
+ * where we also want to free() the strings. You usually want to just
+ * use string_list_clear() after initializing with
+ * `STRING_LIST_INIT_DUP' instead.
+ *
+ * Useful to free e.g. a string list whose strings came from
+ * strbuf_detach() or other memory that we didn't initially allocate
+ * on the heap, but which we now manage.
+ *
+ * Under the hood this is identical in behavior to temporarily setting
+ * `strbuf_strings` to `1` for the duration of this function call, but
+ * without the verbosity of performing that dance yourself.
+ */
+void string_list_clear_strings(struct string_list *list, int free_util);
+
+/**
+ * Clear only the `util` pointer, but not the `string`, even if
+ * `strdup_strings = 1` is set. Useful for the idiom of doing e.g.:
+ *
+ *    string_list_append(&list, str + offs)->util = str;
+ *
+ * Where we add a string at some offset, own the string (so
+ * effectively `strdup_strings = `), but can't free() the string
+ * itself at the changed offset, but need to free the original data in
+ * `util` instead.
+ */
+void string_list_clear_util(struct string_list *list);
+
 /**
  * Callback type for `string_list_clear_func`.  The string associated
  * with the util pointer is passed as the second argument
  */
 typedef void (*string_list_clear_func_t)(void *p, const char *str);
 
-/** Call a custom clear function on each util pointer */
-void string_list_clear_func(struct string_list *list, string_list_clear_func_t clearfunc);
+/**
+ * Like string_list_clear() except that it first calls a custom clear
+ * function on each util pointer.
+ *
+ * We guarantee that the `clearfunc` will be called on all util
+ * pointers in a list before we proceed to free the first string or
+ * util pointer, i.e. should you need to it's OK to peek at other util
+ * items in the list itself, or to otherwise iterate it from within
+ * the `clearfunc`.
+ *
+ * You do not need to free() the passed-in util pointer itself,
+ * i.e. after calling all `clearfunc` this has the seme behavior as
+ * string_list_clear() called with with `free_util = 1`.
+ */
+void string_list_clear_func(struct string_list *list,
+			    string_list_clear_func_t clearfunc);
+
+/**
+ * Like string_list_clear_func() but free the strings too, using the
+ * same dance as described for string_list_clear_strings()
+ * above. You'll usually want to initialize with
+ * `STRING_LIST_INIT_DUP` and use string_list_clear_strings() instead.
+ */
+void string_list_clear_strings_func(struct string_list *list,
+				    string_list_clear_func_t clearfunc);
 
 /**
  * Apply `func` to each item. If `func` returns nonzero, the
-- 
2.33.0.rc0.646.g806d90da684

