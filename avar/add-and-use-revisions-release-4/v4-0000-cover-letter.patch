From 6d0f8278d2fb1c8596e4d8e86406956f5046d063 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v4-00.27-00000000000-20220331T001205Z-avarab@gmail.com>
In-Reply-To: <cover-v3-00.27-00000000000-20220325T171340Z-avarab@gmail.com>
References: <cover-v3-00.27-00000000000-20220325T171340Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 31 Mar 2022 02:12:05 +0200
Subject: [PATCH v4 00/27] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (27):
  t/helper/test-fast-rebase.c: don't leak "struct strbuf"
  blame: use "goto cleanup" for cleanup_scoreboard()
  string_list API users: use string_list_init_{no,}dup
  format-patch: don't leak "extra_headers" or "ref_message_ids"
  revision.[ch]: split freeing of revs->commit into a function
  revision.[ch]: provide and start using a release_revisions()
  revisions API users: add straightforward release_revisions()
  revision.[ch]: document and move code declared around "init"
  revisions API users: use release_revisions() needing REV_INFO_INIT
  stash: always have the owner of "stash_info" free it
  revisions API users: add "goto cleanup" for release_revisions()
  revisions API users: use release_revisions() in http-push.c
  revisions API users: use release_revisions() in builtin/log.c
  revisions API users: use release_revisions() with UNLEAK()
  revisions API users: use release_revisions() for "prune_data" users
  revisions API: have release_revisions() release "commits"
  revisions API: have release_revisions() release "mailmap"
  revisions API: have release_revisions() release "cmdline"
  revisions API: have release_revisions() release "filter"
  revisions API: have release_revisions() release "grep_filter"
  revisions API: have release_revisions() release "prune_data"
  revisions API: clear "boundary_commits" in release_revisions()
  revisions API: release "reflog_info" in release revisions()
  revisions API: call diff_free(&revs->pruning) in revisions_release()
  revisions API: have release_revisions() release "date_mode"
  revisions API: have release_revisions() release "topo_walk_info"
  revisions API: add a TODO for diff_free(&revs->diffopt)

 add-interactive.c                          |  3 +-
 bisect.c                                   | 20 ++++--
 builtin/add.c                              |  3 +-
 builtin/am.c                               |  3 +
 builtin/bisect--helper.c                   |  2 +
 builtin/blame.c                            |  4 +-
 builtin/checkout.c                         |  3 +-
 builtin/commit.c                           |  6 +-
 builtin/describe.c                         |  2 +
 builtin/diff-files.c                       |  8 ++-
 builtin/diff-index.c                       |  5 +-
 builtin/diff.c                             |  2 +-
 builtin/fast-export.c                      |  1 +
 builtin/log.c                              | 36 ++++++----
 builtin/merge.c                            |  2 +
 builtin/pack-objects.c                     |  2 +
 builtin/prune.c                            |  1 +
 builtin/reflog.c                           |  1 +
 builtin/rev-list.c                         | 19 ++++--
 builtin/shortlog.c                         |  8 ++-
 builtin/stash.c                            | 77 +++++++++++-----------
 builtin/submodule--helper.c                | 14 ++--
 bundle.c                                   | 12 ++--
 diff-lib.c                                 |  8 ++-
 fmt-merge-msg.c                            |  1 +
 http-push.c                                |  3 +-
 merge-ort.c                                |  1 +
 merge-recursive.c                          |  5 +-
 midx.c                                     |  1 +
 pack-bitmap-write.c                        |  1 +
 range-diff.c                               |  2 +-
 ref-filter.c                               |  1 +
 reflog-walk.c                              | 24 ++++++-
 reflog-walk.h                              |  1 +
 remote.c                                   |  1 +
 revision.c                                 | 68 ++++++++++++++++---
 revision.h                                 | 65 +++++++++++-------
 sequencer.c                                | 26 ++++++--
 shallow.c                                  |  1 +
 submodule.c                                |  5 +-
 t/helper/test-fast-rebase.c                | 23 +++++--
 t/helper/test-revision-walking.c           |  1 +
 t/lib-git-svn.sh                           |  4 ++
 t/t0056-git-C.sh                           |  1 +
 t/t0062-revision-walking.sh                |  1 +
 t/t0100-previous.sh                        |  1 +
 t/t0101-at-syntax.sh                       |  2 +
 t/t1001-read-tree-m-2way.sh                |  1 +
 t/t1002-read-tree-m-u-2way.sh              |  1 +
 t/t1060-object-corruption.sh               |  2 +
 t/t1401-symbolic-ref.sh                    |  2 +
 t/t1411-reflog-show.sh                     |  1 +
 t/t1412-reflog-loop.sh                     |  2 +
 t/t1415-worktree-refs.sh                   |  1 +
 t/t2015-checkout-unborn.sh                 |  1 +
 t/t2200-add-update.sh                      |  1 +
 t/t3302-notes-index-expensive.sh           |  1 +
 t/t3303-notes-subtrees.sh                  |  1 +
 t/t3305-notes-fanout.sh                    |  1 +
 t/t3408-rebase-multi-line.sh               |  1 +
 t/t4021-format-patch-numbered.sh           |  1 +
 t/t4027-diff-submodule.sh                  |  1 +
 t/t4028-format-patch-mime-headers.sh       |  2 +
 t/t4036-format-patch-signer-mime.sh        |  1 +
 t/t4039-diff-assume-unchanged.sh           |  1 +
 t/t4055-diff-context.sh                    |  1 +
 t/t4066-diff-emit-delay.sh                 |  1 +
 t/t4122-apply-symlink-inside.sh            |  1 +
 t/t4126-apply-empty.sh                     |  1 -
 t/t4128-apply-root.sh                      |  1 +
 t/t4206-log-follow-harder-copies.sh        |  2 +
 t/t4207-log-decoration-colors.sh           |  1 +
 t/t4212-log-corrupt.sh                     |  1 +
 t/t5301-sliding-window.sh                  |  2 +
 t/t5313-pack-bounds-checks.sh              |  2 +
 t/t5316-pack-delta-depth.sh                |  2 +
 t/t5320-delta-islands.sh                   |  2 +
 t/t5322-pack-objects-sparse.sh             |  1 +
 t/t5506-remote-groups.sh                   |  1 +
 t/t5513-fetch-track.sh                     |  1 +
 t/t5515-fetch-merge-logic.sh               |  1 +
 t/t5518-fetch-exit-status.sh               |  1 +
 t/t5532-fetch-proxy.sh                     |  2 +
 t/t5600-clone-fail-cleanup.sh              |  1 +
 t/t5900-repo-selection.sh                  |  2 +
 t/t6002-rev-list-bisect.sh                 |  1 +
 t/t6003-rev-list-topo-order.sh             |  1 +
 t/t6005-rev-list-count.sh                  |  1 +
 t/t6018-rev-list-glob.sh                   |  1 +
 t/t6100-rev-list-in-order.sh               |  1 +
 t/t6101-rev-parse-parents.sh               |  1 +
 t/t6110-rev-list-sparse.sh                 |  1 +
 t/t6114-keep-packs.sh                      |  2 +
 t/t6131-pathspec-icase.sh                  |  2 +
 t/t7008-filter-branch-null-sha1.sh         |  1 +
 t/t7702-repack-cyclic-alternate.sh         |  2 +
 t/t9001-send-email.sh                      |  1 +
 t/t9100-git-svn-basic.sh                   |  1 +
 t/t9101-git-svn-props.sh                   |  2 +
 t/t9104-git-svn-follow-parent.sh           |  2 +
 t/t9106-git-svn-commit-diff-clobber.sh     |  2 +
 t/t9115-git-svn-dcommit-funky-renames.sh   |  1 +
 t/t9116-git-svn-log.sh                     |  1 +
 t/t9122-git-svn-author.sh                  |  2 +
 t/t9127-git-svn-partial-rebuild.sh         |  1 +
 t/t9129-git-svn-i18n-commitencoding.sh     |  1 +
 t/t9132-git-svn-broken-symlink.sh          |  1 +
 t/t9139-git-svn-non-utf8-commitencoding.sh |  1 +
 t/t9146-git-svn-empty-dirs.sh              |  2 +
 t/t9148-git-svn-propset.sh                 |  1 +
 t/t9160-git-svn-preserve-empty-dirs.sh     |  1 +
 t/t9162-git-svn-dcommit-interactive.sh     |  2 +
 t/t9164-git-svn-dcommit-concurrent.sh      |  2 +
 t/t9501-gitweb-standalone-http-status.sh   |  1 +
 wt-status.c                                | 15 +++--
 115 files changed, 436 insertions(+), 148 deletions(-)

Range-diff against v3:
 1:  7c8298f564f =  1:  b45b0b3dfb0 t/helper/test-fast-rebase.c: don't leak "struct strbuf"
 2:  515bacc8f27 =  2:  d7d6d436f84 blame: use "goto cleanup" for cleanup_scoreboard()
 3:  58b59542c2b =  3:  e483256ee95 string_list API users: use string_list_init_{no,}dup
 4:  71495dfd073 =  4:  c5910074590 format-patch: don't leak "extra_headers" or "ref_message_ids"
 5:  12fb45f02c1 =  5:  80d1280e491 revision.[ch]: split freeing of revs->commit into a function
 6:  1e93a60d81a !  6:  17bd1f1cc66 revision.[ch]: provide and start using a release_revisions()
    @@ revision.h: void repo_init_revisions(struct repository *r,
      		    struct setup_revision_opt *);
      
     +/**
    -+ * Free data allocated in a "struct rev_info" after it's been setup
    -+ * with repo_init_revisions() and setup_revisions().
    ++ * Free data allocated in a "struct rev_info" after it's been
    ++ * initialized with repo_init_revisions().
     + */
     +void release_revisions(struct rev_info *revs);
     +
 7:  c4fc1c98e7b !  7:  bd6a3d62a78 revisions API users: add straightforward release_revisions()
    @@ submodule.c: static void collect_changed_submodules(struct repository *r,
     +	release_revisions(&rev);
      }
      
    - static void free_submodules_oids(struct string_list *submodules)
    + static void free_submodules_data(struct string_list *submodules)
     
      ## t/helper/test-revision-walking.c ##
     @@ t/helper/test-revision-walking.c: static int run_revision_walk(void)
 9:  5f5c0d26395 !  8:  68ca8cd04bf revisions API users: use release_revisions() in submodule.c edge case
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    revisions API users: use release_revisions() in submodule.c edge case
    +    revision.[ch]: document and move code declared around "init"
     
    -    Use release_revisions() on the the "struct rev_info" in
    -    show_submodule_diff_summary() where we'd otherwise need to do the
    -    equivalent of pre-initializing the "struct rev_info" with "{ 0 }" if
    -    we were going to add it to the cleanup being performed in the "out"
    -    part of the function, let's instead introduce an "out_no_rev" for the
    -    reasons discussed in the preceding commit.
    +    A subsequent commit will add "REV_INFO_INIT" macro adjacent to
    +    repo_init_revisions(), unfortunately between the "struct rev_info"
    +    itself and that function we've added various miscellaneous code
    +    between the two over the years.
     
    -    Doing so for the "goto" on "(!left || !right || !sub)" added in
    -    8e6df65015f (submodule: refactor show_submodule_summary with helper
    -    function, 2016-08-31) would have been straightforward, as in the
    -    preceding commit.
    +    Let's move that code either lower in revision.h, giving it API docs
    +    while we're at it, or in cases where it wasn't public API at all move
    +    it into revision.c No lines of code are changed here, only moved
    +    around. The only changes are the addition of new API comments.
     
    -    But for the case of prepare_submodule_diff_summary() failing it's less
    -    straightforward. Reading the pre-image we could simply retain the
    -    "goto out" if it fails, because we can see that the first thing it
    -    does is call repo_init_revisions().
    +    The "tree_difference" variable could also be declared like this, which
    +    I think would be a lot clearer, but let's leave that for now to keep
    +    this a move-only change:
     
    -    But having a hard reliance on that would be a bit nasty, as we'd
    -    potentially introduce a segfault if the function did some other
    -    initialization first, and early aborted if that failed.
    -
    -    Let's just fold that helper function away into
    -    show_submodule_diff_summary() itself, which was its only user. Now
    -    following the flow of initialization is more obvious, and it's
    -    immediately clear that the "goto out" if prepare_revision_walk()
    -    returns non-zero is safe.
    +            static enum {
    +                    REV_TREE_SAME,
    +                    REV_TREE_NEW, /* Only new files */
    +                    REV_TREE_OLD, /* Only files removed */
    +                    REV_TREE_DIFFERENT, /* Mixed changes */
    +            } tree_difference = REV_TREE_SAME;
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## submodule.c ##
    -@@ submodule.c: void handle_ignore_submodules_arg(struct diff_options *diffopt,
    - 	 */
    - }
    + ## revision.c ##
    +@@ revision.c: static struct commit *one_relevant_parent(const struct rev_info *revs,
    +  *
    +  *   2. We saw anything except REV_TREE_NEW.
    +  */
    ++#define REV_TREE_SAME		0
    ++#define REV_TREE_NEW		1	/* Only new files */
    ++#define REV_TREE_OLD		2	/* Only files removed */
    ++#define REV_TREE_DIFFERENT	3	/* Mixed changes */
    + static int tree_difference = REV_TREE_SAME;
    + 
    + static void file_add_remove(struct diff_options *options,
    +
    + ## revision.h ##
    +@@ revision.h: struct rev_info {
    + 	struct tmp_objdir *remerge_objdir;
    + };
      
    --static int prepare_submodule_diff_summary(struct repository *r, struct rev_info *rev,
    --					  const char *path,
    --					  struct commit *left, struct commit *right,
    --					  struct commit_list *merge_bases)
    --{
    --	struct commit_list *list;
    +-int ref_excluded(struct string_list *, const char *path);
    +-void clear_ref_exclusion(struct string_list **);
    +-void add_ref_exclusion(struct string_list **, const char *exclude);
    +-
    +-
    +-#define REV_TREE_SAME		0
    +-#define REV_TREE_NEW		1	/* Only new files */
    +-#define REV_TREE_OLD		2	/* Only files removed */
    +-#define REV_TREE_DIFFERENT	3	/* Mixed changes */
     -
    --	repo_init_revisions(r, rev, NULL);
    --	setup_revisions(0, NULL, rev, NULL);
    --	rev->left_right = 1;
    --	rev->first_parent_only = 1;
    --	left->object.flags |= SYMMETRIC_LEFT;
    --	add_pending_object(rev, &left->object, path);
    --	add_pending_object(rev, &right->object, path);
    --	for (list = merge_bases; list; list = list->next) {
    --		list->item->object.flags |= UNINTERESTING;
    --		add_pending_object(rev, &list->item->object,
    --			oid_to_hex(&list->item->object.oid));
    --	}
    --	return prepare_revision_walk(rev);
    --}
    +-/* revision.c */
    +-typedef void (*show_early_output_fn_t)(struct rev_info *, struct commit_list *);
    +-extern volatile show_early_output_fn_t show_early_output;
     -
    - static void print_submodule_diff_summary(struct repository *r, struct rev_info *rev, struct diff_options *o)
    - {
    - 	static const char format[] = "  %m %s";
    -@@ submodule.c: void show_submodule_diff_summary(struct diff_options *o, const char *path,
    - 	struct commit *left = NULL, *right = NULL;
    - 	struct commit_list *merge_bases = NULL;
    - 	struct repository *sub;
    -+	struct commit_list *list;
    +-struct setup_revision_opt {
    +-	const char *def;
    +-	void (*tweak)(struct rev_info *, struct setup_revision_opt *);
    +-	unsigned int	assume_dashdash:1,
    +-			allow_exclude_promisor_objects:1;
    +-	unsigned revarg_opt;
    +-};
    +-
    +-#ifndef NO_THE_REPOSITORY_COMPATIBILITY_MACROS
    +-#define init_revisions(revs, prefix) repo_init_revisions(the_repository, revs, prefix)
    +-#endif
    +-
    + /**
    +  * Initialize a rev_info structure with default values. The third parameter may
    +  * be NULL or can be prefix path, and then the `.prefix` variable will be set
    +@@ revision.h: struct setup_revision_opt {
    + void repo_init_revisions(struct repository *r,
    + 			 struct rev_info *revs,
    + 			 const char *prefix);
    ++#ifndef NO_THE_REPOSITORY_COMPATIBILITY_MACROS
    ++#define init_revisions(revs, prefix) repo_init_revisions(the_repository, revs, prefix)
    ++#endif
    + 
    + /**
    +  * Parse revision information, filling in the `rev_info` structure, and
    +@@ revision.h: void repo_init_revisions(struct repository *r,
    +  * head of the argument list. The last parameter is used in case no
    +  * parameter given by the first two arguments.
    +  */
    ++struct setup_revision_opt {
    ++	const char *def;
    ++	void (*tweak)(struct rev_info *, struct setup_revision_opt *);
    ++	unsigned int	assume_dashdash:1,
    ++			allow_exclude_promisor_objects:1;
    ++	unsigned revarg_opt;
    ++};
    + int setup_revisions(int argc, const char **argv, struct rev_info *revs,
    + 		    struct setup_revision_opt *);
    + 
    +@@ revision.h: void mark_trees_uninteresting_sparse(struct repository *r, struct oidset *trees)
      
    - 	sub = open_submodule(path);
    - 	show_submodule_header(o, path, one, two, dirty_submodule,
    -@@ submodule.c: void show_submodule_diff_summary(struct diff_options *o, const char *path,
    - 	 * all the information the user needs.
    - 	 */
    - 	if (!left || !right || !sub)
    --		goto out;
    -+		goto out_no_rev;
    + void show_object_with_name(FILE *, struct object *, const char *);
      
    -+	repo_init_revisions(sub, &rev, NULL);
    -+	setup_revisions(0, NULL, &rev, NULL);
    -+	rev.left_right = 1;
    -+	rev.first_parent_only = 1;
    -+	left->object.flags |= SYMMETRIC_LEFT;
    -+	add_pending_object(&rev, &left->object, path);
    -+	add_pending_object(&rev, &right->object, path);
    -+	for (list = merge_bases; list; list = list->next) {
    -+		list->item->object.flags |= UNINTERESTING;
    -+		add_pending_object(&rev, &list->item->object,
    -+			oid_to_hex(&list->item->object.oid));
    -+	}
    - 	/* Treat revision walker failure the same as missing commits */
    --	if (prepare_submodule_diff_summary(sub, &rev, path, left, right, merge_bases)) {
    -+	if (prepare_revision_walk(&rev)) {
    - 		diff_emit_submodule_error(o, "(revision walker failed)\n");
    - 		goto out;
    - 	}
    -@@ submodule.c: void show_submodule_diff_summary(struct diff_options *o, const char *path,
    - 	print_submodule_diff_summary(sub, &rev, o);
    ++/**
    ++ * Helpers to check if a "struct string_list" item matches wild
    ++ * wildmatch().
    ++ */
    ++int ref_excluded(struct string_list *, const char *path);
    ++void clear_ref_exclusion(struct string_list **);
    ++void add_ref_exclusion(struct string_list **, const char *exclude);
    ++
    + /**
    +  * This function can be used if you want to add commit objects as revision
    +  * information. You can use the `UNINTERESTING` object flag to indicate if
    +@@ revision.h: int rewrite_parents(struct rev_info *revs,
    +  */
    + struct commit_list *get_saved_parents(struct rev_info *revs, const struct commit *commit);
      
    - out:
    -+	release_revisions(&rev);
    -+out_no_rev:
    - 	if (merge_bases)
    - 		free_commit_list(merge_bases);
    - 	clear_commit_marks(left, ~0);
    ++/**
    ++ * Global for the (undocumented) "--early-output" flag for "git log".
    ++ */
    ++typedef void (*show_early_output_fn_t)(struct rev_info *, struct commit_list *);
    ++extern volatile show_early_output_fn_t show_early_output;
    ++
    + #endif
 8:  f8a9443fe6f !  9:  25ba28cc79e revisions API users: add "goto cleanup" for "rev_info" early exit
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    revisions API users: add "goto cleanup" for "rev_info" early exit
    +    revisions API users: use release_revisions() needing REV_INFO_INIT
     
    -    Add release_revisions() in various users of "struct rev_info" that can
    -    mostly use a "goto cleanup" pattern, but also have an early "return"
    -    before we've called repo_init_revisions(). We need to avoid calling
    -    release_revisions() with uninitialized memory.
    +    Use release_revisions() to various users of "struct rev_list" which
    +    need to have their "struct rev_info" zero-initialized before we can
    +    start using it.
     
    -    It would be a lot cleaner to be able to initialize "struct rev_info"
    -    with "{ 0 }" here, or if a "REV_INFO_INIT" existed, we'll hopefully
    -    get around to making the initialization easier in the future (now it
    -    can't be done via a macro).
    -
    -    Until then let's leave a "cleanup_no_rev[s]" in place to document the
    -    intention here. Only status_submodule() in builtin/submodule--helper.c
    -    strictly speaking needs this, the other ones could keep their "return"
    -    for the early exit. But let's have them also use the "goto
    -    cleanup[...]" for consistency, and for the eventual migration to
    -    simpler initialization.
    +    To do this add a stub "REV_INFO_INIT" macro, ideally macro would be
    +    able to fully initialize a "struct rev_info", but all it does is the
    +    equivalent of assigning "{ 0 }" to the struct, the API user will still
    +    need to use repo_init_revisions(). In some future follow-up work we'll
    +    hopefully make REV_INFO_INIT be a "stand-alone" init likke STRBUF_INIT
    +    and other similar macros.
     
         For the bundle.c code see the early exit case added in
         3bbbe467f29 (bundle verify: error out if called without an object
    @@ Commit message
         For the relevant bisect.c code see 45b6370812c (bisect: libify
         `check_good_are_ancestors_of_bad` and its dependents, 2020-02-17).
     
    +    For the submodule.c code see the "goto" on "(!left || !right || !sub)"
    +    added in 8e6df65015f (submodule: refactor show_submodule_summary with
    +    helper function, 2016-08-31).
    +
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## bisect.c ##
    +@@ bisect.c: void read_bisect_terms(const char **read_bad, const char **read_good)
    +  */
    + enum bisect_error bisect_next_all(struct repository *r, const char *prefix)
    + {
    +-	struct rev_info revs;
    ++	struct rev_info revs = REV_INFO_INIT;
    + 	struct commit_list *tried;
    + 	int reaches = 0, all = 0, nr, steps;
    + 	enum bisect_error res = BISECT_OK;
     @@ bisect.c: enum bisect_error bisect_next_all(struct repository *r, const char *prefix)
      
      	res = check_good_are_ancestors_of_bad(r, prefix, no_checkout);
      	if (res)
     -		return res;
    -+		goto cleanup_no_revs;
    ++		goto cleanup;
      
      	bisect_rev_setup(r, &revs, prefix, "%s", "^%s", 1);
      
    @@ bisect.c: enum bisect_error bisect_next_all(struct repository *r, const char *pr
     +	res = bisect_checkout(bisect_rev, no_checkout);
     +cleanup:
     +	release_revisions(&revs);
    -+cleanup_no_revs:
     +	return res;
      }
      
    @@ bisect.c: enum bisect_error bisect_next_all(struct repository *r, const char *pr
     
      ## builtin/submodule--helper.c ##
     @@ builtin/submodule--helper.c: static void status_submodule(const char *path, const struct object_id *ce_oid,
    - 
    - 	if ((CE_STAGEMASK & ce_flags) >> CE_STAGESHIFT) {
    - 		print_status(flags, 'U', path, null_oid(), displaypath);
    --		goto cleanup;
    -+		goto cleanup_no_rev;
    - 	}
    - 
    - 	strbuf_addf(&buf, "%s/.git", path);
    + {
    + 	char *displaypath;
    + 	struct strvec diff_files_args = STRVEC_INIT;
    +-	struct rev_info rev;
    ++	struct rev_info rev = REV_INFO_INIT;
    + 	int diff_files_result;
    + 	struct strbuf buf = STRBUF_INIT;
    + 	const char *git_dir;
     @@ builtin/submodule--helper.c: static void status_submodule(const char *path, const struct object_id *ce_oid,
    - 	    !is_git_directory(git_dir)) {
    - 		print_status(flags, '-', path, ce_oid, displaypath);
    - 		strbuf_release(&buf);
    --		goto cleanup;
    -+		goto cleanup_no_rev;
    - 	}
    - 	strbuf_release(&buf);
    - 
    -@@ builtin/submodule--helper.c: static void status_submodule(const char *path, const struct object_id *ce_oid,
    - 	}
    - 
      cleanup:
    -+	release_revisions(&rev);
    -+cleanup_no_rev:
      	strvec_clear(&diff_files_args);
      	free(displaypath);
    ++	release_revisions(&rev);
      }
    + 
    + static void status_submodule_cb(const struct cache_entry *list_item,
     
      ## bundle.c ##
     @@ bundle.c: int verify_bundle(struct repository *r,
    + 	 * to be verbose about the errors
    + 	 */
    + 	struct string_list *p = &header->prerequisites;
    +-	struct rev_info revs;
    ++	struct rev_info revs = REV_INFO_INIT;
    + 	const char *argv[] = {NULL, "--all", NULL};
    + 	struct commit *commit;
      	int i, ret = 0, req_nr;
      	const char *message = _("Repository lacks these prerequisite commits:");
      
    @@ bundle.c: int verify_bundle(struct repository *r,
     -		return error(_("need a repository to verify a bundle"));
     +	if (!r || !r->objects || !r->objects->odb) {
     +		ret = error(_("need a repository to verify a bundle"));
    -+		goto cleanup_no_revs;
    ++		goto cleanup;
     +	}
      
      	repo_init_revisions(r, &revs, NULL);
    @@ bundle.c: int verify_bundle(struct repository *r,
      			list_refs(r, 0, NULL);
      		}
      	}
    -+
     +cleanup:
     +	release_revisions(&revs);
    -+cleanup_no_revs:
      	return ret;
      }
      
    +
    + ## revision.h ##
    +@@ revision.h: struct rev_info {
    + 	struct tmp_objdir *remerge_objdir;
    + };
    + 
    ++/**
    ++ * Initialize the "struct rev_info" structure with a macro.
    ++ *
    ++ * This is not sufficient (yet!) to initialize a "struct rev_info",
    ++ * but it's OK (but redundant) to use it before a call to
    ++ * repo_init_revisions(), which does the real initialization. By using
    ++ * this it's safe to call release_revisions() on the "struct rev_info"
    ++ * without having called repo_init_revisions().
    ++ */
    ++#define REV_INFO_INIT { 0 }
    ++
    + /**
    +  * Initialize a rev_info structure with default values. The third parameter may
    +  * be NULL or can be prefix path, and then the `.prefix` variable will be set
    +@@ revision.h: int setup_revisions(int argc, const char **argv, struct rev_info *revs,
    + 
    + /**
    +  * Free data allocated in a "struct rev_info" after it's been
    +- * initialized with repo_init_revisions().
    ++ * initialized with repo_init_revisions() or REV_INFO_INIT.
    +  */
    + void release_revisions(struct rev_info *revs);
    + 
    +
    + ## submodule.c ##
    +@@ submodule.c: void show_submodule_diff_summary(struct diff_options *o, const char *path,
    + 		struct object_id *one, struct object_id *two,
    + 		unsigned dirty_submodule)
    + {
    +-	struct rev_info rev;
    ++	struct rev_info rev = REV_INFO_INIT;
    + 	struct commit *left = NULL, *right = NULL;
    + 	struct commit_list *merge_bases = NULL;
    + 	struct repository *sub;
    +@@ submodule.c: void show_submodule_diff_summary(struct diff_options *o, const char *path,
    + 	print_submodule_diff_summary(sub, &rev, o);
    + 
    + out:
    ++	release_revisions(&rev);
    + 	if (merge_bases)
    + 		free_commit_list(merge_bases);
    + 	clear_commit_marks(left, ~0);
10:  9da5c5f5f5d = 10:  b35f068cf66 stash: always have the owner of "stash_info" free it
11:  da4fcd04345 = 11:  8a2f4b3492b revisions API users: add "goto cleanup" for release_revisions()
12:  b6acc61fb61 = 12:  1001bd84325 revisions API users: use release_revisions() in http-push.c
13:  2eae0e809e5 = 13:  ad3d0ced58f revisions API users: use release_revisions() in builtin/log.c
14:  216eb3b41f7 = 14:  926b5f2f336 revisions API users: use release_revisions() with UNLEAK()
15:  f8e0eb52957 = 15:  ce97f0637ec revisions API users: use release_revisions() for "prune_data" users
16:  0a5662a9f67 = 16:  8c2edb63bba revisions API: have release_revisions() release "commits"
17:  65803961ee2 = 17:  532864f7edd revisions API: have release_revisions() release "mailmap"
18:  ac68630dbf6 = 18:  665944ff184 revisions API: have release_revisions() release "cmdline"
19:  740abb80c57 = 19:  dafb2cdfdef revisions API: have release_revisions() release "filter"
20:  26163e5e754 = 20:  dd655a2d384 revisions API: have release_revisions() release "grep_filter"
21:  842faebddc4 = 21:  c449f70425f revisions API: have release_revisions() release "prune_data"
22:  bf93197993c = 22:  229c2db0d8a revisions API: clear "boundary_commits" in release_revisions()
23:  af874c17fbd = 23:  688a40db244 revisions API: release "reflog_info" in release revisions()
24:  006fa1fcc34 = 24:  1b80a5b1881 revisions API: call diff_free(&revs->pruning) in revisions_release()
25:  0eacbd66711 = 25:  050d87a0cb8 revisions API: have release_revisions() release "date_mode"
26:  5efc0ae58ed = 26:  06e997415fe revisions API: have release_revisions() release "topo_walk_info"
27:  6c6fdf696af = 27:  6d0f8278d2f revisions API: add a TODO for diff_free(&revs->diffopt)
-- 
2.35.1.1557.g4e3e9cdb5e0

