From 91be32073ba85777bfa061a3e4f1876d89d04351 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Sun, 7 Mar 2021 02:18:40 +0100
Subject: [PATCH 09/16] much simpler, more tests

---
 blob.c                                 |  7 ++-----
 commit.c                               |  7 ++-----
 object.c                               |  7 +++++++
 object.h                               |  4 ++++
 t/t6102-rev-list-unexpected-objects.sh | 29 ++++++++++++++++++++++----
 tag.c                                  |  7 ++-----
 tree.c                                 |  7 ++-----
 7 files changed, 44 insertions(+), 24 deletions(-)

diff --git a/blob.c b/blob.c
index da667721fa0..1e938cd7e93 100644
--- a/blob.c
+++ b/blob.c
@@ -13,11 +13,8 @@ struct blob *lookup_blob_type(struct repository *r,
 	struct object *obj = lookup_object(r, oid);
 	if (!obj)
 		return create_object(r, oid, alloc_blob_node(r));
-	if (obj->type != OBJ_NONE &&
-	    obj->type != OBJ_BLOB) {
-		enum object_type blob = OBJ_BLOB;
-		oid_is_type_or_error(oid, obj->type, &blob);
-	}
+	if (type != OBJ_NONE)
+		lookup_type_is_type_or_die(oid, obj->type, OBJ_BLOB);
 	return object_as_type(obj, OBJ_BLOB, 0);
 }
 
diff --git a/commit.c b/commit.c
index 1eb97970c7f..62334dfb0b3 100644
--- a/commit.c
+++ b/commit.c
@@ -63,11 +63,8 @@ struct commit *lookup_commit_type(struct repository *r, const struct object_id *
 	struct object *obj = lookup_object(r, oid);
 	if (!obj)
 		return create_object(r, oid, alloc_commit_node(r));
-	if (obj->type != OBJ_NONE &&
-	    obj->type != OBJ_COMMIT) {
-		enum object_type commit = OBJ_COMMIT;
-		oid_is_type_or_die(oid, obj->type, &commit);
-	}
+	if (type != OBJ_NONE)
+		lookup_type_is_type_or_die(oid, obj->type, OBJ_COMMIT);
 	return object_as_type(obj, OBJ_COMMIT, 0);
 }
 
diff --git a/object.c b/object.c
index c7e507b7864..f827a7610a5 100644
--- a/object.c
+++ b/object.c
@@ -209,6 +209,13 @@ void *object_as_type(struct object *obj, enum object_type type, int quiet)
 	}
 }
 
+void lookup_type_is_type_or_die(const struct object_id *oid,
+				 enum object_type want,
+				 enum object_type type)
+{
+	oid_is_type_or_die(oid, want, &type);
+}
+
 struct object *lookup_unknown_object(const struct object_id *oid)
 {
 	struct object *obj = lookup_object(the_repository, oid);
diff --git a/object.h b/object.h
index 44cf99e988a..6a92b118b37 100644
--- a/object.h
+++ b/object.h
@@ -129,6 +129,10 @@ void oid_is_type_or_die(const struct object_id *oid, enum object_type want,
 int oid_is_type_or_error(const struct object_id *oid, enum object_type want,
 			 enum object_type *type);
 
+void lookup_type_is_type_or_die(const struct object_id *oid,
+				enum object_type want,
+				 enum object_type type);
+
 /*
  * Returns the object, having parsed it to find out what it is.
  *
diff --git a/t/t6102-rev-list-unexpected-objects.sh b/t/t6102-rev-list-unexpected-objects.sh
index 9a5e84ff024..d1e437fe94e 100755
--- a/t/t6102-rev-list-unexpected-objects.sh
+++ b/t/t6102-rev-list-unexpected-objects.sh
@@ -140,7 +140,7 @@ test_expect_success 'setup unexpected non-tag tag' '
 	sed -e "s/$tag_commit/$tree/" <good-tag-tag >broken-tag-tag-tree &&
 	sed -e "s/$tag_commit/$blob/" <good-tag-tag >broken-tag-tag-blob &&
 
-	sed -e "s/$commit/$tag/" <good-commit-tag >broken-commit-tag-tag &&
+	sed -e "s/$commit/$tag_commit/" <good-commit-tag >broken-commit-tag-tag &&
 	sed -e "s/$commit/$tree/" <good-commit-tag >broken-commit-tag-tree &&
 	sed -e "s/$commit/$blob/" <good-commit-tag >broken-commit-tag-blob &&
 
@@ -153,6 +153,16 @@ test_expect_success 'setup unexpected non-tag tag' '
 	commit_tag_blob=$(git hash-object -w -t tag broken-commit-tag-blob)
 '
 
+test_expect_success 'traverse unexpected incorrectly typed tag (to commit & tag)' '
+	test_must_fail git rev-list --objects $tag_tag_commit 2>actual &&
+	echo "fatal: object $commit is a commit, not a tag" >expected &&
+	test_cmp expected actual &&
+
+	test_must_fail git rev-list --objects $commit_tag_tag 2>actual &&
+	echo "fatal: object $tag_commit is a tag, not a commit" >expected &&
+	test_cmp expected actual
+'
+
 test_expect_success 'traverse unexpected incorrectly typed tag (to tree)' '
 	test_must_fail git rev-list --objects $tag_tag_tree 2>actual &&
 	echo "fatal: object $tree is a tree, not a tag" >expected &&
@@ -173,9 +183,20 @@ test_expect_success 'traverse unexpected incorrectly typed tag (to blob)' '
 	test_cmp expected actual
 '
 
-test_expect_success 'traverse unexpected non-tag tag (seen)' '
-	test_must_fail git rev-list --objects $blob $commit_tag_blob >output 2>&1 &&
-	test_i18ngrep "is a blob, not a commit" output
+test_expect_success 'traverse unexpected non-tag tag (tree seen to blob)' '
+	test_must_fail git rev-list --objects $tree $commit_tag_blob 2>err &&
+	echo "fatal: object $blob is a blob, not a tag" >expected &&
+
+	test_must_fail git rev-list --objects $tree $tag_tag_blob 2>err &&
+	echo "fatal: object $blob is a blob, not a tag" >expected
+'
+
+test_expect_success 'traverse unexpected non-tag tag (blob seen to blob)' '
+	test_must_fail git rev-list --objects $blob $commit_tag_blob 2>err &&
+	echo "fatal: object $blob is a blob, not a tag" >expected &&
+
+	test_must_fail git rev-list --objects $blob $tag_tag_blob 2>err &&
+	echo "fatal: object $blob is a blob, not a tag" >expected
 '
 
 test_done
diff --git a/tag.c b/tag.c
index 75b606311fb..20ae1f4c180 100644
--- a/tag.c
+++ b/tag.c
@@ -105,11 +105,8 @@ struct tag *lookup_tag_type(struct repository *r, const struct object_id *oid,
 	struct object *obj = lookup_object(r, oid);
 	if (!obj)
 		return create_object(r, oid, alloc_tag_node(r));
-	if (obj->type != OBJ_NONE &&
-	    obj->type != OBJ_TAG) {
-		enum object_type tag = OBJ_TAG;
-		oid_is_type_or_die(oid, obj->type, &tag);
-	}
+	if (type != OBJ_NONE)
+		lookup_type_is_type_or_die(oid, obj->type, OBJ_TAG);
 	return object_as_type(obj, OBJ_TAG, 0);
 }
 
diff --git a/tree.c b/tree.c
index ae69f08e6d0..a732f012286 100644
--- a/tree.c
+++ b/tree.c
@@ -201,11 +201,8 @@ struct tree *lookup_tree_type(struct repository *r, const struct object_id *oid,
 	struct object *obj = lookup_object(r, oid);
 	if (!obj)
 		return create_object(r, oid, alloc_tree_node(r));
-	if (obj->type != OBJ_NONE &&
-	    obj->type != OBJ_TREE) {
-		enum object_type tree = OBJ_TREE;
-		oid_is_type_or_die(oid, obj->type, &tree);
-	}
+	if (type != OBJ_NONE)
+		lookup_type_is_type_or_die(oid, obj->type, OBJ_TREE);
 	return object_as_type(obj, OBJ_TREE, 0);
 }
 
-- 
2.31.0.rc0.126.g04f22c5b82

