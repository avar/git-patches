From e10a43756d1a4612b82c56c0e8ae2c63eb7c5d26 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-00.10-00000000000-20211022T192811Z-avarab@gmail.com>
In-Reply-To: <cover-0.8-00000000000-20211020T183533Z-avarab@gmail.com>
References: <cover-0.8-00000000000-20211020T183533Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Fri, 22 Oct 2021 21:28:11 +0200
Subject: [PATCH v2 00/10] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Jeff King (1):
  generate-cmdlist.sh: do not shell out to "sed"

Johannes Sixt (2):
  generate-cmdlist.sh: spawn fewer processes
  generate-cmdlist.sh: replace for loop by printf's auto-repeat feature

Ævar Arnfjörð Bjarmason (7):
  command-list.txt: sort with "LC_ALL=C sort"
  generate-cmdlist.sh: trivial whitespace change
  generate-cmdlist.sh: don't call get_categories() from category_list()
  generate-cmdlist.sh: run "grep | sort", not "sort | grep"
  generate-cmdlist.sh: stop sorting category lines
  generate-cmdlist.sh: replace "grep' invocation with a shell version
  generate-cmdlist.sh: replace "cut", "tr" and "grep" with pure-shell

 command-list.txt    | 20 +++++++-------
 generate-cmdlist.sh | 66 ++++++++++++++++++++++++++-------------------
 2 files changed, 48 insertions(+), 38 deletions(-)

Range-diff against v1:
 -:  ----------- >  1:  96885282988 command-list.txt: sort with "LC_ALL=C sort"
 -:  ----------- >  2:  5e8fef90e42 generate-cmdlist.sh: trivial whitespace change
 -:  ----------- >  3:  6b4de6a6088 generate-cmdlist.sh: spawn fewer processes
 -:  ----------- >  4:  074685cf714 generate-cmdlist.sh: don't call get_categories() from category_list()
 2:  23d4cc77b6c !  5:  f01c1fd8088 Makefile: assert correct generate-cmdlist.sh output
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: assert correct generate-cmdlist.sh output
    +    generate-cmdlist.sh: run "grep | sort", not "sort | grep"
     
    -    Because generate-cmdlist.sh invokes "sed" to extract the "NAME" blurb
    -    from the Documentation/git-*.txt files, we can end up with bad content
    -    if those files aren't what we expected. E.g. we'll emit multiple lines
    -    from that "sed" one-liner if the "NAME" section were to move further
    -    down than what our "head -n 10" covers.
    -
    -    Let's assert that this can't happen by checking that the number of
    -    lines we make is what we'd expect to get. This means we can remove an
    -    assertion added in cfb22a02ab5 (help: use command-list.h for common
    -    command list, 2018-05-10). We'll catch this during compilation
    -    instead.
    -
    -    There are still other cases where it's possible to generate a bad
    -    command-list.h, but the rest should be caught by a C compilation
    -    error.
    -
    -    It would be possible to change our generated "command-list.h" to
    -    simply include this new ".build/command-list.h.gen" instead of cat-ing
    -    it in the Makefile, but let's leave the generated file as it is.
    +    This doesn't matter for performance, but let's not include the empty
    +    lines in our sorting. This makes the intent of the code clearer.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Makefile ##
    -@@ Makefile: $(COMMAND_LIST_GEN): .build/command-list.h.d/%.gen: Documentation/%.txt
    - 	$(QUIET)grep "^$(patsubst .build/command-list.h.d/%.gen,%,$@) " command-list.txt >$@.txt && \
    - 	./generate-cmdlist.sh --entry-only $@.txt >$@
    - 
    -+.build/command-list.h.gen: $(COMMAND_LIST_GEN)
    -+	$(QUIET)LC_ALL=C sort $(COMMAND_LIST_GEN) >$@ && \
    -+	test $$(wc -l <$@) -eq $(words $(COMMAND_LIST_GEN))
    -+
    - command-list.h: $(COMMAND_LIST_GEN)
    - command-list.h: generate-cmdlist.sh
    - command-list.h: command-list.txt
    -+command-list.h: .build/command-list.h.gen
    - 	$(QUIET_GEN){ \
    - 		$(SHELL_PATH) ./generate-cmdlist.sh --header-only command-list.txt && \
    - 		echo "static struct cmdname_help command_list[] = {" && \
    --		LC_ALL=C sort $(COMMAND_LIST_GEN) && \
    -+		cat $< && \
    - 		echo "};"; \
    - 	} >$@
    - 
    -
      ## generate-cmdlist.sh ##
     @@ generate-cmdlist.sh: category_list () {
    + 	command_list "$1" |
    + 	cut -c 40- |
    + 	tr ' ' '\012' |
    +-	LC_ALL=C sort -u |
    +-	grep -v '^$'
    ++	grep -v '^$' |
    ++	LC_ALL=C sort -u
      }
      
      get_synopsis () {
    --	head -n 10 "Documentation/$1.txt" |
    -+	head -n 6 "Documentation/$1.txt" |
    - 	sed -n '
    - 		/^NAME/,/'"$1"'/H
    - 		${
    -
    - ## help.c ##
    -@@ help.c: static void extract_cmds(struct cmdname_help **p_cmds, uint32_t mask)
    - 	int i, nr = 0;
    - 	struct cmdname_help *cmds;
    - 
    --	if (ARRAY_SIZE(command_list) == 0)
    --		BUG("empty command_list[] is a sign of broken generate-cmdlist.sh");
    --
    - 	ALLOC_ARRAY(cmds, ARRAY_SIZE(command_list) + 1);
    - 
    - 	for (i = 0; i < ARRAY_SIZE(command_list); i++) {
 -:  ----------- >  6:  e0b11514b8d generate-cmdlist.sh: replace for loop by printf's auto-repeat feature
 -:  ----------- >  7:  f2f37c2963b generate-cmdlist.sh: stop sorting category lines
 -:  ----------- >  8:  83318d6c0da generate-cmdlist.sh: do not shell out to "sed"
 1:  0c6f9b80d3b !  9:  7903dd1f8c2 Makefile: stop having command-list.h depend on a wildcard
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: stop having command-list.h depend on a wildcard
    +    generate-cmdlist.sh: replace "grep' invocation with a shell version
     
    -    Change the dependency graph for "command-list.h" so that it's not
    -    re-built in its entirety every time one file in Documentation/git*.txt
    -    changes. This makes the generation of the command-list.h use a pattern
    -    similar to that established in 8650c6298c1 (doc lint: make "lint-docs"
    -    non-.PHONY, 2021-10-15) for the "lint-docs" target.
    +    Replace the "grep" we run to exclude certain programs from the
    +    generated output with a pure-shell loop that strips out the comments,
    +    and sees if the "cmd" we're reading is on a list of excluded
    +    programs. This uses a trick similar to test_have_prereq() in
    +    test-lib-functions.sh.
     
    -    This change replaces the monolithic "generate-cmdlist.sh" invocation
    -    with a dependency chain like:
    +    On my *nix system this makes things quite a bit slower compared to
    +    HEAD~, but since the generate-cmdlist.sh is already quite fast, and
    +    this likely helps systems where command invocations are more
    +    expensive (i.e. Windows) let's use this anyway.
     
    -        Documentation/git-add.txt ->
    -        .build/command-list.h.d/git-add.gen (and "git-add.txt" intermediary) ->
    -        command-list.h
    -
    -    I.e. we'll now generate intermediary files when extracting the "NAME"
    -    section the documentation. Here the 6th line of
    -    "Documentation/git.txt" will be extracted to
    -    ".build/command-list.h.d/git-add.gen.txt":
    -
    -        git-add - Add file contents to the index
    -
    -    We'll then create an intermediate
    -    ".build/command-list.h.d/git-add.gen" (leading "\t" stripped):
    -
    -        ./generate-cmdlist.sh --entry-only .build/command-list.h.d/git-add.gen.txt
    -        { "git-add", N_("Add file contents to the index"), 0 | CAT_mainporcelain | CAT_worktree },
    -
    -    The "command-list.h" itself can the be made by having
    -    "generate-cmdlist.sh" emit only the header section, followed by:
    -
    -        LC_ALL=sort .build/command-list.h.d/*.gen
    -
    -    Unfortunately we can't drop the old code completely due to the CMake
    -    integration, see 061c2240b1b (Introduce CMake support for configuring
    -    Git, 2020-06-12). It will keep using the older and slower script.
    -
    -    With this the initial creation of the command-list.h is a bit slower
    -    with -j1, but around 2x as fast -j8[1]. The real benefit comes from
    -    the more common case of an incremental build, say when only
    -    "Documentation/git-add.txt" was updated after a "pull". There we're
    -    4-5x as fast with this new method[2].
    -
    -    The benefit of optimizing this is because this file is very frequently
    -    re-generated, e.g. for "git rebase -i --exec 'make git'" with
    -    "git-add.txt" modified we're around 1.7 times as fast[3]. That target
    -    will need to re-make "git" (via "help.o") due to help.c's use of
    -    command-list.h.
    -
    -    In terms of implementation: I'm adding $(QUIET) while I'm at it, which
    -    is here so we don't quiet the equivalent of trace output under V=1,
    -    this could be used in other places that use "@cmd" to quiet "cmd"
    -    output.
    -
    -    Some of the dependencies between "command-list.h" and
    -    "$(COMMAND_LIST_GEN)" are redundant, considering that the former
    -    depends on the latter. I'm sticking to listing dependencies mentioned
    -    in the rule itself, e.g. "command-list.h" itself calls
    -    "generate-cmdlist.sh", so I list the dependency even though it would
    -    get it via a recursive dependency.
    -
    -    These rules can be lazy about leaving behind files on error thanks to
    -    the .DELETE_ON_ERROR flag, see 7b76d6bf221 (Makefile: add and use the
    -    ".DELETE_ON_ERROR" flag, 2021-06-29), or in the case of the
    -    "*.txt.gen" files because we'll unconditionally clobber them anyway if
    -    the relevant source file is touched, so we can leave them for "make
    -    clean".
    -
    -    1. Piped through: <cmd> 2>/dev/null | grep -P -v "^\s*$"; ditto below:
    -       hyperfine -s basic -L j ", -j8" -L s ,.old -p 'rm -rf .build command-list.h' 'make{j} -f Makefile{s} command-list.h'
    -       Benchmark #1: make -f Makefile command-list.h
    -         Time (mean ± σ):     769.3 ms ±  90.4 ms    [User: 892.4 ms, System: 98.8 ms]
    -         Range (min … max):   665.6 ms … 941.9 ms    10 runs
    -       Benchmark #2: make -j8 -f Makefile command-list.h
    -         Time (mean ± σ):     212.5 ms ±  45.0 ms    [User: 954.4 ms, System: 136.9 ms]
    -         Range (min … max):   187.6 ms … 326.2 ms    11 runs
    -       Benchmark #3: make -f Makefile.old command-list.h
    -         Time (mean ± σ):     515.0 ms ±  70.5 ms    [User: 613.8 ms, System: 110.9 ms]
    -         Range (min … max):   407.6 ms … 603.9 ms    10 runs
    -       Benchmark #4: make -j8 -f Makefile.old command-list.h
    -         Time (mean ± σ):     474.9 ms ±  62.7 ms    [User: 569.7 ms, System: 106.0 ms]
    -         Range (min … max):   407.0 ms … 556.8 ms    10 runs
    -       Summary
    -         'make -j8 -f Makefile command-list.h' ran
    -           2.24 ± 0.56 times faster than 'make -j8 -f Makefile.old command-list.h'
    -           2.42 ± 0.61 times faster than 'make -f Makefile.old command-list.h'
    -           3.62 ± 0.88 times faster than 'make -f Makefile command-list.h'
    -    2. hyperfine -s basic -L j ", -j8" -L s ,.old -p 'touch Documentation/git-add.txt' 'make{j} -f Makefile{s} command-list.h'
    -       Benchmark #1: make -f Makefile command-list.h
    -         Time (mean ± σ):      94.6 ms ±  26.7 ms    [User: 83.0 ms, System: 14.1 ms]
    -         Range (min … max):    79.4 ms … 186.0 ms    15 runs
    -       Benchmark #2: make -j8 -f Makefile command-list.h
    -         Time (mean ± σ):      80.3 ms ±  10.5 ms    [User: 81.3 ms, System: 12.9 ms]
    -         Range (min … max):    76.9 ms … 127.6 ms    37 runs
    -       Benchmark #3: make -f Makefile.old command-list.h
    -         Time (mean ± σ):     348.9 ms ± 174.5 ms    [User: 415.3 ms, System: 70.6 ms]
    -         Range (min … max):    66.0 ms … 550.3 ms    43 runs
    -       Benchmark #4: make -j8 -f Makefile.old command-list.h
    -         Time (mean ± σ):     406.7 ms ± 157.1 ms    [User: 473.4 ms, System: 78.3 ms]
    -         Range (min … max):    67.4 ms … 560.4 ms    34 runs
    -       Summary
    -         'make -j8 -f Makefile command-list.h' ran
    -           1.18 ± 0.37 times faster than 'make -f Makefile command-list.h'
    -           4.34 ± 2.25 times faster than 'make -f Makefile.old command-list.h'
    -           5.07 ± 2.07 times faster than 'make -j8 -f Makefile.old command-list.h'
    -    3. hyperfine -s basic -L j " -j8" -L s ,.old -p 'touch Documentation/git-add.txt' 'make{j} -f Makefile{s} git'
    -       Benchmark #1: make -j8 -f Makefile git
    -         Time (mean ± σ):     484.2 ms ±  53.5 ms    [User: 253.2 ms, System: 83.5 ms]
    -         Range (min … max):   400.7 ms … 580.5 ms    10 runs
    -       Benchmark #2: make -j8 -f Makefile.old git
    -         Time (mean ± σ):     836.7 ms ±  37.3 ms    [User: 729.2 ms, System: 157.1 ms]
    -         Range (min … max):   774.2 ms … 885.6 ms    10 runs
    -       Summary
    -         'make -j8 -f Makefile git' ran
    -           1.73 ± 0.21 times faster than 'make -j8 -f Makefile.old git'
    +      'sh generate-cmdlist.sh.old command-list.txt' ran
    +        1.56 ± 0.11 times faster than 'sh generate-cmdlist.sh command-list.txt'
    +       18.00 ± 0.19 times faster than 'sh generate-cmdlist.sh.master command-list.txt'
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## .gitignore ##
    -@@
    - *.[aos]
    - *.o.json
    - *.py[co]
    -+.build/
    - .depend/
    - *.gcda
    - *.gcno
    -
    - ## Makefile ##
    -@@ Makefile: endif
    - 
    - ifneq ($(findstring s,$(MAKEFLAGS)),s)
    - ifndef V
    -+	QUIET          = @
    - 	QUIET_CC       = @echo '   ' CC $@;
    - 	QUIET_AR       = @echo '   ' AR $@;
    - 	QUIET_LINK     = @echo '   ' LINK $@;
    -@@ Makefile: config-list.h: generate-configlist.sh
    - config-list.h: Documentation/*config.txt Documentation/config/*.txt
    - 	$(QUIET_GEN)$(SHELL_PATH) ./generate-configlist.sh >$@
    - 
    --command-list.h: generate-cmdlist.sh command-list.txt
    --
    --command-list.h: $(wildcard Documentation/git*.txt)
    --	$(QUIET_GEN)$(SHELL_PATH) ./generate-cmdlist.sh \
    --		$(patsubst %,--exclude-program %,$(EXCLUDED_PROGRAMS)) \
    --		command-list.txt >$@
    -+EXCLUDED_COMMAND_LIST =
    -+EXCLUDED_COMMAND_LIST += git
    -+EXCLUDED_COMMAND_LIST += git-bisect-lk2009
    -+EXCLUDED_COMMAND_LIST += git-credential-cache--daemon
    -+EXCLUDED_COMMAND_LIST += git-fsck-objects
    -+EXCLUDED_COMMAND_LIST += git-init-db
    -+EXCLUDED_COMMAND_LIST += git-mergetool--lib
    -+EXCLUDED_COMMAND_LIST += git-remote-ext
    -+EXCLUDED_COMMAND_LIST += git-remote-fd
    -+EXCLUDED_COMMAND_LIST += git-sh-i18n--envsubst
    -+EXCLUDED_COMMAND_LIST += git-submodules
    -+EXCLUDED_COMMAND_LIST += git-tools
    -+EXCLUDED_COMMAND_LIST += git-version
    -+EXCLUDED_COMMAND_LIST += git-web--browse
    -+EXCLUDED_COMMAND_LIST += gitweb.conf
    -+
    -+EXCLUDED_TXT += $(patsubst %,Documentation/%.txt,$(EXCLUDED_PROGRAMS) $(EXCLUDED_COMMAND_LIST))
    -+COMMAND_LIST_TXT_DEP = $(filter-out $(EXCLUDED_TXT), $(wildcard Documentation/git*.txt))
    -+
    -+COMMAND_LIST_GEN = $(patsubst Documentation/%.txt,.build/command-list.h.d/%.gen,$(COMMAND_LIST_TXT_DEP))
    -+
    -+.build:
    -+	$(QUIET)mkdir .build
    -+.build/command-list.h.d: | .build
    -+	$(QUIET)mkdir -p .build/command-list.h.d
    -+
    -+# We must depend on .build/command-list.h as an "order-only"
    -+# prerequisite, its mtime will change when these targets run.
    -+$(COMMAND_LIST_GEN): | .build/command-list.h.d
    -+$(COMMAND_LIST_GEN): command-list.txt
    -+$(COMMAND_LIST_GEN): generate-cmdlist.sh
    -+$(COMMAND_LIST_GEN): .build/command-list.h.d/%.gen: Documentation/%.txt
    -+	$(QUIET)grep "^$(patsubst .build/command-list.h.d/%.gen,%,$@) " command-list.txt >$@.txt && \
    -+	./generate-cmdlist.sh --entry-only $@.txt >$@
    -+
    -+command-list.h: $(COMMAND_LIST_GEN)
    -+command-list.h: generate-cmdlist.sh
    -+command-list.h: command-list.txt
    -+	$(QUIET_GEN){ \
    -+		$(SHELL_PATH) ./generate-cmdlist.sh --header-only command-list.txt && \
    -+		echo "static struct cmdname_help command_list[] = {" && \
    -+		LC_ALL=C sort $(COMMAND_LIST_GEN) && \
    -+		echo "};"; \
    -+	} >$@
    - 
    - hook-list.h: generate-hooklist.sh Documentation/githooks.txt
    - 	$(QUIET_GEN)$(SHELL_PATH) ./generate-hooklist.sh >$@
    -@@ Makefile: clean: profile-clean coverage-clean cocciclean
    - 	$(RM) $(SP_OBJ)
    - 	$(RM) $(HCC)
    - 	$(RM) -r bin-wrappers $(dep_dirs) $(compdb_dir) compile_commands.json
    -+	$(RM) -r .build/
    - 	$(RM) -r po/build/
    - 	$(RM) *.pyc *.pyo */*.pyc */*.pyo $(GENERATED_H) $(ETAGS_TARGET) tags cscope*
    - 	$(RM) -r .dist-tmp-dir .doc-tmp-dir
    -
      ## generate-cmdlist.sh ##
    -@@ generate-cmdlist.sh: get_category_line () {
    +@@ generate-cmdlist.sh: die () {
    + }
    + 
    + command_list () {
    +-	eval "grep -ve '^#' $exclude_programs" <"$1"
    ++	while read cmd rest
    ++	do
    ++		case "$cmd" in
    ++		"#"*)
    ++			continue;
    ++			;;
    ++		*)
    ++			case "$exclude_programs" in
    ++				*":$cmd:"*)
    ++				;;
    ++			*)
    ++				echo "$cmd $rest"
    ++				;;
    ++			esac
    ++		esac
    ++	done
      }
      
      category_list () {
     -	command_list "$1" |
    -+	grep -v '^#' "$1" |
    - 	cut -c 40- |
    +-	cut -c 40- |
    ++	command_list <"$1" |
    ++	cut -d' ' -f2- |
      	tr ' ' '\012' |
      	grep -v '^$' |
    -@@ generate-cmdlist.sh: category_list () {
    - }
    - 
    - get_synopsis () {
    -+	head -n 10 "Documentation/$1.txt" |
    - 	sed -n '
    - 		/^NAME/,/'"$1"'/H
    - 		${
    - 			x
    - 			s/.*'"$1"' - \(.*\)/N_("\1")/
    - 			p
    --		}' "Documentation/$1.txt"
    -+		}'
    - }
    - 
    - define_categories () {
    + 	LC_ALL=C sort -u
     @@ generate-cmdlist.sh: define_category_names () {
    - }
    - 
      print_command_list () {
    --	echo "static struct cmdname_help command_list[] = {"
    --
    + 	echo "static struct cmdname_help command_list[] = {"
    + 
     -	command_list "$1" |
    ++	command_list <"$1" |
      	while read cmd rest
      	do
    - 		printf "	{ \"$cmd\", $(get_synopsis $cmd), 0"
    - 		printf " | CAT_%s" $(echo "$rest" | get_category_line)
    - 		echo " },"
    - 	done
    --	echo "};"
    + 		synopsis=
    +@@ generate-cmdlist.sh: print_command_list () {
    + 	echo "};"
      }
      
    - exclude_programs=
    -@@ generate-cmdlist.sh: do
    +-exclude_programs=
    ++exclude_programs=:
    + while test "--exclude-program" = "$1"
    + do
    + 	shift
    +-	exclude_programs="$exclude_programs -e \"^$1 \""
    ++	exclude_programs="$exclude_programs$1:"
      	shift
      done
      
    -+header_only=
    -+case $1 in
    -+--entry-only)
    -+	shift
    -+	print_command_list $1 <"$1"
    -+	exit 0
    -+	;;
    -+--header-only)
    -+	shift
    -+	header_only=t
    -+	;;
    -+esac
    -+
    - echo "/* Automatically generated by generate-cmdlist.sh */
    - struct cmdname_help {
    - 	const char *name;
    -@@ generate-cmdlist.sh: define_categories "$1"
    - echo
    - define_category_names "$1"
    - echo
    -+
    -+if test -n "$header_only"
    -+then
    -+	exit 0
    -+fi
    -+
    -+# The old compatibility mode for CMmake. See 061c2240b1b (Introduce
    -+# CMake support for configuring Git, 2020-06-12)
    -+echo "static struct cmdname_help command_list[] = {"
    -+grep -v \
    -+	-e '^#' \
    -+	-e '^git-fsck-objects ' \
    -+	"$1" |
    - print_command_list "$1"
    -+echo "};"
 -:  ----------- > 10:  e10a43756d1 generate-cmdlist.sh: replace "cut", "tr" and "grep" with pure-shell
-- 
2.33.1.1505.g075a284c562

