From 9a4b9bb05acd6794b610a88e131ea90c18d672ae Mon Sep 17 00:00:00 2001
Message-Id: <cover-v11-00.10-00000000000-20220215T235454Z-avarab@gmail.com>
In-Reply-To: <cover-v10-0.9-00000000000-20220204T211534Z-avarab@gmail.com>
References: <cover-v10-0.9-00000000000-20220204T211534Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 16 Feb 2022 00:54:54 +0100
Subject: [PATCH v11 00/10] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (10):
  grep.h: remove unused "regex_t regexp" from grep_opt
  log tests: check if grep_config() is called by "log"-like cmds
  grep tests: create a helper function for "BRE" or "ERE"
  grep tests: add missing "grep.patternType" config tests
  built-ins: trust the "prefix" from run_builtin()
  grep.c: don't pass along NULL callback value
  grep API: call grep_config() after grep_init()
  grep.h: make "grep_opt.pattern_type_option" use its enum
  grep.c: do "if (bool && memchr())" not "if (memchr() && bool)"
  grep: simplify config parsing and option parsing

 builtin/grep.c    |  27 +++----
 builtin/log.c     |  13 +++-
 builtin/ls-tree.c |   2 +-
 git.c             |   1 +
 grep.c            | 113 ++++------------------------
 grep.h            |  31 ++++++--
 revision.c        |   4 +-
 t/t4202-log.sh    |  24 ++++++
 t/t7810-grep.sh   | 186 ++++++++++++++++++++++++++--------------------
 9 files changed, 195 insertions(+), 206 deletions(-)

Range-diff against v10:
 1:  184f7e0c5bd =  1:  67af9123727 grep.h: remove unused "regex_t regexp" from grep_opt
 2:  ac397cc6a18 =  2:  b275d23f0a8 log tests: check if grep_config() is called by "log"-like cmds
 3:  3464c76cfd7 !  3:  367e0aff0ed grep tests: add missing "grep.patternType" config tests
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    grep tests: add missing "grep.patternType" config tests
    +    grep tests: create a helper function for "BRE" or "ERE"
     
    -    Extend the grep tests to assert that setting
    -    "grep.patternType=extended" followed by "grep.patternType=default"
    -    will behave as if "--basic-regexp" was provided, and not as
    -    "--extended-regexp". In a subsequent commit we'll need to treat
    -    "grep.patternType=default" as a special-case, but let's make sure we
    -    ignore it if it's being set to "default" following an earlier
    -    non-"default" "grep.patternType" setting.
    -
    -    Let's also test what happens when we have a sequence of "extended"
    -    followed by "default" and "fixed". In that case the "fixed" should
    -    prevail, as well as tests to check that a "grep.extendedRegexp=true"
    -    followed by a "grep.extendedRegexp=false" behaves as though
    -    "grep.extendedRegexp" wasn't provided.
    -
    -    See [1] for the source of some of these tests, and their
    -    initial (pseudocode) implementation, and [2] for a later discussion
    -    about a breakage due to missing testing (which had been noted in [1]
    -    all along).
    -
    -    1. https://lore.kernel.org/git/xmqqv8zf6j86.fsf@gitster.g/
    -    2. https://lore.kernel.org/git/xmqqpmoczwtu.fsf@gitster.g/
    +    Refactor the repeated test code for finding out whether a given set of
    +    configuration will pick basic, extended or fixed into a new
    +    "test_pattern_type" helper function.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -    Signed-off-by: Junio C Hamano <gitster@pobox.com>
     
      ## t/t7810-grep.sh ##
    -@@ t/t7810-grep.sh: do
    - 		test_cmp expected actual
    - 	'
    +@@ t/t7810-grep.sh: test_expect_success 'grep should not segfault with a bad input' '
      
    -+	test_expect_success "grep $L with grep.extendedRegexp is last-one-wins" '
    -+		echo "${HC}ab:a+bc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.patternType=basic \
    -+			-c grep.extendedRegexp=false \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    -+	test_expect_success "grep $L with grep.extendedRegexp is last-one-wins & defers to grep.patternType" '
    -+		echo "${HC}ab:abc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.patternType=extended \
    -+			-c grep.extendedRegexp=false \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    -+	test_expect_success "grep $L with grep.extendedRegexp and grep.patternType are both last-one-wins independently (ERE)" '
    -+		echo "${HC}ab:abc" >expected &&
    -+		git \
    -+			-c grep.patternType=fixed \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.patternType=default \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    -+	test_expect_success "grep $L with grep.extendedRegexp and grep.patternType are both last-one-wins independently (ERE)" '
    -+		echo "${HC}ab:abc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=false \
    -+			-c grep.patternType=default \
    -+			-c grep.extendedRegexp=true \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    -+	test_expect_success "grep $L with grep.extendedRegexp and grep.patternType are both last-one-wins independently (BRE)" '
    -+		echo "${HC}ab:a+bc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.extendedRegexp=false \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    -+	test_expect_success "grep $L with grep.extendedRegexp and grep.patternType are both last-one-wins independently (BRE)" '
    -+		echo "${HC}ab:abc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=false \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.patternType=default \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    + test_invalid_grep_expression --and -e A
    + 
    ++test_pattern_type () {
    ++	H=$1
    ++	HC=$2
    ++	L=$3
    ++	type=$4
    ++	shift 4
     +
    -+	test_expect_success "grep $L with grep.extendedRegexp and grep.patternType are both last-one-wins independently (BRE)" '
    -+		echo "${HC}ab:a+bc" >expected &&
    -+		git \
    -+			-c grep.patternType=default \
    -+			-c grep.extendedRegexp=true \
    -+			-c grep.patternType=basic \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+	test_expect_success "grep $L with grep.patternType=extended and grep.patternType=default" '
    -+		echo "${HC}ab:a+bc" >expected &&
    -+		git \
    -+			-c grep.patternType=extended \
    -+			-c grep.patternType=default \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    ++	expected_str=
    ++	case "$type" in
    ++	BRE)
    ++		expected_str="${HC}ab:a+bc"
    ++		;;
    ++	ERE)
    ++		expected_str="${HC}ab:abc"
    ++		;;
    ++	FIX)
    ++		expected_str="${HC}ab:a+b*c"
    ++		;;
    ++	*)
    ++		BUG "only know about BRE or ERE"
    ++		;;
    ++	esac &&
    ++	config_str="$@"
     +
    -+	test_expect_success "grep $L with grep.patternType=[extended -> default -> fixed]" '
    -+		echo "${HC}ab:a+b*c" >expected &&
    -+		git \
    -+			-c grep.patternType=extended \
    -+			-c grep.patternType=default \
    -+			-c grep.patternType=fixed \
    -+			grep "a+b*c" $H ab >actual &&
    ++	test_expect_success "grep $L with '$config_str' interpreted as $type" '
    ++		echo $expected_str >expected &&
    ++		git $config_str grep "a+b*c" $H ab >actual &&
     +		test_cmp expected actual
     +	'
    ++}
     +
    - 	test_expect_success "grep $L with grep.patternType=extended and grep.extendedRegexp=false" '
    - 		echo "${HC}ab:abc" >expected &&
    - 		git \
    + for H in HEAD ''
    + do
    + 	case "$H" in
     @@ t/t7810-grep.sh: do
    + 		git grep --no-recursive -n -e vvv $H -- t . >actual &&
      		test_cmp expected actual
      	'
    +-	test_expect_success "grep $L with grep.extendedRegexp=false" '
    +-		echo "${HC}ab:a+bc" >expected &&
    +-		git -c grep.extendedRegexp=false grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
      
    -+	test_expect_success "grep $L with grep.extendedRegexp=false and grep.patternType=default" '
    -+		echo "${HC}ab:abc" >expected &&
    -+		git \
    -+			-c grep.extendedRegexp=false \
    -+			-c grep.patternType=extended \
    -+			grep "a+b*c" $H ab >actual &&
    -+		test_cmp expected actual
    -+	'
    -+
    - 	test_expect_success "grep $L with grep.extendedRegexp=true and grep.patternType=basic" '
    - 		echo "${HC}ab:a+bc" >expected &&
    - 		git \
    +-	test_expect_success "grep $L with grep.extendedRegexp=true" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git -c grep.extendedRegexp=true grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    + 
    +-	test_expect_success "grep $L with grep.patterntype=basic" '
    +-		echo "${HC}ab:a+bc" >expected &&
    +-		git -c grep.patterntype=basic grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.patterntype=extended" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git -c grep.patterntype=extended grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.patterntype=fixed" '
    +-		echo "${HC}ab:a+b*c" >expected &&
    +-		git -c grep.patterntype=fixed grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    ++	test_pattern_type "$H" "$HC" "$L" BRE -c grep.extendedRegexp=false
    ++	test_pattern_type "$H" "$HC" "$L" ERE -c grep.extendedRegexp=true
    ++	test_pattern_type "$H" "$HC" "$L" BRE -c grep.patternType=basic
    ++	test_pattern_type "$H" "$HC" "$L" ERE -c grep.patternType=extended
    ++	test_pattern_type "$H" "$HC" "$L" FIX -c grep.patternType=fixed
    + 
    + 	test_expect_success PCRE "grep $L with grep.patterntype=perl" '
    + 		echo "${HC}ab:a+b*c" >expected &&
    +@@ t/t7810-grep.sh: do
    + 		test_must_fail git -c grep.patterntype=perl grep "foo.*bar"
    + 	'
    + 
    +-	test_expect_success "grep $L with grep.patternType=default and grep.extendedRegexp=true" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git \
    +-			-c grep.patternType=default \
    +-			-c grep.extendedRegexp=true \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.extendedRegexp=true and grep.patternType=default" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git \
    +-			-c grep.extendedRegexp=true \
    +-			-c grep.patternType=default \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.patternType=extended and grep.extendedRegexp=false" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git \
    +-			-c grep.patternType=extended \
    +-			-c grep.extendedRegexp=false \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.patternType=basic and grep.extendedRegexp=true" '
    +-		echo "${HC}ab:a+bc" >expected &&
    +-		git \
    +-			-c grep.patternType=basic \
    +-			-c grep.extendedRegexp=true \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.extendedRegexp=false and grep.patternType=extended" '
    +-		echo "${HC}ab:abc" >expected &&
    +-		git \
    +-			-c grep.extendedRegexp=false \
    +-			-c grep.patternType=extended \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    +-
    +-	test_expect_success "grep $L with grep.extendedRegexp=true and grep.patternType=basic" '
    +-		echo "${HC}ab:a+bc" >expected &&
    +-		git \
    +-			-c grep.extendedRegexp=true \
    +-			-c grep.patternType=basic \
    +-			grep "a+b*c" $H ab >actual &&
    +-		test_cmp expected actual
    +-	'
    ++	test_pattern_type "$H" "$HC" "$L" ERE \
    ++		-c grep.patternType=default \
    ++		-c grep.extendedRegexp=true
    ++	test_pattern_type "$H" "$HC" "$L" ERE \
    ++		-c grep.extendedRegexp=true \
    ++		-c grep.patternType=default
    ++	test_pattern_type "$H" "$HC" "$L" ERE \
    ++		-c grep.patternType=extended \
    ++		-c grep.extendedRegexp=false
    ++	test_pattern_type "$H" "$HC" "$L" BRE \
    ++		-c grep.patternType=basic \
    ++		-c grep.extendedRegexp=true
    ++	test_pattern_type "$H" "$HC" "$L" ERE \
    ++		-c grep.extendedRegexp=false \
    ++		-c grep.patternType=extended
    ++	test_pattern_type "$H" "$HC" "$L" BRE \
    ++		-c grep.extendedRegexp=true \
    ++		-c grep.patternType=basic
    + 
    + 	test_expect_success "grep --count $L" '
    + 		echo ${HC}ab:3 >expected &&
 -:  ----------- >  4:  a9286d7353f grep tests: add missing "grep.patternType" config tests
 4:  c6ada96298a =  5:  2a9691c247d built-ins: trust the "prefix" from run_builtin()
 5:  1f09de53e07 =  6:  279eeb53c3f grep.c: don't pass along NULL callback value
 6:  ce646154538 =  7:  68d18fa3336 grep API: call grep_config() after grep_init()
 7:  6446b4f0f33 =  8:  ff03b59ba61 grep.h: make "grep_opt.pattern_type_option" use its enum
 8:  df8ba5aba68 =  9:  9b4ec47ebaa grep.c: do "if (bool && memchr())" not "if (memchr() && bool)"
 9:  ccbdfa48315 = 10:  9a4b9bb05ac grep: simplify config parsing and option parsing
-- 
2.35.1.1027.g942e091e858

