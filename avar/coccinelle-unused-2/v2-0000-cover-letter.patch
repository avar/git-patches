From 4130dc15287c27516cb03585f88ef70d1f4c910a Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-0.2-00000000000-20220621T223933Z-avarab@gmail.com>
In-Reply-To: <patch-1.1-7d90f26b73f-20220520T115426Z-avarab@gmail.com>
References: <patch-1.1-7d90f26b73f-20220520T115426Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 22 Jun 2022 00:39:33 +0200
Subject: [PATCH v2 0/2] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (2):
  cocci: add and apply a rule to find "unused" variables
  cocci: remove "when strict" from unused.cocci

 builtin/fetch.c                 |  3 +-
 builtin/merge.c                 |  4 ---
 builtin/repack.c                |  2 --
 contrib/coccinelle/unused.cocci | 64 +++++++++++++++++++++++++++++++++
 contrib/scalar/scalar.c         |  3 +-
 diff.c                          |  2 --
 6 files changed, 66 insertions(+), 12 deletions(-)
 create mode 100644 contrib/coccinelle/unused.cocci

Range-diff against v1:
1:  7d90f26b73f ! 1:  d14036521ab cocci: add and apply a rule to find "unused" variables
    @@ Commit message
         cocci: add and apply a rule to find "unused" variables
     
         Add a coccinelle rule to remove variable initialization followed by
    -    calling a "release" function. This rule automatically finds the sort
    -    of issue patched in[1], and more.
    +    calling a "release" function. See extensive commentary in the new
    +    "unused.cocci" for how it works, and what it's intended to find and
    +    replace.
     
    -    We happened to only have occurrences of strbuf_release() matching this
    -    rule, but manual testing reveals that it'll find e.g. the same pattern
    -    if "string_list_clear()" were used instead.
    +    The inclusion of "contrib/scalar/scalar.c" is because "spatch" was
    +    manually run on it (we don't usually run spatch on contrib).
    +
    +    The use of "with strict" here will be explained and amended in the
    +    following commit.
     
         1. https://lore.kernel.org/git/042d624b8159364229e95d35e9309f12b67f8173.1652977582.git.gitgitgadget@gmail.com/
     
    @@ builtin/fetch.c: static int store_updated_refs(const char *raw_url, const char *
      }
     
      ## builtin/merge.c ##
    -@@ builtin/merge.c: static void reset_hard(const struct object_id *oid, int verbose)
    - static void restore_state(const struct object_id *head,
    - 			  const struct object_id *stash)
    - {
    --	struct strbuf sb = STRBUF_INIT;
    - 	const char *args[] = { "stash", "apply", NULL, NULL };
    - 
    - 	if (is_null_oid(stash))
    -@@ builtin/merge.c: static void restore_state(const struct object_id *head,
    - 	 */
    - 	run_command_v_opt(args, RUN_GIT_CMD);
    - 
    --	strbuf_release(&sb);
    - 	refresh_cache(REFRESH_QUIET);
    - }
    - 
     @@ builtin/merge.c: static void merge_name(const char *remote, struct strbuf *msg)
      {
      	struct commit *remote_head;
    @@ builtin/merge.c: static void merge_name(const char *remote, struct strbuf *msg)
      }
      
     
    - ## builtin/repack.c ##
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 	struct child_process cmd = CHILD_PROCESS_INIT;
    - 	struct string_list_item *item;
    - 	struct string_list names = STRING_LIST_INIT_DUP;
    --	struct string_list rollback = STRING_LIST_INIT_NODUP;
    - 	struct string_list existing_nonkept_packs = STRING_LIST_INIT_DUP;
    - 	struct string_list existing_kept_packs = STRING_LIST_INIT_DUP;
    - 	struct pack_geometry *geometry = NULL;
    -@@ builtin/repack.c: int cmd_repack(int argc, const char **argv, const char *prefix)
    - 	}
    - 
    - 	string_list_clear(&names, 0);
    --	string_list_clear(&rollback, 0);
    - 	string_list_clear(&existing_nonkept_packs, 0);
    - 	string_list_clear(&existing_kept_packs, 0);
    - 	clear_pack_geometry(geometry);
    -
      ## contrib/coccinelle/unused.cocci (new) ##
     @@
    -+// Unused init assignment + release()
    ++// This rule finds sequences of "unused" declerations, init and
    ++// release(). E.g.:
    ++//
    ++//	struct strbuf buf = STRBUF_INIT;
    ++//      [.. no other use of "buf" in the function ..]
    ++//	strbuf_release(&buf)
    ++//
    ++// To do do this we find (continued below)...
     +@@
    -+identifier I;
     +type T;
    ++identifier I;
    ++// STRBUF_INIT, but also e.g. STRING_LIST_INIT_DUP (so no anchoring)
     +constant INIT =~ "_INIT";
    ++// I = get_worktrees() etc.
    ++identifier INIT_ASSIGN1 =~ "^get_worktrees$";
    ++// strbuf_init(&I, ...) etc.
    ++identifier INIT_CALL1 =~ "^[a-z_]*_init$";
     +// stbuf_release(), string_list_clear() etc.
     +identifier REL1 =~ "^[a-z_]*_(release|clear|free)$";
     +// release_patch(), clear_pathspec() etc.
     +identifier REL2 =~ "^(release|clear|free)_[a-z_]*$";
     +@@
     +
    ++// .. A declaration like "struct strbuf buf;"...
    ++(
    ++- T I;
    ++// ... or "struct STRBUF buf = STRBUF_INIT;" ...
    ++|
     +- T I = INIT;
    -+  <+... when != \( I \| &I \)
    -+- \( REL1 \| REL2 \)(&I, ...);
    -+  ...+>
    ++)
    ++
    ++// ... Optionally followed by lines that make no use of "buf", "&buf"
    ++// etc., but which ...
    ++<... when != \( I \| &I \)
    ++     when strict
    ++// .. (only) make use of "buf" or "&buf" to call something like
    ++// "strbuf_init(&buf, ...)" ...
    ++(
    ++- \( INIT_CALL1 \)( \( I \| &I \), ...);
    ++|
    ++// .. or e.g. "worktrees = get_worktrees();", i.e. a known "assignment
    ++// init" ...
    ++- I = \( INIT_ASSIGN1 \)(...);
    ++)
    ++...>
    ++
    ++// ... and then no mention of "buf" or "&buf" until we get to a
    ++// strbuf_release(&buf) at the end ...
    ++(
    ++- \( REL1 \| REL2 \)( \( I \| &I \), ...);
    ++|
    ++- \( REL1 \| REL2 \)( \( &I \| I \) );
    ++)
    ++// ... and no use *after* either, e.g. we don't want to delete
    ++// init/strbuf_release() patterns, where "&buf" could be used
    ++// afterwards.
    ++  ... when != \( I \| &I \)
    ++      when strict
    ++// Note that we're intentionally loose in accepting e.g. a
    ++// "strbuf_init(&buf)" followed by a "string_list_clear(&buf,
    ++// 0)". It's assumed that the compiler will catch any such invalid
    ++// code, i.e. that our constructors/destructors don't take a "void *".
    ++//
    ++// This rule also isn't capable of finding cases where &buf is used,
    ++// but only to e.g. pass that variable to a static function which
    ++// doesn't use it. The analysis is only function-local.
    +
    + ## contrib/scalar/scalar.c ##
    +@@ contrib/scalar/scalar.c: static int cmd_diagnose(int argc, const char **argv)
    + 	int stdout_fd = -1, archiver_fd = -1;
    + 	time_t now = time(NULL);
    + 	struct tm tm;
    +-	struct strbuf path = STRBUF_INIT, buf = STRBUF_INIT;
    ++	struct strbuf buf = STRBUF_INIT;
    + 	int res = 0;
    + 
    + 	argc = parse_options(argc, argv, NULL, options,
    +@@ contrib/scalar/scalar.c: static int cmd_diagnose(int argc, const char **argv)
    + 	free(argv_copy);
    + 	strvec_clear(&archiver_args);
    + 	strbuf_release(&zip_path);
    +-	strbuf_release(&path);
    + 	strbuf_release(&buf);
    + 
    + 	return res;
     
      ## diff.c ##
     @@ diff.c: static void emit_diff_symbol_from_struct(struct diff_options *o,
-:  ----------- > 2:  4130dc15287 cocci: remove "when strict" from unused.cocci
-- 
2.36.1.1239.gfba91521d90

