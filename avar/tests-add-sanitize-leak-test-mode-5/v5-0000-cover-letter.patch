From 2cf226090b09acbaf8c8b4706467ccf18891010e Mon Sep 17 00:00:00 2001
Message-Id: <cover-v5-0.3-00000000000-20210907T211946Z-avarab@gmail.com>
In-Reply-To: <cover-v4-0.3-00000000000-20210907T151855Z-avarab@gmail.com>
References: <cover-v4-0.3-00000000000-20210907T151855Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 7 Sep 2021 23:19:46 +0200
Subject: [PATCH v5 0/3] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (3):
  Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
  CI: refactor "if" to "case" statement
  tests: add a test mode for SANITIZE=leak, run it in CI

 .github/workflows/main.yml |  6 ++++++
 Makefile                   |  5 +++++
 ci/install-dependencies.sh |  6 +++---
 ci/lib.sh                  | 31 +++++++++++++++++++++----------
 ci/run-build-and-tests.sh  |  2 +-
 t/README                   |  7 +++++++
 t/t0000-basic.sh           |  1 +
 t/t0004-unwritable.sh      |  3 ++-
 t/test-lib.sh              | 21 +++++++++++++++++++++
 9 files changed, 67 insertions(+), 15 deletions(-)

Range-diff against v4:
-:  ----------- > 1:  bdfe2279271 Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
-:  ----------- > 2:  6aaa60e3759 CI: refactor "if" to "case" statement
1:  fffbfc35c00 ! 3:  2cf226090b0 tests: add a test mode for SANITIZE=leak, run it in CI
    @@ Metadata
      ## Commit message ##
         tests: add a test mode for SANITIZE=leak, run it in CI
     
    -    While git can be compiled with SANITIZE=leak we have not run
    -    regression tests under that mode, memory leaks have only been fixed as
    +    While git can be compiled with SANITIZE=leak, we have not run
    +    regression tests under that mode. Memory leaks have only been fixed as
         one-offs without structured regression testing.
     
    -    This change add CI testing for it. We'll now build with GCC under
    +    This change adds CI testing for it. We'll now build with GCC under
         Linux and test t000[04]*.sh with SANITIZE=leak, and likewise with GCC
    -    on OSX. The new jobs are called "linux-SANITIZE=leak" and
    -    "osx-SANITIZE=leak".
    +    on OSX. The new jobs are called "linux-leaks" and "osx-leaks".
     
         The CI target uses a new GIT_TEST_PASSING_SANITIZE_LEAK=true test
         mode. When running in that mode, we'll assert that we were compiled
    @@ Commit message
         commit-graph tests). To be clear having a prerequisite could also be
         accomplished by using "LSAN_OPTIONS" directly.
     
    -    On the topi of "LSAN_OPTIONS": It would be nice to have a mode to
    +    On the topic of "LSAN_OPTIONS": It would be nice to have a mode to
         aggregate all failures in our various scripts, see [2] for a start at
         doing that which sets "log_path" in "LSAN_OPTIONS". I've punted on
    -    that for now, it can be added later, and that proposed patch is also
    -    hindered by us wanting to test e.g. test-tool leaks (and by proxy, any
    -    API leaks they uncover), not just the "common-main.c" entry point.
    +    that for now, it can be added later.
     
         As of writing this we've got major regressions between master..seen,
         i.e. the t000*.sh tests and more fixed since 31f9acf9ce2 (Merge branch
    @@ .github/workflows/main.yml: jobs:
                - jobname: linux-gcc-default
                  cc: gcc
                  pool: ubuntu-latest
    -+          - jobname: linux-SANITIZE=leak
    ++          - jobname: linux-leaks
     +            cc: gcc
     +            pool: ubuntu-latest
    -+          - jobname: osx-SANITIZE=leak
    ++          - jobname: osx-leaks
     +            cc: gcc
     +            pool: macos-latest
          env:
    @@ ci/install-dependencies.sh: UBUNTU_COMMON_PKGS="make libssl-dev libcurl4-openssl
      
      case "$jobname" in
     -linux-clang|linux-gcc)
    -+linux-clang|linux-gcc|linux-SANITIZE=leak)
    ++linux-clang|linux-gcc|linux-leaks)
      	sudo apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
      	sudo apt-get -q update
      	sudo apt-get -q -y install language-pack-is libsvn-perl apache2 \
      		$UBUNTU_COMMON_PKGS
      	case "$jobname" in
     -	linux-gcc)
    -+	linux-gcc|linux-SANITIZE=leak)
    ++	linux-gcc|linux-leaks)
      		sudo apt-get -q -y install gcc-8
      		;;
      	esac
    @@ ci/install-dependencies.sh: linux-clang|linux-gcc)
      	popd
      	;;
     -osx-clang|osx-gcc)
    -+osx-clang|osx-gcc|osx-SANITIZE=leak)
    ++osx-clang|osx-gcc|osx-leaks)
      	export HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1
      	# Uncomment this if you want to run perf tests:
      	# brew install gnu-time
    @@ ci/lib.sh: export GIT_TEST_CLONE_2GB=true
      
      case "$jobname" in
     -linux-clang|linux-gcc)
    -+linux-clang|linux-gcc|linux-SANITIZE=leak)
    ++linux-clang|linux-gcc|linux-leaks)
      	case "$jobname" in
     -	linux-gcc)
    -+	linux-gcc|linux-SANITIZE=leak)
    ++	linux-gcc|linux-leaks)
      		export CC=gcc-8
      		MAKEFLAGS="$MAKEFLAGS PYTHON_PATH=/usr/bin/python3"
      		;;
    @@ ci/lib.sh: linux-clang|linux-gcc)
      	export PATH="$GIT_LFS_PATH:$P4_PATH:$PATH"
      	;;
     -osx-clang|osx-gcc)
    -+osx-clang|osx-gcc|osx-SANITIZE=leak)
    ++osx-clang|osx-gcc|osx-leaks)
      	case "$jobname" in
     -	osx-gcc)
    -+	osx-gcc|osx-SANITIZE=leak)
    ++	osx-gcc|osx-leaks)
      		export CC=gcc-9
      		MAKEFLAGS="$MAKEFLAGS PYTHON_PATH=$(which python3)"
      		;;
    @@ ci/lib.sh: linux-musl)
      esac
      
     +case "$jobname" in
    -+linux-SANITIZE=leak|osx-SANITIZE=leak)
    ++linux-leaks|osx-leaks)
     +	export SANITIZE=leak
     +	export GIT_TEST_PASSING_SANITIZE_LEAK=true
     +	;;
    @@ ci/run-build-and-tests.sh: esac
      make
      case "$jobname" in
     -linux-gcc)
    -+linux-gcc|linux-SANITIZE=leak)
    ++linux-gcc|linux-leaks)
      	export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
      	make test
      	export GIT_TEST_SPLIT_INDEX=yes
    @@ t/README: excluded as so much relies on it, but this might change in the future.
     +themselves as passing with no memory leaks. Tests can be whitelisted
     +by setting "TEST_PASSES_SANITIZE_LEAK=true" before sourcing
     +"test-lib.sh" itself at the top of the test script. This test mode is
    -+used by the "linux-SANITIZE=leak" CI target.
    ++used by the "linux-leaks" CI target.
     +
      GIT_TEST_PROTOCOL_VERSION=<n>, when set, makes 'protocol.version'
      default to n.
-- 
2.33.0.819.g59feb45f5e0

