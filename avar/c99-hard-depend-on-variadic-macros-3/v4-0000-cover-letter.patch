From bd0f969be558f74202480972e9a3b2396b9a646e Mon Sep 17 00:00:00 2001
Message-Id: <cover-v4-0.2-00000000000-20220221T160314Z-avarab@gmail.com>
In-Reply-To: <cover-v3-0.3-00000000000-20220219T103752Z-avarab@gmail.com>
References: <cover-v3-0.3-00000000000-20220219T103752Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Mon, 21 Feb 2022 17:03:14 +0100
Subject: [PATCH v4 0/2] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (2):
  git-compat-util.h: clarify GCC v.s. C99-specific in comment
  C99: remove hardcoded-out !HAVE_VARIADIC_MACROS code

 Documentation/CodingGuidelines |   3 +
 banned.h                       |   5 --
 git-compat-util.h              |  16 +----
 trace.c                        |  80 +--------------------
 trace.h                        | 128 +++++++++++++++------------------
 trace2.c                       |  39 ----------
 trace2.h                       |  25 -------
 usage.c                        |  15 +---
 8 files changed, 65 insertions(+), 246 deletions(-)

Range-diff against v3:
-:  ----------- > 1:  1a15fe4fd74 git-compat-util.h: clarify GCC v.s. C99-specific in comment
1:  27ea260bbea ! 2:  bd0f969be55 trace.h: remove never-used TRACE_CONTEXT
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    trace.h: remove never-used TRACE_CONTEXT
    +    C99: remove hardcoded-out !HAVE_VARIADIC_MACROS code
     
    -    The definition of "TRACE_CONTEXT" as "__FILE__" added in
    -    e05bed960d3 (trace: add 'file:line' to all trace output, 2014-07-12)
    -    appeared between v6[1] and v7[2] of the series that added it.
    +    Remove the "else" branches of the HAVE_VARIADIC_MACROS macro, which
    +    have been unconditionally omitted since 765dc168882 (git-compat-util:
    +    always enable variadic macros, 2021-01-28).
     
    -    It does not appear to have been something anybody asked for, and
    -    doesn't seem to have been used by anyone since then to override it to
    -    something other than the default __FILE__.
    +    Since were always omitted, anyone trying to use a compiler without
    +    variadic macro support to compile a git since version
    +    git v2.31.0 or later would have had a compilation error. 10 months
    +    across a few releases since then should have been enough time for
    +    anyone who cared to run into that and report the issue.
     
    -    When trace2 was added in ee4512ed481 (trace2: create new combined
    -    trace facility, 2019-02-22) it added no such "configuration", and
    -    we're unlikely to ever want to configure this through these means.
    +    In addition to that, for anyone unsetting HAVE_VARIADIC_MACROS we've
    +    been emitting extremely verbose warnings since at least
    +    ee4512ed481 (trace2: create new combined trace facility,
    +    2019-02-22). That's because there is no such thing as a
    +    "region_enter_printf" or "region_leave_printf" format, so at least
    +    under GCC and Clang everything that includes trace.h (almost every
    +    file) emits a couple of warnings about that.
     
    -    I.e. I have considered (and probably will) make the usage.c macros
    -    support optional __FUNCTION__ at some point, that would need to have
    -    them passed as "mandatory" parameters (which might default to NULL) to
    -    the underlying function, for the reasons explained in the comment
    -    being removed here.
    +    There's a large benefit to being able to have a hard dependency rely
    +    on variadic macros, the code surrounding usage.c is hard to maintain
    +    if we need to write two implementations of everything, and by relying
    +    on "__FILE__" and "__LINE__" along with "__VA_ARGS__" we can in the
    +    future make error(), die() etc. log where they were called from. We've
    +    also recently merged d67fc4bf0ba (Merge branch 'bc/require-c99',
    +    2021-12-10) which further cements our hard dependency on C99.
     
    -    So let's just remove this indirection in favor of using __FILE__
    -    directly.
    +    So let's delete the fallback code, and update our CodingGuidelines to
    +    note that we depend on this. The added bullet-point starts with
    +    lower-case for consistency with other bullet-points in that section.
     
    -    1. https://lore.kernel.org/git/53A4A2CD.8010003@gmail.com/
    -    2. https://lore.kernel.org/git/53B33DED.3030809@gmail.com/
    +    The diff in "trace.h" is relatively hard to read, since we need to
    +    retain the existing API docs, which were comments on the code used if
    +    HAVE_VARIADIC_MACROS was not defined.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    + ## Documentation/CodingGuidelines ##
    +@@ Documentation/CodingGuidelines: For C programs:
    +    . since mid 2017 with 512f41cf, we have been using designated
    +      initializers for array (e.g. "int array[10] = { [5] = 2 }").
    + 
    ++   . since early 2021 with 765dc168882, we have been using variadic
    ++     macros, mostly for printf-like trace and debug macros.
    ++
    +    These used to be forbidden, but we have not heard any breakage
    +    report, and they are assumed to be safe.
    + 
    +
    + ## banned.h ##
    +@@
    + 
    + #undef sprintf
    + #undef vsprintf
    +-#ifdef HAVE_VARIADIC_MACROS
    + #define sprintf(...) BANNED(sprintf)
    + #define vsprintf(...) BANNED(vsprintf)
    +-#else
    +-#define sprintf(buf,fmt,arg) BANNED(sprintf)
    +-#define vsprintf(buf,fmt,arg) BANNED(vsprintf)
    +-#endif
    + 
    + #undef gmtime
    + #define gmtime(t) BANNED(gmtime)
    +
    + ## git-compat-util.h ##
    +@@ git-compat-util.h: static inline int regexec_buf(const regex_t *preg, const char *buf, size_t size,
    + #endif
    + #endif
    + 
    +-/*
    +- * This is always defined as a first step towards making the use of variadic
    +- * macros unconditional. If it causes compilation problems on your platform,
    +- * please report it to the Git mailing list at git@vger.kernel.org.
    +- */
    +-#define HAVE_VARIADIC_MACROS 1
    +-
    + /* usage.c: only to be used for testing BUG() implementation (see test-tool) */
    + extern int BUG_exit_code;
    + 
    +-#ifdef HAVE_VARIADIC_MACROS
    + __attribute__((format (printf, 3, 4))) NORETURN
    + void BUG_fl(const char *file, int line, const char *fmt, ...);
    + #define BUG(...) BUG_fl(__FILE__, __LINE__, __VA_ARGS__)
    +-#else
    +-__attribute__((format (printf, 1, 2))) NORETURN
    +-void BUG(const char *fmt, ...);
    +-#endif
    + 
    + /*
    +  * Preserves errno, prints a message, but gives no warning for ENOENT.
    +
    + ## trace.c ##
    +@@ trace.c: static int prepare_trace_line(const char *file, int line,
    + 	gettimeofday(&tv, NULL);
    + 	secs = tv.tv_sec;
    + 	localtime_r(&secs, &tm);
    +-	strbuf_addf(buf, "%02d:%02d:%02d.%06ld ", tm.tm_hour, tm.tm_min,
    +-		    tm.tm_sec, (long) tv.tv_usec);
    +-
    +-#ifdef HAVE_VARIADIC_MACROS
    +-	/* print file:line */
    +-	strbuf_addf(buf, "%s:%d ", file, line);
    ++	strbuf_addf(buf, "%02d:%02d:%02d.%06ld %s:%d", tm.tm_hour, tm.tm_min,
    ++		    tm.tm_sec, (long) tv.tv_usec, file, line);
    + 	/* align trace output (column 40 catches most files names in git) */
    + 	while (buf->len < 40)
    + 		strbuf_addch(buf, ' ');
    +-#endif
    + 
    + 	return 1;
    + }
    +@@ trace.c: static void trace_performance_vprintf_fl(const char *file, int line,
    + 	strbuf_release(&buf);
    + }
    + 
    +-#ifndef HAVE_VARIADIC_MACROS
    +-
    +-void trace_printf(const char *format, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, format);
    +-	trace_vprintf_fl(NULL, 0, &trace_default_key, format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-void trace_printf_key(struct trace_key *key, const char *format, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, format);
    +-	trace_vprintf_fl(NULL, 0, key, format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-void trace_argv_printf(const char **argv, const char *format, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, format);
    +-	trace_argv_vprintf_fl(NULL, 0, argv, format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-void trace_strbuf(struct trace_key *key, const struct strbuf *data)
    +-{
    +-	trace_strbuf_fl(NULL, 0, key, data);
    +-}
    +-
    +-void trace_performance(uint64_t nanos, const char *format, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, format);
    +-	trace_performance_vprintf_fl(NULL, 0, nanos, format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-void trace_performance_since(uint64_t start, const char *format, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, format);
    +-	trace_performance_vprintf_fl(NULL, 0, getnanotime() - start,
    +-				     format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-void trace_performance_leave(const char *format, ...)
    +-{
    +-	va_list ap;
    +-	uint64_t since;
    +-
    +-	if (perf_indent)
    +-		perf_indent--;
    +-
    +-	if (!format) /* Allow callers to leave without tracing anything */
    +-		return;
    +-
    +-	since = perf_start_times[perf_indent];
    +-	va_start(ap, format);
    +-	trace_performance_vprintf_fl(NULL, 0, getnanotime() - since,
    +-				     format, ap);
    +-	va_end(ap);
    +-}
    +-
    +-#else
    +-
    + void trace_printf_key_fl(const char *file, int line, struct trace_key *key,
    + 			 const char *format, ...)
    + {
    +@@ trace.c: void trace_performance_leave_fl(const char *file, int line,
    + 	va_end(ap);
    + }
    + 
    +-#endif /* HAVE_VARIADIC_MACROS */
    +-
    +-
    + static const char *quote_crnl(const char *path)
    + {
    + 	static struct strbuf new_path = STRBUF_INIT;
    +
      ## trace.h ##
     @@ trace.h: void trace_command_performance(const char **argv);
      void trace_verbatim(struct trace_key *key, const void *buf, unsigned len);
      uint64_t trace_performance_enter(void);
      
    --/*
    -- * TRACE_CONTEXT may be set to __FUNCTION__ if the compiler supports it. The
    -- * default is __FILE__, as it is consistent with assert(), and static function
    -- * names are not necessarily unique.
    +-#ifndef HAVE_VARIADIC_MACROS
    +-
    +-/**
    +- * Prints a formatted message, similar to printf.
    +- */
    +-__attribute__((format (printf, 1, 2)))
    +-void trace_printf(const char *format, ...);
    +-
    +-__attribute__((format (printf, 2, 3)))
    +-void trace_printf_key(struct trace_key *key, const char *format, ...);
    +-
    +-/**
    +- * Prints a formatted message, followed by a quoted list of arguments.
    +- */
    +-__attribute__((format (printf, 2, 3)))
    +-void trace_argv_printf(const char **argv, const char *format, ...);
    +-
    +-/**
    +- * Prints the strbuf, without additional formatting (i.e. doesn't
    +- * choke on `%` or even `\0`).
    +- */
    +-void trace_strbuf(struct trace_key *key, const struct strbuf *data);
    +-
    +-/**
    +- * Prints elapsed time (in nanoseconds) if GIT_TRACE_PERFORMANCE is enabled.
     - *
    -- * __FILE__ ":" __FUNCTION__ doesn't work with GNUC, as __FILE__ is supplied
    -- * by the preprocessor as a string literal, and __FUNCTION__ is filled in by
    -- * the compiler as a string constant.
    +- * Example:
    +- * ------------
    +- * uint64_t t = 0;
    +- * for (;;) {
    +- * 	// ignore
    +- * t -= getnanotime();
    +- * // code section to measure
    +- * t += getnanotime();
    +- * // ignore
    +- * }
    +- * trace_performance(t, "frotz");
    +- * ------------
     - */
    --#ifndef TRACE_CONTEXT
    --# define TRACE_CONTEXT __FILE__
    --#endif
    +-__attribute__((format (printf, 2, 3)))
    +-void trace_performance(uint64_t nanos, const char *format, ...);
     -
    - /**
    -  * Macros to add the file:line of the calling code, instead of that of
    -  * the trace function itself.
    -@@ trace.h: uint64_t trace_performance_enter(void);
    +-/**
    +- * Prints elapsed time since 'start' if GIT_TRACE_PERFORMANCE is enabled.
    +- *
    +- * Example:
    +- * ------------
    +- * uint64_t start = getnanotime();
    +- * // code section to measure
    +- * trace_performance_since(start, "foobar");
    +- * ------------
    +- */
    +-__attribute__((format (printf, 2, 3)))
    +-void trace_performance_since(uint64_t start, const char *format, ...);
    +-
    +-__attribute__((format (printf, 1, 2)))
    +-void trace_performance_leave(const char *format, ...);
    +-
    +-#else
    +-
    +-/*
    +- * Macros to add file:line - see above for C-style declarations of how these
    +- * should be used.
    +- */
    +-
    + /*
    +  * TRACE_CONTEXT may be set to __FUNCTION__ if the compiler supports it. The
    +  * default is __FILE__, as it is consistent with assert(), and static function
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
    + # define TRACE_CONTEXT __FILE__
    + #endif
    + 
    +-/*
    ++/**
    ++ * Macros to add the file:line of the calling code, instead of that of
    ++ * the trace function itself.
    ++ *
    +  * Note: with C99 variadic macros, __VA_ARGS__ must include the last fixed
    +  * parameter ('format' in this case). Otherwise, a call without variable
    +  * arguments will have a surplus ','. E.g.:
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
    +  * comma, but this is non-standard.
    +  */
    + 
    ++/**
    ++ * trace_printf(), accepts "const char *format, ...".
    ++ *
    ++ * Prints a formatted message, similar to printf.
    ++ */
    ++#define trace_printf(...) trace_printf_key(&trace_default_key, __VA_ARGS__)
    ++
    ++/**
    ++ * trace_printf_key(), accepts "struct trace_key *key, const char *format, ...".
    ++ */
      #define trace_printf_key(key, ...)					    \
      	do {								    \
      		if (trace_pass_fl(key))					    \
    --			trace_printf_key_fl(TRACE_CONTEXT, __LINE__, key,   \
    -+			trace_printf_key_fl(__FILE__, __LINE__, key,	    \
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
      					    __VA_ARGS__);		    \
      	} while (0)
      
    -@@ trace.h: uint64_t trace_performance_enter(void);
    +-#define trace_printf(...) trace_printf_key(&trace_default_key, __VA_ARGS__)
    +-
    ++/**
    ++ * trace_argv_printf(), accepts "struct trace_key *key, const char *format, ...)".
    ++ *
    ++ * Prints a formatted message, followed by a quoted list of arguments.
    ++ */
      #define trace_argv_printf(argv, ...)					    \
      	do {								    \
      		if (trace_pass_fl(&trace_default_key))			    \
    --			trace_argv_printf_fl(TRACE_CONTEXT, __LINE__,	    \
    -+			trace_argv_printf_fl(__FILE__, __LINE__,	    \
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
      					    argv, __VA_ARGS__);		    \
      	} while (0)
      
    -@@ trace.h: uint64_t trace_performance_enter(void);
    ++/**
    ++ * trace_strbuf(), accepts "struct trace_key *key, const struct strbuf *data".
    ++ *
    ++ * Prints the strbuf, without additional formatting (i.e. doesn't
    ++ * choke on `%` or even `\0`).
    ++ */
      #define trace_strbuf(key, data)						    \
      	do {								    \
      		if (trace_pass_fl(key))					    \
    --			trace_strbuf_fl(TRACE_CONTEXT, __LINE__, key, data);\
    -+			trace_strbuf_fl(__FILE__, __LINE__, key, data);	    \
    + 			trace_strbuf_fl(TRACE_CONTEXT, __LINE__, key, data);\
      	} while (0)
      
    - /**
    -@@ trace.h: uint64_t trace_performance_enter(void);
    ++/**
    ++ * trace_performance(), accepts "uint64_t nanos, const char *format, ...".
    ++ *
    ++ * Prints elapsed time (in nanoseconds) if GIT_TRACE_PERFORMANCE is enabled.
    ++ *
    ++ * Example:
    ++ * ------------
    ++ * uint64_t t = 0;
    ++ * for (;;) {
    ++ * 	// ignore
    ++ * t -= getnanotime();
    ++ * // code section to measure
    ++ * t += getnanotime();
    ++ * // ignore
    ++ * }
    ++ * trace_performance(t, "frotz");
    ++ * ------------
    ++ */
      #define trace_performance(nanos, ...)					    \
      	do {								    \
      		if (trace_pass_fl(&trace_perf_key))			    \
    --			trace_performance_fl(TRACE_CONTEXT, __LINE__, nanos,\
    -+			trace_performance_fl(__FILE__, __LINE__, nanos,	    \
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
      					     __VA_ARGS__);		    \
      	} while (0)
      
    -@@ trace.h: uint64_t trace_performance_enter(void);
    ++/**
    ++ * trace_performance_since(), accepts "uint64_t start, const char *format, ...".
    ++ *
    ++ * Prints elapsed time since 'start' if GIT_TRACE_PERFORMANCE is enabled.
    ++ *
    ++ * Example:
    ++ * ------------
    ++ * uint64_t start = getnanotime();
    ++ * // code section to measure
    ++ * trace_performance_since(start, "foobar");
    ++ * ------------
    ++ */
      #define trace_performance_since(start, ...)				    \
      	do {								    \
      		if (trace_pass_fl(&trace_perf_key))			    \
    --			trace_performance_fl(TRACE_CONTEXT, __LINE__,       \
    -+			trace_performance_fl(__FILE__, __LINE__,	    \
    - 					     getnanotime() - (start),	    \
    +@@ trace.h: void trace_performance_leave(const char *format, ...);
      					     __VA_ARGS__);		    \
      	} while (0)
    -@@ trace.h: uint64_t trace_performance_enter(void);
    + 
    ++/**
    ++ * trace_performance_leave(), accepts "const char *format, ...".
    ++ */
      #define trace_performance_leave(...)					    \
      	do {								    \
      		if (trace_pass_fl(&trace_perf_key))			    \
    --			trace_performance_leave_fl(TRACE_CONTEXT, __LINE__, \
    -+			trace_performance_leave_fl(__FILE__, __LINE__,	    \
    - 						   getnanotime(),	    \
    - 						   __VA_ARGS__);	    \
    - 	} while (0)
    +@@ trace.h: static inline int trace_pass_fl(struct trace_key *key)
    + 	return key->fd || !key->initialized;
    + }
    + 
    +-#endif /* HAVE_VARIADIC_MACROS */
    +-
    + #endif /* TRACE_H */
    +
    + ## trace2.c ##
    +@@ trace2.c: void trace2_region_enter_printf_fl(const char *file, int line,
    + 	va_end(ap);
    + }
    + 
    +-#ifndef HAVE_VARIADIC_MACROS
    +-void trace2_region_enter_printf(const char *category, const char *label,
    +-				const struct repository *repo, const char *fmt,
    +-				...)
    +-{
    +-	va_list ap;
    +-
    +-	va_start(ap, fmt);
    +-	trace2_region_enter_printf_va_fl(NULL, 0, category, label, repo, fmt,
    +-					 ap);
    +-	va_end(ap);
    +-}
    +-#endif
    +-
    + void trace2_region_leave_printf_va_fl(const char *file, int line,
    + 				      const char *category, const char *label,
    + 				      const struct repository *repo,
    +@@ trace2.c: void trace2_region_leave_printf_fl(const char *file, int line,
    + 	va_end(ap);
    + }
    + 
    +-#ifndef HAVE_VARIADIC_MACROS
    +-void trace2_region_leave_printf(const char *category, const char *label,
    +-				const struct repository *repo, const char *fmt,
    +-				...)
    +-{
    +-	va_list ap;
    +-
    +-	va_start(ap, fmt);
    +-	trace2_region_leave_printf_va_fl(NULL, 0, category, label, repo, fmt,
    +-					 ap);
    +-	va_end(ap);
    +-}
    +-#endif
    +-
    + void trace2_data_string_fl(const char *file, int line, const char *category,
    + 			   const struct repository *repo, const char *key,
    + 			   const char *value)
    +@@ trace2.c: void trace2_printf_fl(const char *file, int line, const char *fmt, ...)
    + 	va_end(ap);
    + }
    + 
    +-#ifndef HAVE_VARIADIC_MACROS
    +-void trace2_printf(const char *fmt, ...)
    +-{
    +-	va_list ap;
    +-
    +-	va_start(ap, fmt);
    +-	trace2_printf_va_fl(NULL, 0, fmt, ap);
    +-	va_end(ap);
    +-}
    +-#endif
    +-
    + const char *trace2_session_id(void)
    + {
    + 	return tr2_sid_get();
    +
    + ## trace2.h ##
    +@@ trace2.h: void trace2_region_enter_printf_fl(const char *file, int line,
    + 				   const struct repository *repo,
    + 				   const char *fmt, ...);
    + 
    +-#ifdef HAVE_VARIADIC_MACROS
    + #define trace2_region_enter_printf(category, label, repo, ...)                 \
    + 	trace2_region_enter_printf_fl(__FILE__, __LINE__, (category), (label), \
    + 				      (repo), __VA_ARGS__)
    +-#else
    +-/* clang-format off */
    +-__attribute__((format (region_enter_printf, 4, 5)))
    +-void trace2_region_enter_printf(const char *category, const char *label,
    +-				const struct repository *repo, const char *fmt,
    +-				...);
    +-/* clang-format on */
    +-#endif
    + 
    + /**
    +  * Emit a 'region_leave' event for <category>.<label> with optional
    +@@ trace2.h: void trace2_region_leave_printf_fl(const char *file, int line,
    + 				   const struct repository *repo,
    + 				   const char *fmt, ...);
    + 
    +-#ifdef HAVE_VARIADIC_MACROS
    + #define trace2_region_leave_printf(category, label, repo, ...)                 \
    + 	trace2_region_leave_printf_fl(__FILE__, __LINE__, (category), (label), \
    + 				      (repo), __VA_ARGS__)
    +-#else
    +-/* clang-format off */
    +-__attribute__((format (region_leave_printf, 4, 5)))
    +-void trace2_region_leave_printf(const char *category, const char *label,
    +-				const struct repository *repo, const char *fmt,
    +-				...);
    +-/* clang-format on */
    +-#endif
    + 
    + /**
    +  * Emit a key-value pair 'data' event of the form <category>.<key> = <value>.
    +@@ trace2.h: void trace2_printf_va_fl(const char *file, int line, const char *fmt,
    + 
    + void trace2_printf_fl(const char *file, int line, const char *fmt, ...);
    + 
    +-#ifdef HAVE_VARIADIC_MACROS
    + #define trace2_printf(...) trace2_printf_fl(__FILE__, __LINE__, __VA_ARGS__)
    +-#else
    +-/* clang-format off */
    +-__attribute__((format (printf, 1, 2)))
    +-void trace2_printf(const char *fmt, ...);
    +-/* clang-format on */
    +-#endif
    + 
    + /*
    +  * Optional platform-specific code to dump information about the
    +
    + ## usage.c ##
    +@@ usage.c: static NORETURN void BUG_vfl(const char *file, int line, const char *fmt, va_lis
    + 	va_copy(params_copy, params);
    + 
    + 	/* truncation via snprintf is OK here */
    +-	if (file)
    +-		snprintf(prefix, sizeof(prefix), "BUG: %s:%d: ", file, line);
    +-	else
    +-		snprintf(prefix, sizeof(prefix), "BUG: ");
    ++	snprintf(prefix, sizeof(prefix), "BUG: %s:%d: ", file, line);
    + 
    + 	vreportf(prefix, fmt, params);
    + 
    +@@ usage.c: static NORETURN void BUG_vfl(const char *file, int line, const char *fmt, va_lis
    + 	abort();
    + }
    + 
    +-#ifdef HAVE_VARIADIC_MACROS
    + NORETURN void BUG_fl(const char *file, int line, const char *fmt, ...)
    + {
    + 	va_list ap;
    +@@ usage.c: NORETURN void BUG_fl(const char *file, int line, const char *fmt, ...)
    + 	BUG_vfl(file, line, fmt, ap);
    + 	va_end(ap);
    + }
    +-#else
    +-NORETURN void BUG(const char *fmt, ...)
    +-{
    +-	va_list ap;
    +-	va_start(ap, fmt);
    +-	BUG_vfl(NULL, 0, fmt, ap);
    +-	va_end(ap);
    +-}
    +-#endif
    + 
    + #ifdef SUPPRESS_ANNOTATED_LEAKS
    + void unleak_memory(const void *ptr, size_t len)
-- 
2.35.1.1132.ga1fe46f8690

