From 947791d953518fd0b0cca62d0536b19ab96e086f Mon Sep 17 00:00:00 2001
Message-Id: <cover-0.5-00000000000-20210421T144811Z-avarab@gmail.com>
In-Reply-To: <cover-0.3-0000000000-20210420T122706Z-avarab@gmail.com>
References: <cover-0.3-0000000000-20210420T122706Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 21 Apr 2021 16:48:11 +0200
Subject: [PATCH v2 0/5] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (5):
  test-lib-functions: normalize test_path_is_missing() debugging
  Revert and amend "test-lib-functions: assert correct parameter count"
  test helpers: remove unused test-tool path-utils slice-tests
  test-helpers: rename "path-utils is_valid_path" to "is-valid-paths"
  test-helpers: split "file-size" into "file-size(s)"

 t/helper/test-path-utils.c  | 44 ++++++------------------
 t/t0060-path-utils.sh       |  2 +-
 t/t1050-large.sh            |  2 +-
 t/t5319-multi-pack-index.sh |  6 ++--
 t/test-lib-functions.sh     | 67 ++++++++++++++++---------------------
 5 files changed, 45 insertions(+), 76 deletions(-)

Range-diff against v1:
 1:  a8b483bc771 <  -:  ----------- check-non-portable-shell: check for "test <cond> -a/-o <cond>"
13:  fd33f6d71f0 =  1:  ba9d6251ad5 test-lib-functions: normalize test_path_is_missing() debugging
14:  67ddd821dfa =  2:  5f8e5ad27f5 Revert and amend "test-lib-functions: assert correct parameter count"
 2:  39759d00adf !  3:  44948c6ace9 test-lib: bring $remove_trash out of retirement
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    test-lib: bring $remove_trash out of retirement
    +    test helpers: remove unused test-tool path-utils slice-tests
     
    -    There's no point in creating a repository or directory only to decide
    -    right afterwards that we're skipping all the tests. We can save
    -    ourselves the redundant "git init" or "mkdir" and "rm -rf" in this
    -    case.
    -
    -    We carry around the "$remove_trash" variable because if the directory
    -    is unexpectedly gone at test_done time we'll hit the error about it
    -    being unexpectedly gone added in df4c0d1a792 (test-lib: abort when
    -    can't remove trash directory, 2017-04-20).
    -
    -    So let's partially revert 06478dab4c (test-lib: retire $remove_trash
    -    variable, 2017-04-23) and move the decision about whether to skip all
    -    tests earlier.
    -
    -    I tested this with --debug, see 4d0912a206 (test-lib.sh: do not barf
    -    under --debug at the end of the test, 2017-04-24) for a bug we don't
    -    want to re-introduce.
    -
    -    While I'm at it let's move the HOME assignment to just before
    -    test_create_repo, it could be lower, but it seems better to set it
    -    before calling anything in test-lib-functions.sh
    +    This utility was last used in the code removed in 4c2c38e800f (ci:
    +    modification of main.yml to use cmake for vs-build job,
    +    2020-06-26). Let's also remove this now-dead code.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/test-lib.sh ##
    -@@ t/test-lib.sh: test_done () {
    - 			esac
    - 		fi
    - 
    --		if test -z "$debug"
    -+		if test -z "$debug" && test -n "$remove_trash"
    - 		then
    - 			test -d "$TRASH_DIRECTORY" ||
    - 			error "Tests passed but trash directory already removed before test cleanup; aborting"
    -@@ t/test-lib.sh: then
    - 	exit 1
    - fi
    - 
    -+# Are we running this test at all?
    -+this_test=${0##*/}
    -+this_test=${this_test%%-*}
    -+if match_pattern_list "$this_test" $GIT_SKIP_TESTS
    -+then
    -+	say_color info >&3 "skipping test $this_test altogether"
    -+	skip_all="skip all tests in $this_test"
    -+	test_done
    -+fi
    -+
    -+# Last-minute variable setup
    -+HOME="$TRASH_DIRECTORY"
    -+GNUPGHOME="$HOME/gnupg-home-not-used"
    -+export HOME GNUPGHOME
    -+
    - # Test repository
    - rm -fr "$TRASH_DIRECTORY" || {
    - 	GIT_EXIT_OK=t
    -@@ t/test-lib.sh: rm -fr "$TRASH_DIRECTORY" || {
    - 	exit 1
    + ## t/helper/test-path-utils.c ##
    +@@ t/helper/test-path-utils.c: static int is_dotgitmodules(const char *path)
    + 	return is_hfs_dotgitmodules(path) || is_ntfs_dotgitmodules(path);
      }
      
    --HOME="$TRASH_DIRECTORY"
    --GNUPGHOME="$HOME/gnupg-home-not-used"
    --export HOME GNUPGHOME
    +-static int cmp_by_st_size(const void *a, const void *b)
    +-{
    +-	intptr_t x = (intptr_t)((struct string_list_item *)a)->util;
    +-	intptr_t y = (intptr_t)((struct string_list_item *)b)->util;
    +-
    +-	return x > y ? -1 : (x < y ? +1 : 0);
    +-}
     -
    -+remove_trash=t
    - if test -z "$TEST_NO_CREATE_REPO"
    - then
    - 	test_create_repo "$TRASH_DIRECTORY"
    -@@ t/test-lib.sh: fi
    - # in subprocesses like git equals our $PWD (for pathname comparisons).
    - cd -P "$TRASH_DIRECTORY" || exit 1
    + /*
    +  * A very simple, reproducible pseudo-random generator. Copied from
    +  * `test-genrandom.c`.
    +@@ t/helper/test-path-utils.c: int cmd__path_utils(int argc, const char **argv)
    + 		return 0;
    + 	}
      
    --this_test=${0##*/}
    --this_test=${this_test%%-*}
    --if match_pattern_list "$this_test" $GIT_SKIP_TESTS
    --then
    --	say_color info >&3 "skipping test $this_test altogether"
    --	skip_all="skip all tests in $this_test"
    --	test_done
    --fi
    +-	if (argc > 5 && !strcmp(argv[1], "slice-tests")) {
    +-		int res = 0;
    +-		long offset, stride, i;
    +-		struct string_list list = STRING_LIST_INIT_NODUP;
    +-		struct stat st;
    +-
    +-		offset = strtol(argv[2], NULL, 10);
    +-		stride = strtol(argv[3], NULL, 10);
    +-		if (stride < 1)
    +-			stride = 1;
    +-		for (i = 4; i < argc; i++)
    +-			if (stat(argv[i], &st))
    +-				res = error_errno("Cannot stat '%s'", argv[i]);
    +-			else
    +-				string_list_append(&list, argv[i])->util =
    +-					(void *)(intptr_t)st.st_size;
    +-		QSORT(list.items, list.nr, cmp_by_st_size);
    +-		for (i = offset; i < list.nr; i+= stride)
    +-			printf("%s\n", list.items[i].string);
     -
    - if test -n "$write_junit_xml"
    - then
    - 	junit_xml_dir="$TEST_OUTPUT_DIRECTORY/out"
    +-		return !!res;
    +-	}
    +-
    + 	if (argc > 1 && !strcmp(argv[1], "protect_ntfs_hfs"))
    + 		return !!protect_ntfs_hfs_benchmark(argc - 1, argv + 1);
    + 
 3:  d669ce31961 <  -:  ----------- test-lib tests: remove dead GIT_TEST_FRAMEWORK_SELFTEST variable
 4:  9313d35bf86 <  -:  ----------- test-lib-functions: reword "test_commit --append" docs
 5:  c916d648e49 <  -:  ----------- test-lib-functions: document test_commit --no-tag
 6:  9b6bf65ce1c <  -:  ----------- test-lib functions: add an --annotated option to "test_commit"
 7:  683b3ba3dd9 !  4:  ae5dc5d03b3 describe tests: convert setup to use test_commit
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    describe tests: convert setup to use test_commit
    +    test-helpers: rename "path-utils is_valid_path" to "is-valid-paths"
     
    -    Convert the setup of the describe tests to use test_commit when
    -    possible. This makes use of the new --annotated-tag option to
    -    test_commit.
    +    Rename this utility added in d2c84dad1c8 (mingw: refuse to access
    +    paths with trailing spaces or periods, 2019-09-05) to make it clear
    +    that it expects N number of arguments, and for consistency with
    +    dc2d9ba3187 (is_{hfs,ntfs}_dotgitmodules: add tests, 2018-05-12).
     
    -    Some of the setup here could simply be removed since the data being
    -    created wasn't important to any of the subsequent tests, so I've done
    -    so. E.g. assigning to the "one" variable was always useless, and just
    -    checking that we can describe HEAD after the first commit wasn't
    -    useful.
    -
    -    In the case of the "two" variable we could instead use the tag we just
    -    created. See 5312ab11fbf (Add describe test., 2007-01-13) for the
    -    initial version of this code. There's other cases here like redundant
    -    "test_tick" invocations, or the simplification of not echoing "X" to a
    -    file we're about to tag as "x", now we just use "x" in both cases.
    +    Let's also make it a dashed "is-valid-paths" instead of
    +    "is_valid_path*" to make it easier to grep the helper v.s. the C
    +    function it calls.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/t6120-describe.sh ##
    -@@ t/t6120-describe.sh: check_describe () {
    - }
    - 
    - test_expect_success setup '
    -+	test_commit initial file one &&
    -+	test_commit second file two &&
    -+	test_commit third file three &&
    -+	test_commit --annotate A file A &&
    -+	test_commit c file c &&
    - 
    --	test_tick &&
    --	echo one >file && git add file && git commit -m initial &&
    --	one=$(git rev-parse HEAD) &&
    --
    --	git describe --always HEAD &&
    --
    --	test_tick &&
    --	echo two >file && git add file && git commit -m second &&
    --	two=$(git rev-parse HEAD) &&
    --
    --	test_tick &&
    --	echo three >file && git add file && git commit -m third &&
    --
    --	test_tick &&
    --	echo A >file && git add file && git commit -m A &&
    --	test_tick &&
    --	git tag -a -m A A &&
    --
    --	test_tick &&
    --	echo c >file && git add file && git commit -m c &&
    --	test_tick &&
    --	git tag c &&
    --
    --	git reset --hard $two &&
    --	test_tick &&
    --	echo B >side && git add side && git commit -m B &&
    --	test_tick &&
    --	git tag -a -m B B &&
    -+	git reset --hard second &&
    -+	test_commit --annotate B side B &&
    - 
    - 	test_tick &&
    - 	git merge -m Merged c &&
    - 	merged=$(git rev-parse HEAD) &&
    + ## t/helper/test-path-utils.c ##
    +@@ t/helper/test-path-utils.c: int cmd__path_utils(int argc, const char **argv)
    + 	if (argc > 1 && !strcmp(argv[1], "protect_ntfs_hfs"))
    + 		return !!protect_ntfs_hfs_benchmark(argc - 1, argv + 1);
      
    --	git reset --hard $two &&
    --	test_tick &&
    --	echo D >another && git add another && git commit -m D &&
    --	test_tick &&
    --	git tag -a -m D D &&
    --	test_tick &&
    --	git tag -a -m R R &&
    --
    --	test_tick &&
    --	echo DD >another && git commit -a -m another &&
    -+	git reset --hard second &&
    -+	test_commit --no-tag D another D &&
    +-	if (argc > 1 && !strcmp(argv[1], "is_valid_path")) {
    ++	if (argc > 1 && !strcmp(argv[1], "is-valid-paths")) {
    + 		int res = 0, expect = 1, i;
      
    - 	test_tick &&
    --	git tag e &&
    -+	git tag -a -m R R &&
    - 
    --	test_tick &&
    --	echo DDD >another && git commit -a -m "yet another" &&
    -+	test_commit e another DD &&
    -+	test_commit --no-tag "yet another" another DDD &&
    - 
    - 	test_tick &&
    - 	git merge -m Merged $merged &&
    - 
    --	test_tick &&
    --	echo X >file && echo X >side && git add file side &&
    --	git commit -m x
    --
    -+	test_commit --no-tag x file
    + 		for (i = 2; i < argc; i++)
    +
    + ## t/t0060-path-utils.sh ##
    +@@ t/t0060-path-utils.sh: test_expect_success 'match .gitmodules' '
      '
      
    - check_describe A-* HEAD
    + test_expect_success MINGW 'is_valid_path() on Windows' '
    +-	test-tool path-utils is_valid_path \
    ++	test-tool path-utils is-valid-paths \
    + 		win32 \
    + 		"win32 x" \
    + 		../hello.txt \
 8:  dc0a863db72 <  -:  ----------- test-lib functions: add --printf option to test_commit
 9:  90bf55d2d42 <  -:  ----------- submodule tests: use symbolic-ref --short to discover branch name
10:  e0a1e2fd529 <  -:  ----------- test-lib: reformat argument list in test_create_repo()
11:  cedf5d383b0 <  -:  ----------- test-lib: do not show advice about init.defaultBranch under --verbose
12:  0dc0da94905 <  -:  ----------- test-lib: split up and deprecate test_create_repo()
15:  8fd51861b59 !  5:  947791d9535 test-lib-functions: remove last two parameter count assertions
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    test-lib-functions: remove last two parameter count assertions
    +    test-helpers: split "file-size" into "file-size(s)"
     
    -    Remove a couple of parameter count assertions where, unlike the
    -    preceding commit's migration to 'test -$x "$@"', we'll now silently do
    -    the "wrong" thing if given too many parameters. The benefit is less
    -    verbose trace output, as noted in the preceding commit.
    +    Split the "file-size" helper into two helpers, one that takes 1
    +    argument, and another one that takes N.
     
    -    In the case of "test_file_size", the "test-tool" we're invoking is
    -    happy to accept N parameters (it'll print out all N sizes). Let's just
    -    use "$@" in that case anyway. There's only a few callers, and
    -    eventually those should probably be moved to use the test-tool
    -    directly.
    +    This allows us to remove the "BUG" check in test-lib-functions.sh for
    +    briefer -x output, and more importantly will clearly distinguish those
    +    cases where we expect one argument v.s. many.
     
    -    That only leaves test_line_count, I suppose I could leave that one
    -    alone, but since it's the only common function left that does this
    -    assertion let's remove it for the brevity of the -x output and
    -    consistency with other functions.
    +    The use in t1050-large.sh wants to check just one pack, we used to
    +    check that explicitly before 53b67a801bb (tests: consolidate the
    +    `file_size` function into `test-lib-functions.sh`, 2020-11-07), now we
    +    do so again.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/test-lib-functions.sh ##
    -@@ t/test-lib-functions.sh: test_path_is_missing () {
    - # output through when the number of lines is wrong.
    + ## t/helper/test-path-utils.c ##
    +@@ t/helper/test-path-utils.c: static int protect_ntfs_hfs_benchmark(int argc, const char **argv)
    + 
    + int cmd__path_utils(int argc, const char **argv)
    + {
    ++	int is_file_size, is_file_sizes;
    ++
    + 	if (argc == 3 && !strcmp(argv[1], "normalize_path_copy")) {
    + 		char *buf = xmallocz(strlen(argv[2]));
    + 		int rv = normalize_path_copy(buf, argv[2]);
    +@@ t/helper/test-path-utils.c: int cmd__path_utils(int argc, const char **argv)
    + 		return !!res;
    + 	}
      
    - test_line_count () {
    --	if test $# != 3
    --	then
    --		BUG "not 3 parameters to test_line_count"
    --	elif ! test $(wc -l <"$3") "$1" "$2"
    -+	if ! test $(wc -l <"$3") "$1" "$2"
    - 	then
    - 		echo "test_line_count: line count for $3 !$1 $2"
    - 		cat "$3"
    +-	if (argc > 2 && !strcmp(argv[1], "file-size")) {
    ++	is_file_size = !strcmp(argv[1], "file-size");
    ++	is_file_sizes = !strcmp(argv[1], "file-sizes");
    ++	if (argc > 2 && (is_file_size || is_file_sizes)) {
    + 		int res = 0, i;
    + 		struct stat st;
    + 
    ++		if (is_file_size && argc > 3) {
    ++			res = error("too many arguments to is-file-size, use is-file-sizes?");
    ++			return res;
    ++		}
    ++
    + 		for (i = 2; i < argc; i++)
    + 			if (stat(argv[i], &st))
    + 				res = error_errno("Cannot stat '%s'", argv[i]);
    +
    + ## t/t1050-large.sh ##
    +@@ t/t1050-large.sh: do
    + 	test_expect_success "add with $config" '
    + 		test_when_finished "rm -f .git/objects/pack/pack-*.* .git/index" &&
    + 		git $config add large1 &&
    +-		sz=$(test_file_size .git/objects/pack/pack-*.pack) &&
    ++		sz=$(test-tool path-utils file-size .git/objects/pack/pack-*.pack) &&
    + 		case "$expect" in
    + 		small) test "$sz" -le 100000 ;;
    + 		large) test "$sz" -ge 100000 ;;
    +
    + ## t/t5319-multi-pack-index.sh ##
    +@@ t/t5319-multi-pack-index.sh: test_expect_success 'repack with minimum size does not alter existing packs' '
    + 		test-tool chmtime =-3 .git/objects/pack/pack-B* &&
    + 		test-tool chmtime =-2 .git/objects/pack/pack-A* &&
    + 		ls .git/objects/pack >expect &&
    +-		MINSIZE=$(test-tool path-utils file-size .git/objects/pack/*pack | sort -n | head -n 1) &&
    ++		MINSIZE=$(test-tool path-utils file-sizes .git/objects/pack/*pack | sort -n | head -n 1) &&
    + 		git multi-pack-index repack --batch-size=$MINSIZE &&
    + 		ls .git/objects/pack >actual &&
    + 		test_cmp expect actual
    +@@ t/t5319-multi-pack-index.sh: test_expect_success 'repack respects repack.packKeptObjects=false' '
    + 		test_line_count = 5 idx-list &&
    + 		test-tool read-midx .git/objects | grep idx >midx-list &&
    + 		test_line_count = 5 midx-list &&
    +-		THIRD_SMALLEST_SIZE=$(test-tool path-utils file-size .git/objects/pack/*pack | sort -n | sed -n 3p) &&
    ++		THIRD_SMALLEST_SIZE=$(test-tool path-utils file-sizes .git/objects/pack/*pack | sort -n | sed -n 3p) &&
    + 		BATCH_SIZE=$((THIRD_SMALLEST_SIZE + 1)) &&
    + 		git multi-pack-index repack --batch-size=$BATCH_SIZE &&
    + 		ls .git/objects/pack/*idx >idx-list &&
    +@@ t/t5319-multi-pack-index.sh: test_expect_success 'repack creates a new pack' '
    + 		cd dup &&
    + 		ls .git/objects/pack/*idx >idx-list &&
    + 		test_line_count = 5 idx-list &&
    +-		THIRD_SMALLEST_SIZE=$(test-tool path-utils file-size .git/objects/pack/*pack | sort -n | head -n 3 | tail -n 1) &&
    ++		THIRD_SMALLEST_SIZE=$(test-tool path-utils file-sizes .git/objects/pack/*pack | sort -n | head -n 3 | tail -n 1) &&
    + 		BATCH_SIZE=$(($THIRD_SMALLEST_SIZE + 1)) &&
    + 		git multi-pack-index repack --batch-size=$BATCH_SIZE &&
    + 		ls .git/objects/pack/*idx >idx-list &&
    +
    + ## t/test-lib-functions.sh ##
     @@ t/test-lib-functions.sh: test_line_count () {
      }
      
-- 
2.31.1.721.gbeb6a21927

