From b28a9c76b30b624108c59667e266647815e856c8 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v4-00.10-00000000000-20210804T165031Z-avarab@gmail.com>
In-Reply-To: <cover-00.12-00000000000-20210721T233307Z-avarab@gmail.com>
References: <cover-00.12-00000000000-20210721T233307Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 4 Aug 2021 18:50:31 +0200
Subject: [PATCH v4 00/10] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (10):
  serve: mark has_capability() as static
  transport: rename "fetch" in transport_vtable to "fetch_refs"
  transport: use designated initializers
  serve: use designated initializers
  serve: move transfer.advertiseSID check into session_id_advertise()
  serve.c: move version line to advertise_capabilities()
  serve.[ch]: don't pass "struct strvec *keys" to commands
  serve.[ch]: remove "serve_options", split up --advertise-refs code
  {upload,receive}-pack tests: add --advertise-refs tests
  upload-pack: document and rename --advertise-refs

 Documentation/git-receive-pack.txt        |   5 +
 Documentation/git-upload-pack.txt         |  12 +-
 Documentation/technical/http-protocol.txt |   3 +
 Documentation/technical/protocol-v2.txt   |   3 +
 builtin/receive-pack.c                    |   3 +-
 builtin/upload-pack.c                     |  28 ++--
 http-backend.c                            |   2 +-
 ls-refs.c                                 |   3 +-
 ls-refs.h                                 |   4 +-
 protocol-caps.c                           |   3 +-
 protocol-caps.h                           |   4 +-
 serve.c                                   |  83 ++++++-----
 serve.h                                   |  12 +-
 t/helper/test-serve-v2.c                  |  14 +-
 t/t5555-http-smart-common.sh              | 161 ++++++++++++++++++++++
 transport-helper.c                        |  18 +--
 transport-internal.h                      |   2 +-
 transport.c                               |  32 ++---
 upload-pack.c                             |  21 +--
 upload-pack.h                             |  14 +-
 20 files changed, 298 insertions(+), 129 deletions(-)
 create mode 100755 t/t5555-http-smart-common.sh

Range-diff against v3:
 1:  ffe96a7f415 <  -:  ----------- tests: add a test mode for SANITIZE=leak, run it in CI
 2:  540bba26d66 <  -:  ----------- SANITIZE tests: fix memory leaks in t13*config*, add to whitelist
 3:  302d82365d5 <  -:  ----------- SANITIZE tests: fix memory leaks in t5701*, add to whitelist
 4:  3e21dd9526a <  -:  ----------- SANITIZE tests: fix leak in mailmap.c
 5:  f291cee5387 <  -:  ----------- upload-pack: run is_repository_shallow() before setup_revisions()
 6:  c428b8086d0 <  -:  ----------- revision.h: refactor "disable_stdin" and "read_from_stdin"
 7:  8a071b5c222 <  -:  ----------- revision.[ch]: add a "handle_stdin_line" API
 8:  81c96ca9e7d <  -:  ----------- pack-objects.c: do stdin parsing via revision.c's API
 9:  0558caf3da9 <  -:  ----------- pack-objects.c: make use of REV_INFO_STDIN_LINE_PROCESS
10:  d5360bb6f74 <  -:  ----------- bundle doc: rewrite the "DESCRIPTION" section
11:  a0f95ce3a1d <  -:  ----------- bundle doc: elaborate on object prerequisites
12:  6d66d4480ff <  -:  ----------- bundle doc: elaborate on rev<->ref restriction
13:  d40be975688 <  -:  ----------- revision.h: add an "again" return value to "handle_stdin_line"
14:  a1e00e20c95 <  -:  ----------- bundle: allow specifying ref names in --stdin input
15:  09fb55e704f <  -:  ----------- bundle tests: use ">file" not ": >file"
16:  2721723bfd4 <  -:  ----------- bundle tests: use test_cmp instead of grep
17:  192fb64ef82 =  1:  21d91dff9d8 serve: mark has_capability() as static
18:  d716bd3c537 =  2:  8b76204cc7f transport: rename "fetch" in transport_vtable to "fetch_refs"
19:  d31690614af =  3:  8d171ba9631 transport: use designated initializers
20:  13f1a8d8325 =  4:  c7b110cd16c serve: use designated initializers
21:  99eeff6f890 <  -:  ----------- serve.c: add call_{advertise,command}() indirection
22:  be719dc3dc1 !  5:  f1c267a406d serve: add support for a "startup" git_config() callback
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    serve: add support for a "startup" git_config() callback
    +    serve: move transfer.advertiseSID check into session_id_advertise()
     
    -    Since the introduction of serve.c we've added git_config() callbacks
    -    and other config reading for capabilities in the following commits:
    +    In 6b5b6e422ee (serve: advertise session ID in v2 capabilities,
    +    2020-11-11) the check for transfer.advertiseSID was added to the
    +    beginning of the main serve() loop. Thus on startup of the server we'd
    +    populate it.
     
    -    - e20b4192a37 (upload-pack: support hidden refs with protocol v2, 2018-12-18)
    -    - 08450ef7918 (upload-pack: clear filter_options for each v2 fetch command, 2020-05-08)
    -    - 6b5b6e422ee (serve: advertise session ID in v2 capabilities, 2020-11-11)
    -    - 59e1205d167 (ls-refs: report unborn targets of symrefs, 2021-02-05)
    -
    -    Of these 08450ef7918 fixed code that needed to read config on a
    -    per-request basis, whereas most of the config reading just wants to
    -    check if we've enabled one semi-static config variable or other. We'd
    -    like to re-read that value eventually, but from request-to-request
    -    it's OK if we retain the old one, and it isn't impacted by other
    -    request data.
    -
    -    So let's support this common pattern as a "startup_config" callback,
    -    making use of our recently added "call_{advertise,command}()"
    -    functions. This allows us to simplify e.g. the "ensure_config_read()"
    -    function added in 59e1205d167 (ls-refs: report unborn targets of
    -    symrefs, 2021-02-05).
    -
    -    We could read all the config for all the protocol capabilities, but
    -    let's do it one callback at a time in anticipation that some won't be
    -    called at all, and that some might be more expensive than others in
    -    the future.
    -
    -    I'm not migrating over the code in the upload_pack_v2 function in
    -    upload-pack.c yet, that case is more complex since it deals with both
    -    v1 and v2. It will be dealt with in a code a subsequent commit.
    -
    -    As we'll see in subsequent commits, by moving the
    -    transfer.advertisesid config reading out of serve() we can simplify
    -    the codepath around advertising-only requests. See 6b5b6e422ee (serve:
    -    advertise session ID in v2 capabilities, 2020-11-11)) for the commit
    -    that added transfer.advertisesid.
    +    Let's instead use an explicit lazy initialization pattern in
    +    session_id_advertise() itself, we'll still look the config up only
    +    once per-process, but by moving it out of serve() itself the further
    +    changing of that routine becomes easier.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## ls-refs.c ##
    + ## serve.c ##
     @@
    - #include "pkt-line.h"
    - #include "config.h"
    - 
    --static int config_read;
    --static int advertise_unborn;
    --static int allow_unborn;
    -+/* "unborn" is on by default if there's no lsrefs.unborn config */
    -+static int advertise_unborn = 1;
    -+static int allow_unborn = 1;
    - 
    --static void ensure_config_read(void)
    -+int ls_refs_startup_config(const char *var, const char *value, void *data)
    - {
    --	const char *str = NULL;
    --
    --	if (config_read)
    --		return;
    --
    --	if (repo_config_get_string_tmp(the_repository, "lsrefs.unborn", &str)) {
    --		/*
    --		 * If there is no such config, advertise and allow it by
    --		 * default.
    --		 */
    --		advertise_unborn = 1;
    --		allow_unborn = 1;
    --	} else {
    --		if (!strcmp(str, "advertise")) {
    --			advertise_unborn = 1;
    -+	if (!strcmp(var, "lsrefs.unborn")) {
    -+		if (!strcmp(value, "advertise")) {
    -+			/* Allowed and advertised by default */
    -+		} else if (!strcmp(value, "allow")) {
    -+			advertise_unborn = 0;
    - 			allow_unborn = 1;
    --		} else if (!strcmp(str, "allow")) {
    --			allow_unborn = 1;
    --		} else if (!strcmp(str, "ignore")) {
    --			/* do nothing */
    -+		} else if (!strcmp(value, "ignore")) {
    -+			advertise_unborn = 0;
    -+			allow_unborn = 0;
    - 		} else {
    --			die(_("invalid value '%s' for lsrefs.unborn"), str);
    -+			die(_("invalid value '%s' for lsrefs.unborn"), value);
    - 		}
    - 	}
    --	config_read = 1;
    -+	return 0;
    - }
    - 
    - /*
    -@@ ls-refs.c: int ls_refs(struct repository *r, struct strvec *keys,
    + #include "serve.h"
    + #include "upload-pack.h"
      
    - 	memset(&data, 0, sizeof(data));
    - 	strvec_init(&data.prefixes);
    +-static int advertise_sid;
     -
    --	ensure_config_read();
    - 	git_config(ls_refs_config, NULL);
    - 
    - 	while (packet_reader_read(request) == PACKET_READ_NORMAL) {
    -@@ ls-refs.c: int ls_refs(struct repository *r, struct strvec *keys,
    - int ls_refs_advertise(struct repository *r, struct strbuf *value)
    + static int always_advertise(struct repository *r,
    + 			    struct strbuf *value)
      {
    - 	if (value) {
    --		ensure_config_read();
    - 		if (advertise_unborn)
    - 			strbuf_addstr(value, "unborn");
    - 	}
    -
    - ## ls-refs.h ##
    -@@ ls-refs.h: struct strvec;
    - struct packet_reader;
    - int ls_refs(struct repository *r, struct strvec *keys,
    - 	    struct packet_reader *request);
    -+int ls_refs_startup_config(const char *var, const char *value, void *data);
    - int ls_refs_advertise(struct repository *r, struct strbuf *value);
    - 
    - #endif /* LS_REFS_H */
    -
    - ## serve.c ##
     @@ serve.c: static int object_format_advertise(struct repository *r,
      	return 1;
      }
      
    -+static int session_id_startup_config(const char *var, const char *value, void *data)
    -+{
    -+	if (!strcmp(var, "transfer.advertisesid"))
    -+		advertise_sid = git_config_bool(var, value);
    -+	return 0;
    -+}
    -+
    ++static int advertise_sid = -1;
      static int session_id_advertise(struct repository *r, struct strbuf *value)
      {
    ++	if (advertise_sid == -1 &&
    ++	    git_config_get_bool("transfer.advertisesid", &advertise_sid))
    ++		advertise_sid = 0;
      	if (!advertise_sid)
    -@@ serve.c: struct protocol_capability {
    - 	 */
    - 	const char *name;
    - 
    -+	/*
    -+	 * A git_config() callback that'll be called only once for the
    -+	 * lifetime of the process, possibly over many different
    -+	 * requests. Used for reading config that's expected to be
    -+	 * static.
    -+	 *
    -+	 * The "command" or "advertise" callbacks themselves are
    -+	 * expected to read config that needs to be more current than
    -+	 * that, or which is dependent on request data.
    -+	 */
    -+	int (*startup_config)(const char *var, const char *value, void *data);
    -+
    -+	/*
    -+	 * A boolean to check if we've called our "startup_config"
    -+	 * callback.
    -+	 */
    -+	int have_startup_config;
    -+
    - 	/*
    - 	 * Function queried to see if a capability should be advertised.
    - 	 * Optionally a value can be specified by adding it to 'value'.
    -@@ serve.c: static struct protocol_capability capabilities[] = {
    - 	},
    - 	{
    - 		.name = "ls-refs",
    -+		.startup_config = ls_refs_startup_config,
    - 		.advertise = ls_refs_advertise,
    - 		.command = ls_refs,
    - 	},
    -@@ serve.c: static struct protocol_capability capabilities[] = {
    - 	},
    - 	{
    - 		.name = "session-id",
    -+		.startup_config = session_id_startup_config,
    - 		.advertise = session_id_advertise,
    - 	},
    - 	{
    -@@ serve.c: static struct protocol_capability capabilities[] = {
    - 	},
    - };
    - 
    -+static void read_startup_config(struct protocol_capability *command)
    -+{
    -+	if (!command->startup_config)
    -+		return;
    -+	if (command->have_startup_config++)
    -+		return;
    -+	git_config(command->startup_config, NULL);
    -+}
    -+
    - static int call_advertise(struct protocol_capability *command,
    - 			  struct repository *r, struct strbuf *value)
    - {
    -+	read_startup_config(command);
    -+
    - 	return command->advertise(r, value);
    - }
    - 
    -@@ serve.c: static int call_command(struct protocol_capability *command,
    - 			struct repository *r, struct strvec *keys,
    - 			struct packet_reader *request)
    - {
    -+
    -+	read_startup_config(command);
    -+
    - 	return command->command(r, keys, request);
    - }
    - 
    + 		return 0;
    + 	if (value)
     @@ serve.c: static int process_request(void)
      /* Main serve loop for protocol version 2 */
      void serve(struct serve_options *options)
23:  b7928ddbe9b =  6:  14ef399b177 serve.c: move version line to advertise_capabilities()
28:  e4eb31b5b8e !  7:  578eb3f9c3d serve.[ch]: don't pass "struct strvec *keys" to commands
    @@ Commit message
         2018-03-15) was passing in the raw capabilities "keys", but nothing
         downstream of it ever used them.
     
    -    Let's remove that code because it's not needed, and because if and
    -    when we need to pass data about the advertisement (I have some WIP
    -    patches for that), it makes much more sense to have the serve.c parse
    -    the capabilities, and then pass specific information we need down than
    -    expecting its API users to re-do their own parsing of the raw data.
    +    Let's remove that code because it's not needed. If we do end up
    +    needing to pass information about the advertisement in the future
    +    it'll make more sense to have serve.c parse the capabilities keys and
    +    pass the result of its parsing, rather than expecting expecting its
    +    API users to parse the same keys again.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    @@ ls-refs.h
     -int ls_refs(struct repository *r, struct strvec *keys,
     -	    struct packet_reader *request);
     +int ls_refs(struct repository *r, struct packet_reader *request);
    - int ls_refs_startup_config(const char *var, const char *value, void *data);
      int ls_refs_advertise(struct repository *r, struct strbuf *value);
      
    + #endif /* LS_REFS_H */
     
      ## protocol-caps.c ##
     @@ protocol-caps.c: static void send_info(struct repository *r, struct packet_writer *writer,
    - 	strbuf_release(&send_buffer);
    + 	}
      }
      
     -int cap_object_info(struct repository *r, struct strvec *keys,
    @@ protocol-caps.h
      #endif /* PROTOCOL_CAPS_H */
     
      ## serve.c ##
    -@@ serve.c: static int session_id_advertise(struct repository *r, struct strbuf *value)
    - }
    - 
    - typedef int (*advertise_fn_t)(struct repository *r, struct strbuf *value);
    --typedef int (*command_fn_t)(struct repository *r, struct strvec *keys,
    -+typedef int (*command_fn_t)(struct repository *r,
    - 			    struct packet_reader *request);
    - 
    - struct protocol_capability {
     @@ serve.c: struct protocol_capability {
      
      	/*
    @@ serve.c: struct protocol_capability {
      	 * use to read the command specific part of the request.  Every command
      	 * MUST read until a flush packet is seen before sending a response.
      	 *
    -@@ serve.c: static int call_command(struct protocol_capability *command,
    + 	 * This field should be NULL for capabilities which are not commands.
    + 	 */
    +-	int (*command)(struct repository *r,
    +-		       struct strvec *keys,
    +-		       struct packet_reader *request);
    ++	int (*command)(struct repository *r, struct packet_reader *request);
    + };
      
    - 	read_startup_config(command);
    + static struct protocol_capability capabilities[] = {
    +@@ serve.c: static int process_request(void)
    + 	if (has_capability(&keys, "session-id", &client_sid))
    + 		trace2_data_string("transfer", NULL, "client-sid", client_sid);
      
    --	return command->command(r, keys, request);
    -+	return command->command(r, request);
    - }
    +-	command->command(the_repository, &keys, &reader);
    ++	command->command(the_repository, &reader);
      
    - void protocol_v2_advertise_capabilities(void)
    + 	strvec_clear(&keys);
    + 	return 0;
     
      ## upload-pack.c ##
     @@ upload-pack.c: enum fetch_state {
    @@ upload-pack.c: enum fetch_state {
      	struct upload_pack_data data;
     
      ## upload-pack.h ##
    -@@ upload-pack.h: void upload_pack(const int advertise_refs, const int stateless_rpc,
    - 		 const int timeout);
    +@@ upload-pack.h: struct upload_pack_options {
    + void upload_pack(struct upload_pack_options *options);
      
      struct repository;
     -struct strvec;
24:  fb80f152713 !  8:  e8c184912b3 serve.[ch]: remove "serve_options", split up --advertise-refs code
    @@ http-backend.c: static void get_info_refs(struct strbuf *hdr, char *arg)
      
     
      ## serve.c ##
    -@@ serve.c: static int call_command(struct protocol_capability *command,
    - 	return command->command(r, keys, request);
    - }
    +@@ serve.c: static struct protocol_capability capabilities[] = {
    + 	},
    + };
      
     -static void advertise_capabilities(void)
     +void protocol_v2_advertise_capabilities(void)
    @@ upload-pack.h
     +		 const int timeout);
      
      struct repository;
    - struct strvec;
    + struct packet_reader;
25:  beafe9811c1 !  9:  f519b2b5b23 {upload,receive}-pack tests: add --advertise-refs tests
    @@ Commit message
     
      ## t/t5555-http-smart-common.sh (new) ##
     @@
    ++#!/bin/sh
    ++
     +test_description='test functionality common to smart fetch & push'
     +
     +. ./test-lib.sh
26:  c6870b5f18a = 10:  b28a9c76b30 upload-pack: document and rename --advertise-refs
27:  2d4c3d0d463 <  -:  ----------- upload-pack.c: convert to new serve.c "startup" config cb
-- 
2.33.0.rc0.587.gbfc8ffe61b6

