From 7fef92872f3abddc4f420fb2dfcf3d040ab2be5a Mon Sep 17 00:00:00 2001
Message-Id: <cover-00.10-00000000000-20220302T131742Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 2 Mar 2022 14:17:42 +0100
Subject: [PATCH 00/10] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (10):
  hook tests: turn exit code assertions into a loop
  t5540: don't rely on "hook/post-update.sample"
  tests: assume the hooks are disabled by default
  bugreport tests: tighten up "git bugreport -s hooks" test
  tests: indent and add hook setup to "test_expect_success"
  hook tests: get rid of unnecessary sub-shells
  fetch+push tests: have tests clean up their own mess
  test-lib-functions: add and use a "test_hook" wrapper
  tests: change "mkdir -p && write_script" to use "test_hook"
  tests: change "cat && chmod +x" to use "test_hook"

 t/t0029-core-unsetenvvars.sh        |   3 +-
 t/t0091-bugreport.sh                |  20 +--
 t/t1350-config-hooks-path.sh        |   4 +-
 t/t1416-ref-transaction-hooks.sh    |  27 ++--
 t/t1800-hook.sh                     |  45 +++----
 t/t3404-rebase-interactive.sh       |  10 +-
 t/t3412-rebase-root.sh              |  18 +--
 t/t3413-rebase-hook.sh              |  18 +--
 t/t3430-rebase-merges.sh            |   6 +-
 t/t4150-am.sh                       |  24 +---
 t/t5401-update-hooks.sh             |  62 ++++-----
 t/t5402-post-merge-hook.sh          |  16 ++-
 t/t5403-post-checkout-hook.sh       |   3 +-
 t/t5406-remote-rejects.sh           |   2 +-
 t/t5407-post-rewrite-hook.sh        |  14 +-
 t/t5409-colorize-remote-messages.sh |   2 +-
 t/t5411-proc-receive-hook.sh        |   4 +-
 t/t5510-fetch.sh                    |   6 +-
 t/t5516-fetch-push.sh               | 192 +++++++++++++---------------
 t/t5521-pull-options.sh             |   4 +-
 t/t5534-push-signed.sh              |  26 ++--
 t/t5540-http-push-webdav.sh         |   4 +-
 t/t5541-http-push-smart.sh          |  22 ++--
 t/t5547-push-quarantine.sh          |   4 +-
 t/t5548-push-porcelain.sh           |   2 +-
 t/t5601-clone.sh                    |   4 +-
 t/t6500-gc.sh                       |  18 +--
 t/t7113-post-index-change-hook.sh   |   7 +-
 t/t7519-status-fsmonitor.sh         |  20 ++-
 t/t9001-send-email.sh               |   4 +-
 t/t9800-git-p4-basic.sh             |  23 ++--
 t/test-lib-functions.sh             |  52 ++++++++
 32 files changed, 320 insertions(+), 346 deletions(-)

Range-diff:
 -:  ----------- >  1:  706460d10b9 hook tests: turn exit code assertions into a loop
 -:  ----------- >  2:  4bee939a894 t5540: don't rely on "hook/post-update.sample"
 -:  ----------- >  3:  0519102edeb tests: assume the hooks are disabled by default
 -:  ----------- >  4:  1da2efc9886 bugreport tests: tighten up "git bugreport -s hooks" test
 2:  6f805f7ebac !  5:  8dc478460ee tests: change "cat && chmod +x" to use "write_hook"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    tests: change "cat && chmod +x" to use "write_hook"
    +    tests: indent and add hook setup to "test_expect_success"
     
    -    Refactor various test code to use the "write_hook()" helper. Let's
    -    indent this code and add it to "test_expect_success" while we're at
    -    it.
    +    Indent various hook setup code in the test suite that's using a manual
    +    "cat && chmod" pattern.
     
    -    As in a preceding commit some of this code drops the explicit "mkdir
    -    -p", but as noted we'll be having the "write_hook" wrapper handle that
    -    soon anyway.
    +    These should also consistently use "#!$SHELL_PATH" instead of
    +    "#!/bin/sh", i.e. "test_script". Let's fix that in a subsequent
    +    commit, which will be easier to review after this smaller change.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## t/t3412-rebase-root.sh ##
     @@ t/t3412-rebase-root.sh: test_expect_success 'rebase --root fails with too many args' '
    - '
      
      test_expect_success 'setup pre-rebase hook' '
    --	mkdir -p .git/hooks &&
    + 	mkdir -p .git/hooks &&
     -	cat >.git/hooks/pre-rebase <<EOF &&
     -#!$SHELL_PATH
     -echo "\$1,\$2" >.git/PRE-REBASE-INPUT
     -EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	echo "$1,$2" >.git/PRE-REBASE-INPUT
    ++	cat >.git/hooks/pre-rebase <<-EOF &&
    ++	#!$SHELL_PATH
    ++	echo "\$1,\$2" >.git/PRE-REBASE-INPUT
     +	EOF
    + 	chmod +x .git/hooks/pre-rebase
      '
      cat > expect <<EOF
    - 4
    -@@ t/t3412-rebase-root.sh: commit work7~5
    - EOF
    +@@ t/t3412-rebase-root.sh: EOF
      
      test_expect_success 'setup pre-rebase hook that fails' '
    --	mkdir -p .git/hooks &&
    + 	mkdir -p .git/hooks &&
     -	cat >.git/hooks/pre-rebase <<EOF &&
     -#!$SHELL_PATH
     -false
     -EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    ++	cat >.git/hooks/pre-rebase <<-EOF &&
    ++	#!$SHELL_PATH
     +	false
     +	EOF
    + 	chmod +x .git/hooks/pre-rebase
      '
      
    - test_expect_success 'pre-rebase hook stops rebase' '
     
      ## t/t3413-rebase-hook.sh ##
     @@ t/t3413-rebase-hook.sh: test_expect_success 'rebase -i' '
    - '
      
      test_expect_success 'setup pre-rebase hook' '
    --	mkdir -p .git/hooks &&
    + 	mkdir -p .git/hooks &&
     -	cat >.git/hooks/pre-rebase <<EOF &&
     -#!$SHELL_PATH
     -echo "\$1,\$2" >.git/PRE-REBASE-INPUT
     -EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	echo "$1,$2" >.git/PRE-REBASE-INPUT
    ++	cat >.git/hooks/pre-rebase <<-EOF &&
    ++	#!$SHELL_PATH
    ++	echo "\$1,\$2" >.git/PRE-REBASE-INPUT
     +	EOF
    + 	chmod +x .git/hooks/pre-rebase
      '
      
    - test_expect_success 'pre-rebase hook gets correct input (1)' '
     @@ t/t3413-rebase-hook.sh: test_expect_success 'pre-rebase hook gets correct input (6)' '
    - '
      
      test_expect_success 'setup pre-rebase hook that fails' '
    --	mkdir -p .git/hooks &&
    + 	mkdir -p .git/hooks &&
     -	cat >.git/hooks/pre-rebase <<EOF &&
     -#!$SHELL_PATH
     -false
     -EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    ++	cat >.git/hooks/pre-rebase <<-EOF &&
    ++	#!$SHELL_PATH
     +	false
     +	EOF
    + 	chmod +x .git/hooks/pre-rebase
      '
      
    - test_expect_success 'pre-rebase hook stops rebase (1)' '
     
      ## t/t5401-update-hooks.sh ##
     @@ t/t5401-update-hooks.sh: test_expect_success setup '
    @@ t/t5401-update-hooks.sh: test_expect_success setup '
      	GIT_DIR=victim.git git update-ref refs/heads/tofail $commit1 &&
      	git update-ref refs/heads/main $commit1 &&
     -	git update-ref refs/heads/tofail $commit0
    --'
     +	git update-ref refs/heads/tofail $commit0 &&
    ++
    ++	cat >victim.git/hooks/pre-receive <<-\EOF &&
    ++	#!/bin/sh
    ++	printf %s "$@" >>$GIT_DIR/pre-receive.args
    ++	cat - >$GIT_DIR/pre-receive.stdin
    ++	echo STDOUT pre-receive
    ++	echo STDERR pre-receive >&2
    ++	EOF
    ++	chmod u+x victim.git/hooks/pre-receive &&
    ++
    ++	cat >victim.git/hooks/update <<-\EOF &&
    ++	#!/bin/sh
    ++	echo "$@" >>$GIT_DIR/update.args
    ++	read x; printf %s "$x" >$GIT_DIR/update.stdin
    ++	echo STDOUT update $1
    ++	echo STDERR update $1 >&2
    ++	test "$1" = refs/heads/main || exit
    ++	EOF
    ++	chmod u+x victim.git/hooks/update &&
    ++
    ++	cat >victim.git/hooks/post-receive <<-\EOF &&
    ++	#!/bin/sh
    ++	printf %s "$@" >>$GIT_DIR/post-receive.args
    ++	cat - >$GIT_DIR/post-receive.stdin
    ++	echo STDOUT post-receive
    ++	echo STDERR post-receive >&2
    ++	EOF
    ++	chmod u+x victim.git/hooks/post-receive &&
    ++
    ++	cat >victim.git/hooks/post-update <<-\EOF &&
    ++	#!/bin/sh
    ++	echo "$@" >>$GIT_DIR/post-update.args
    ++	read x; printf %s "$x" >$GIT_DIR/post-update.stdin
    ++	echo STDOUT post-update
    ++	echo STDERR post-update >&2
    ++	EOF
    ++	chmod u+x victim.git/hooks/post-update
    + '
      
     -cat >victim.git/hooks/pre-receive <<'EOF'
     -#!/bin/sh
    @@ t/t5401-update-hooks.sh: test_expect_success setup '
     -echo STDERR pre-receive >&2
     -EOF
     -chmod u+x victim.git/hooks/pre-receive
    -+	write_hook -C victim.git pre-receive <<-\EOF &&
    -+	printf %s "$@" >>$GIT_DIR/pre-receive.args
    -+	cat - >$GIT_DIR/pre-receive.stdin
    -+	echo STDOUT pre-receive
    -+	echo STDERR pre-receive >&2
    -+	EOF
    - 
    +-
     -cat >victim.git/hooks/update <<'EOF'
     -#!/bin/sh
     -echo "$@" >>$GIT_DIR/update.args
    @@ t/t5401-update-hooks.sh: test_expect_success setup '
     -test "$1" = refs/heads/main || exit
     -EOF
     -chmod u+x victim.git/hooks/update
    -+	write_hook -C victim.git update <<-\EOF &&
    -+	echo "$@" >>$GIT_DIR/update.args
    -+	read x; printf %s "$x" >$GIT_DIR/update.stdin
    -+	echo STDOUT update $1
    -+	echo STDERR update $1 >&2
    -+	test "$1" = refs/heads/main || exit
    -+	EOF
    - 
    +-
     -cat >victim.git/hooks/post-receive <<'EOF'
     -#!/bin/sh
     -printf %s "$@" >>$GIT_DIR/post-receive.args
    @@ t/t5401-update-hooks.sh: test_expect_success setup '
     -echo STDERR post-receive >&2
     -EOF
     -chmod u+x victim.git/hooks/post-receive
    -+	write_hook -C victim.git post-receive <<-\EOF &&
    -+	printf %s "$@" >>$GIT_DIR/post-receive.args
    -+	cat - >$GIT_DIR/post-receive.stdin
    -+	echo STDOUT post-receive
    -+	echo STDERR post-receive >&2
    -+	EOF
    - 
    +-
     -cat >victim.git/hooks/post-update <<'EOF'
     -#!/bin/sh
     -echo "$@" >>$GIT_DIR/post-update.args
    @@ t/t5401-update-hooks.sh: test_expect_success setup '
     -echo STDERR post-update >&2
     -EOF
     -chmod u+x victim.git/hooks/post-update
    -+	write_hook -C victim.git post-update <<-\EOF
    -+	echo "$@" >>$GIT_DIR/post-update.args
    -+	read x; printf %s "$x" >$GIT_DIR/post-update.stdin
    -+	echo STDOUT post-update
    -+	echo STDERR post-update >&2
    -+	EOF
    -+'
    - 
    +-
      test_expect_success push '
      	test_must_fail git send-pack --force ./victim.git \
    -
    - ## t/t5402-post-merge-hook.sh ##
    -@@ t/t5402-post-merge-hook.sh: test_expect_success setup '
    - 	GIT_DIR=clone2/.git git update-index --add a
    - '
    - 
    --for clone in 1 2; do
    --	cat >clone${clone}/.git/hooks/post-merge <<'EOF'
    --#!/bin/sh
    --echo $@ >> $GIT_DIR/post-merge.args
    --EOF
    --	chmod u+x clone${clone}/.git/hooks/post-merge
    --done
    -+test_expect_success 'setup clone hooks' '
    -+	test_when_finished "rm -f hook" &&
    -+	cat >hook <<-\EOF &&
    -+	echo $@ >> $GIT_DIR/post-merge.args
    -+	EOF
    -+
    -+	write_hook -C clone1 post-merge <hook &&
    -+	write_hook -C clone2 post-merge <hook
    -+'
    - 
    - test_expect_success 'post-merge does not run for up-to-date ' '
    - 	GIT_DIR=clone1/.git git merge $commit0 &&
    + 		main tofail >send.out 2>send.err
     
      ## t/t5407-post-rewrite-hook.sh ##
     @@ t/t5407-post-rewrite-hook.sh: test_expect_success 'setup' '
    @@ t/t5407-post-rewrite-hook.sh: test_expect_success 'setup' '
     -cat > "$TRASH_DIRECTORY"/post-rewrite.data
     -EOF
     -chmod u+x .git/hooks/post-rewrite
    -+	write_hook post-rewrite <<-EOF
    ++	cat >.git/hooks/post-rewrite <<-EOF &&
    ++	#!/bin/sh
     +	echo \$@ > "$TRASH_DIRECTORY"/post-rewrite.args
     +	cat > "$TRASH_DIRECTORY"/post-rewrite.data
     +	EOF
    ++	chmod u+x .git/hooks/post-rewrite
     +'
      
      clear_hook_input () {
      	rm -f post-rewrite.args post-rewrite.data
     
    - ## t/t5516-fetch-push.sh ##
    -@@ t/t5516-fetch-push.sh: mk_test_with_hooks() {
    - 	(
    - 		cd "$repo_name" &&
    - 		mkdir .git/hooks &&
    --		cd .git/hooks &&
    - 
    --		cat >pre-receive <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook pre-receive <<-'EOF' &&
    - 		cat - >>pre-receive.actual
    - 		EOF
    - 
    --		cat >update <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook update <<-'EOF' &&
    - 		printf "%s %s %s\n" "$@" >>update.actual
    - 		EOF
    - 
    --		cat >post-receive <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook post-receive <<-'EOF' &&
    - 		cat - >>post-receive.actual
    - 		EOF
    - 
    --		cat >post-update <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook post-update <<-'EOF'
    - 		for ref in "$@"
    - 		do
    - 			printf "%s\n" "$ref" >>post-update.actual
    - 		done
    - 		EOF
    --
    --		chmod +x pre-receive update post-receive post-update
    - 	)
    - }
    - 
    -
      ## t/t5541-http-push-smart.sh ##
     @@ t/t5541-http-push-smart.sh: test_expect_success 'create and delete remote branch' '
      	test_must_fail git show-ref --verify refs/remotes/origin/dev
    @@ t/t5541-http-push-smart.sh: test_expect_success 'create and delete remote branch
      
     -cat >"$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update" <<EOF
     -#!/bin/sh
    -+write_hook -C "$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git" update <<\EOF
    - exit 1
    - EOF
    +-exit 1
    +-EOF
     -chmod a+x "$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update"
    ++test_expect_success 'setup rejected update hook' '
    ++	cat >"$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update" <<-EOF &&
    ++	#!/bin/sh
    ++	exit 1
    ++	EOF
    ++	chmod a+x "$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update" &&
      
    - cat >exp <<EOF
    - remote: error: hook declined to update refs/heads/dev2
    -
    - ## t/t5601-clone.sh ##
    -@@ t/t5601-clone.sh: test_expect_success 'clone from hooks' '
    - 	cd .. &&
    - 	git init r1 &&
    - 	cd r1 &&
    --	cat >.git/hooks/pre-commit <<-\EOF &&
    --	#!/bin/sh
    -+	write_hook pre-commit <<-\EOF &&
    - 	git clone ../r0 ../r2
    - 	exit 1
    - 	EOF
    --	chmod u+x .git/hooks/pre-commit &&
    - 	: >file &&
    - 	git add file &&
    - 	test_must_fail git commit -m invoke-hook &&
    +-cat >exp <<EOF
    +-remote: error: hook declined to update refs/heads/dev2
    +-To http://127.0.0.1:$LIB_HTTPD_PORT/smart/test_repo.git
    +- ! [remote rejected] dev2 -> dev2 (hook declined)
    +-error: failed to push some refs to 'http://127.0.0.1:$LIB_HTTPD_PORT/smart/test_repo.git'
    +-EOF
    ++	cat >exp <<-EOF
    ++	remote: error: hook declined to update refs/heads/dev2
    ++	To http://127.0.0.1:$LIB_HTTPD_PORT/smart/test_repo.git
    ++	 ! [remote rejected] dev2 -> dev2 (hook declined)
    ++	error: failed to push some refs to '\''http://127.0.0.1:$LIB_HTTPD_PORT/smart/test_repo.git'\''
    ++	EOF
    ++'
    + 
    + test_expect_success 'rejected update prints status' '
    + 	cd "$ROOT_PATH"/test_repo_clone &&
 -:  ----------- >  6:  d86ee06b46e hook tests: get rid of unnecessary sub-shells
 -:  ----------- >  7:  7ce22dbe738 fetch+push tests: have tests clean up their own mess
 1:  ca55471d134 !  8:  d4102e9b929 test-lib-functions: add and use a "write_hook" wrapper
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    test-lib-functions: add and use a "write_hook" wrapper
    +    test-lib-functions: add and use a "test_hook" wrapper
     
    -    Add a "write_hook" wrapper for the common case of "write_script
    -    .git/hooks/<NAME>". This also accepts a "-C" option like
    -    "test_commit". Let's convert various trivial cases of "write_script"
    -    over to it.
    +    Add a "test_hook" wrapper similar to the existing "test_config"
    +    wrapper added in d960c47a881 (test-lib: add helper functions for
    +    config, 2011-08-17).
     
    -    For now this doesn't have much of an advantage, but in a subsequent
    -    commit we'll implicitly create the leading "hooks" directory. This
    -    will help us get rid of our --template dependency for "hooks".
    +    This wrapper:
    +
    +     - Will clean up the hook with "test_when_finished", unless --setup is
    +       provided.
    +
    +     - Will error if we clobber a hook, unless --clobber is provided.
    +
    +     - Takes a name like "update" instead of ".git/hooks/update".
    +
    +     - Accepts -C <dir>, like "test_config" and "test_commit".
    +
    +    By using a wrapper we'll be able to easily change all the hook-related
    +    code that assumes that the template-created ".git/hooks" directory is
    +    created by "init", "clone" etc. once another topic follows-up and
    +    changes the test suite to stop creating trash directories using those
    +    templates.
    +
    +    In addition this will make it easy to have the hooks configured using
    +    the "configuration-based hooks" topic, once we get around to
    +    integrating that. I.e. we'll be able to run the tests in a mode where
    +    we sometimes create a .git/hooks/<name>, and other times create a
    +    script in another location, and point the relevant configuration
    +    snippet to it.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    + ## t/t0091-bugreport.sh ##
    +@@ t/t0091-bugreport.sh: test_expect_success 'can create leading directories outside of a git dir' '
    + test_expect_success 'indicates populated hooks' '
    + 	test_when_finished rm git-bugreport-hooks.txt &&
    + 
    +-	write_script .git/hooks/applypatch-msg <<-\EOF &&
    ++	test_hook applypatch-msg <<-\EOF &&
    + 	true
    + 	EOF
    +-	write_script .git/hooks/unknown-hook <<-\EOF &&
    ++	test_hook unknown-hook <<-\EOF &&
    + 	true
    + 	EOF
    + 	git bugreport -s hooks &&
    +
      ## t/t1416-ref-transaction-hooks.sh ##
     @@ t/t1416-ref-transaction-hooks.sh: test_expect_success setup '
    + '
    + 
      test_expect_success 'hook allows updating ref if successful' '
    - 	test_when_finished "rm .git/hooks/reference-transaction" &&
    +-	test_when_finished "rm .git/hooks/reference-transaction" &&
      	git reset --hard PRE &&
     -	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
      		echo "$*" >>actual
      	EOF
      	cat >expect <<-EOF &&
     @@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook allows updating ref if successful' '
    + '
    + 
      test_expect_success 'hook aborts updating ref in prepared state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction" &&
    +-	test_when_finished "rm .git/hooks/reference-transaction" &&
      	git reset --hard PRE &&
     -	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
      		if test "$1" = prepared
      		then
      			exit 1
     @@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook aborts updating ref in prepared state' '
    + '
    + 
      test_expect_success 'hook gets all queued updates in prepared state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    +-	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    ++	test_when_finished "rm actual" &&
      	git reset --hard PRE &&
     -	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
      		if test "$1" = prepared
      		then
      			while read -r line
     @@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook gets all queued updates in prepared state' '
    + '
    + 
      test_expect_success 'hook gets all queued updates in committed state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    +-	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    ++	test_when_finished "rm actual" &&
      	git reset --hard PRE &&
     -	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
      		if test "$1" = committed
      		then
      			while read -r line
     @@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook gets all queued updates in committed state' '
    + '
    + 
      test_expect_success 'hook gets all queued updates in aborted state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    +-	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    ++	test_when_finished "rm actual" &&
      	git reset --hard PRE &&
     -	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
      		if test "$1" = aborted
      		then
      			while read -r line
    @@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'interleaving hook calls s
      	git init --bare target-repo.git &&
      
     -	write_script target-repo.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C target-repo.git reference-transaction <<-\EOF &&
    ++	test_hook -C target-repo.git reference-transaction <<-\EOF &&
      		echo $0 "$@" >>actual
      	EOF
      
     -	write_script target-repo.git/hooks/update <<-\EOF &&
    -+	write_hook -C target-repo.git update <<-\EOF &&
    ++	test_hook -C target-repo.git update <<-\EOF &&
      		echo $0 "$@" >>actual
      	EOF
      
    +@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook does not get called on packing refs' '
    + 	# Pack references first such that we are in a known state.
    + 	git pack-refs --all &&
    + 
    +-	write_script .git/hooks/reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
    + 		echo "$@" >>actual
    + 		cat >>actual
    + 	EOF
    +@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'deleting packed ref calls hook once' '
    + 	git update-ref refs/heads/to-be-deleted $POST_OID &&
    + 	git pack-refs --all &&
    + 
    +-	write_script .git/hooks/reference-transaction <<-\EOF &&
    ++	test_hook reference-transaction <<-\EOF &&
    + 		echo "$@" >>actual
    + 		cat >>actual
    + 	EOF
    +
    + ## t/t1800-hook.sh ##
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run: nonexistent hook with --ignore-missing' '
    + '
    + 
    + test_expect_success 'git hook run: basic' '
    +-	write_script .git/hooks/test-hook <<-EOF &&
    ++	test_hook test-hook <<-EOF &&
    + 	echo Test hook
    + 	EOF
    + 
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run: basic' '
    + '
    + 
    + test_expect_success 'git hook run: stdout and stderr both write to our stderr' '
    +-	write_script .git/hooks/test-hook <<-EOF &&
    ++	test_hook test-hook <<-EOF &&
    + 	echo >&1 Will end up on stderr
    + 	echo >&2 Will end up on stderr
    + 	EOF
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run: stdout and stderr both write to our stderr' '
    + for code in 1 2 128 129
    + do
    + 	test_expect_success "git hook run: exit code $code is passed along" '
    +-		write_script .git/hooks/test-hook <<-EOF &&
    ++		test_hook test-hook <<-EOF &&
    + 		exit $code
    + 		EOF
    + 
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run arg u ments without -- is not allowed' '
    + '
    + 
    + test_expect_success 'git hook run -- pass arguments' '
    +-	write_script .git/hooks/test-hook <<-\EOF &&
    ++	test_hook test-hook <<-\EOF &&
    + 	echo $1
    + 	echo $2
    + 	EOF
    +@@ t/t1800-hook.sh: test_expect_success 'git hook run -- pass arguments' '
    + '
    + 
    + test_expect_success 'git hook run -- out-of-repo runs excluded' '
    +-	write_script .git/hooks/test-hook <<-EOF &&
    ++	test_hook test-hook <<-EOF &&
    + 	echo Test hook
    + 	EOF
    + 
    +@@ t/t1800-hook.sh: test_expect_success 'git -c core.hooksPath=<PATH> hook run' '
    + 	Hook ran four
    + 	EOF
    + 
    ++	test_hook test-hook <<-EOF &&
    ++	echo Test hook
    ++	EOF
    ++
    + 	# Test various ways of specifying the path. See also
    + 	# t1350-config-hooks-path.sh
    + 	>actual &&
     
      ## t/t5406-remote-rejects.sh ##
     @@ t/t5406-remote-rejects.sh: test_description='remote push rejects are reported by client'
    @@ t/t5406-remote-rejects.sh: test_description='remote push rejects are reported by
      
      test_expect_success 'setup' '
     -	write_script .git/hooks/update <<-\EOF &&
    -+	write_hook update <<-\EOF &&
    ++	test_hook update <<-\EOF &&
      	exit 1
      	EOF
      	echo 1 >file &&
    @@ t/t5409-colorize-remote-messages.sh: test_description='remote messages are color
      
      test_expect_success 'setup' '
     -	write_script .git/hooks/update <<-\EOF &&
    -+	write_hook update <<-\EOF &&
    ++	test_hook --setup update <<-\EOF &&
      	echo error: error
      	echo ERROR: also highlighted
      	echo hint: hint
    @@ t/t5411-proc-receive-hook.sh: setup_upstream_and_workbench () {
      
      		# setup pre-receive hook
     -		write_script upstream.git/hooks/pre-receive <<-\EOF &&
    -+		write_hook -C upstream.git pre-receive <<-\EOF &&
    ++		test_hook --setup -C upstream.git pre-receive <<-\EOF &&
      		exec >&2
      		echo "# pre-receive hook"
      		while read old new ref
    @@ t/t5411-proc-receive-hook.sh: setup_upstream_and_workbench () {
      
      		# setup post-receive hook
     -		write_script upstream.git/hooks/post-receive <<-\EOF &&
    -+		write_hook -C upstream.git post-receive <<-\EOF &&
    ++		test_hook --setup -C upstream.git post-receive <<-\EOF &&
      		exec >&2
      		echo "# post-receive hook"
      		while read old new ref
    @@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic executes a single referenc
      
      	rm -f atomic/actual &&
     -	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic reference-transaction <<-\EOF &&
    ++	test_hook -C atomic reference-transaction <<-\EOF &&
      		( echo "$*" && cat ) >>actual
      	EOF
      
    @@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic aborts all reference updat
      
      	rm -f atomic/actual &&
     -	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic/.git reference-transaction <<-\EOF &&
    ++	test_hook -C atomic/.git reference-transaction <<-\EOF &&
      		( echo "$*" && cat ) >>actual
      		exit 1
      	EOF
    @@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic --append appends to FETCH_
      	cp atomic/.git/FETCH_HEAD expected &&
      
     -	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic reference-transaction <<-\EOF &&
    ++	test_hook -C atomic reference-transaction <<-\EOF &&
      		exit 1
      	EOF
      
     
      ## t/t5516-fetch-push.sh ##
     @@ t/t5516-fetch-push.sh: test_expect_success 'updateInstead with push-to-checkout hook' '
    - 		git reset --hard HEAD^^ &&
    - 		git tag initial &&
    - 		git config receive.denyCurrentBranch updateInstead &&
    --		write_script .git/hooks/push-to-checkout <<-\EOF
    -+		write_hook push-to-checkout <<-\EOF
    - 		echo >&2 updating from $(git rev-parse HEAD)
    - 		echo >&2 updating to "$1"
    + 	git -C testrepo reset --hard HEAD^^ &&
    + 	git -C testrepo tag initial &&
    + 	git -C testrepo config receive.denyCurrentBranch updateInstead &&
    +-	write_script testrepo/.git/hooks/push-to-checkout <<-\EOF &&
    ++	test_hook -C testrepo push-to-checkout <<-\EOF &&
    + 	echo >&2 updating from $(git rev-parse HEAD)
    + 	echo >&2 updating to "$1"
      
     @@ t/t5516-fetch-push.sh: test_expect_success 'updateInstead with push-to-checkout hook' '
    - 	(
    - 		cd void &&
    - 		git config receive.denyCurrentBranch updateInstead &&
    --		write_script .git/hooks/push-to-checkout <<-\EOF
    -+		write_hook push-to-checkout <<-\EOF
    - 		if git rev-parse --quiet --verify HEAD
    - 		then
    - 			has_head=yes
    + 	test_when_finished "rm -rf void" &&
    + 	git init void &&
    + 	git -C void config receive.denyCurrentBranch updateInstead &&
    +-	write_script void/.git/hooks/push-to-checkout <<-\EOF &&
    ++	test_hook -C void push-to-checkout <<-\EOF &&
    + 	if git rev-parse --quiet --verify HEAD
    + 	then
    + 		has_head=yes
     
      ## t/t5521-pull-options.sh ##
     @@ t/t5521-pull-options.sh: test_expect_success 'git pull --no-verify flag passed to merge' '
    @@ t/t5521-pull-options.sh: test_expect_success 'git pull --no-verify flag passed t
      	test_commit -C src one &&
      	git clone src dst &&
     -	write_script dst/.git/hooks/commit-msg <<-\EOF &&
    -+	write_hook -C dst commit-msg <<-\EOF &&
    ++	test_hook -C dst commit-msg <<-\EOF &&
      	false
      	EOF
      	test_commit -C src two &&
    @@ t/t5521-pull-options.sh: test_expect_success 'git pull --no-verify --verify pass
      	test_commit -C src one &&
      	git clone src dst &&
     -	write_script dst/.git/hooks/commit-msg <<-\EOF &&
    -+	write_hook -C dst commit-msg <<-\EOF &&
    ++	test_hook -C dst commit-msg <<-\EOF &&
      	false
      	EOF
      	test_commit -C src two &&
     
    + ## t/t5540-http-push-webdav.sh ##
    +@@ t/t5540-http-push-webdav.sh: test_expect_success 'setup remote repository' '
    + 	git clone --bare test_repo test_repo.git &&
    + 	cd test_repo.git &&
    + 	git --bare update-server-info &&
    +-	write_script hooks/post-update <<-\EOF &&
    ++	test_hook --setup post-update <<-\EOF &&
    + 	exec git update-server-info
    + 	EOF
    + 	ORIG_HEAD=$(git rev-parse --verify HEAD) &&
    +
      ## t/t5547-push-quarantine.sh ##
     @@ t/t5547-push-quarantine.sh: test_description='check quarantine of objects during push'
      
      test_expect_success 'create picky dest repo' '
      	git init --bare dest.git &&
     -	write_script dest.git/hooks/pre-receive <<-\EOF
    -+	write_hook -C dest.git pre-receive <<-\EOF
    ++	test_hook --setup -C dest.git pre-receive <<-\EOF
      	while read old new ref; do
      		test "$(git log -1 --format=%s $new)" = reject && exit 1
      	done
    @@ t/t5547-push-quarantine.sh: test_expect_success 'push to repo path with path sep
      test_expect_success 'updating a ref from quarantine is forbidden' '
      	git init --bare update.git &&
     -	write_script update.git/hooks/pre-receive <<-\EOF &&
    -+	write_hook -C update.git pre-receive <<-\EOF &&
    ++	test_hook -C update.git pre-receive <<-\EOF &&
      	read old new refname
      	git update-ref refs/heads/unrelated $new
      	exit 1
    @@ t/t5548-push-porcelain.sh: run_git_push_porcelain_output_test() {
      
      	test_expect_success "prepare pre-receive hook ($PROTOCOL)" '
     -		write_script "$upstream/hooks/pre-receive" <<-EOF
    -+		write_hook -C "$upstream" pre-receive <<-EOF
    ++		test_hook --setup -C "$upstream" pre-receive <<-EOF
      		exit 1
      		EOF
      	'
     
      ## t/t6500-gc.sh ##
     @@ t/t6500-gc.sh: test_expect_success 'pre-auto-gc hook can stop auto gc' '
    + 	EOF
    + 
      	git init pre-auto-gc-hook &&
    - 	(
    - 		cd pre-auto-gc-hook &&
    --		write_script ".git/hooks/pre-auto-gc" <<-\EOF &&
    -+		write_hook pre-auto-gc <<-\EOF &&
    - 		echo >&2 no gc for you &&
    - 		exit 1
    - 		EOF
    +-	write_script "pre-auto-gc-hook/.git/hooks/pre-auto-gc" <<-\EOF &&
    ++	test_hook -C pre-auto-gc-hook pre-auto-gc <<-\EOF &&
    + 	echo >&2 no gc for you &&
    + 	exit 1
    + 	EOF
     @@ t/t6500-gc.sh: test_expect_success 'pre-auto-gc hook can stop auto gc' '
    + 	See "git help gc" for manual housekeeping.
    + 	EOF
      
    - 	(
    - 		cd pre-auto-gc-hook &&
    --		write_script ".git/hooks/pre-auto-gc" <<-\EOF &&
    -+		write_hook pre-auto-gc <<-\EOF &&
    - 		echo >&2 will gc for you &&
    - 		exit 0
    +-	write_script "pre-auto-gc-hook/.git/hooks/pre-auto-gc" <<-\EOF &&
    ++	test_hook -C pre-auto-gc-hook --clobber pre-auto-gc <<-\EOF &&
    + 	echo >&2 will gc for you &&
    + 	exit 0
    + 	EOF
    +
    + ## t/t7519-status-fsmonitor.sh ##
    +@@ t/t7519-status-fsmonitor.sh: dirty_repo () {
    + }
    + 
    + write_integration_script () {
    +-	write_script .git/hooks/fsmonitor-test<<-\EOF
    ++	test_hook --setup --clobber fsmonitor-test<<-\EOF
    + 	if test "$#" -ne 2
    + 	then
    + 		echo "$0: exactly 2 arguments expected"
    +@@ t/t7519-status-fsmonitor.sh: EOF
    + 
    + # test that "update-index --fsmonitor-valid" sets the fsmonitor valid bit
    + test_expect_success 'update-index --fsmonitor-valid" sets the fsmonitor valid bit' '
    +-	write_script .git/hooks/fsmonitor-test<<-\EOF &&
    ++	test_hook fsmonitor-test<<-\EOF &&
    + 		printf "last_update_token\0"
    + 	EOF
    + 	git update-index --fsmonitor &&
    +@@ t/t7519-status-fsmonitor.sh: EOF
    + 
    + # test that newly added files are marked valid
    + test_expect_success 'newly added files are marked valid' '
    +-	write_script .git/hooks/fsmonitor-test<<-\EOF &&
    ++	test_hook --setup --clobber fsmonitor-test<<-\EOF &&
    + 		printf "last_update_token\0"
    + 	EOF
    + 	git add new &&
    +@@ t/t7519-status-fsmonitor.sh: EOF
    + 
    + # test that *only* files returned by the integration script get flagged as invalid
    + test_expect_success '*only* files returned by the integration script get flagged as invalid' '
    +-	write_script .git/hooks/fsmonitor-test<<-\EOF &&
    ++	test_hook --clobber fsmonitor-test<<-\EOF &&
    + 	printf "last_update_token\0"
    + 	printf "dir1/modified\0"
    + 	EOF
    +@@ t/t7519-status-fsmonitor.sh: test_expect_success 'refresh_index() invalidates fsmonitor cache' '
    + 	dirty_repo &&
    + 	write_integration_script &&
    + 	git add . &&
    +-	write_script .git/hooks/fsmonitor-test<<-\EOF &&
    ++	test_hook --clobber fsmonitor-test<<-\EOF &&
    + 	EOF
    + 	git commit -m "to reset" &&
    + 	git reset HEAD~1 &&
    +@@ t/t7519-status-fsmonitor.sh: do
    + 		# Make sure it's actually skipping the check for modified and untracked
    + 		# (if enabled) files unless it is told about them.
    + 		test_expect_success "status doesn't detect unreported modifications" '
    +-			write_script .git/hooks/fsmonitor-test<<-\EOF &&
    ++			test_hook --clobber fsmonitor-test<<-\EOF &&
    + 			printf "last_update_token\0"
    + 			:>marker
    + 			EOF
    +@@ t/t7519-status-fsmonitor.sh: test_expect_success 'status succeeds with sparse index' '
    + 		git -C sparse sparse-checkout init --cone --sparse-index &&
    + 		git -C sparse sparse-checkout set dir1 dir2 &&
    + 
    +-		write_script .git/hooks/fsmonitor-test <<-\EOF &&
    ++		test_hook --clobber fsmonitor-test <<-\EOF &&
    + 			printf "last_update_token\0"
    + 		EOF
    + 		git -C full config core.fsmonitor ../.git/hooks/fsmonitor-test &&
    + 		git -C sparse config core.fsmonitor ../.git/hooks/fsmonitor-test &&
    + 		check_sparse_index_behavior ! &&
    + 
    +-		write_script .git/hooks/fsmonitor-test <<-\EOF &&
    ++		test_hook --clobber fsmonitor-test <<-\EOF &&
    + 			printf "last_update_token\0"
    + 			printf "dir1/modified\0"
    + 		EOF
    +@@ t/t7519-status-fsmonitor.sh: test_expect_success 'status succeeds with sparse index' '
    + 
    + 		# This one modifies outside the sparse-checkout definition
    + 		# and hence we expect to expand the sparse-index.
    +-		write_script .git/hooks/fsmonitor-test <<-\EOF &&
    ++		test_hook --clobber fsmonitor-test <<-\EOF &&
    + 			printf "last_update_token\0"
    + 			printf "dir1a/modified\0"
      		EOF
     
      ## t/test-lib-functions.sh ##
    @@ t/test-lib-functions.sh: write_script () {
      	chmod +x "$1"
      }
      
    -+## Usage: write-hook pre-receive
    -+## Usage: write-hook -C some-dir pre-receive
    -+write_hook () {
    ++# Usage: test_hook [options] <hook-name> <<-\EOF
    ++#
    ++#   -C <dir>:
    ++#	Run all git commands in directory <dir>
    ++#   --setup
    ++#	Setup a hook for subsequent tests, i.e. don't remove it in a
    ++#	"test_when_finished"
    ++#   --clobber
    ++#	Overwrite an existing <hook-name>, if it exists. Implies
    ++#	--setup (i.e. the "test_when_finished" is assumed to have been
    ++#	set up already).
    ++test_hook () {
    ++	setup= &&
    ++	clobber= &&
     +	indir= &&
     +	while test $# != 0
     +	do
     +		case "$1" in
     +		-C)
    -+			indir="$2"
    ++			indir="$2" &&
     +			shift
     +			;;
    ++		--setup)
    ++			setup=t
    ++			;;
    ++		--clobber)
    ++			clobber=t
    ++			;;
     +		-*)
    -+			BUG "invalid write_hook: $1"
    ++			BUG "invalid argument: $1"
     +			;;
     +		*)
     +			break
    @@ t/test-lib-functions.sh: write_script () {
     +		esac &&
     +		shift
     +	done &&
    ++
     +	git_dir=$(git -C "$indir" rev-parse --absolute-git-dir) &&
     +	hook_dir="$git_dir/hooks" &&
    -+	hook_file="$hook_dir/$1"
    ++	hook_file="$hook_dir/$1" &&
    ++	if test -z "$clobber"
    ++	then
    ++		test_path_is_missing "$hook_file"
    ++	fi &&
    ++	if test -z "$setup$clobber"
    ++	then
    ++		test_when_finished "rm \"$hook_file\""
    ++	fi &&
     +	write_script "$hook_file"
     +}
     +
 3:  2acbaa77f8d <  -:  ----------- tests: migrate miscellaneous "write_script" to "write_hooks"
 4:  d021a5981a1 <  -:  ----------- tests: don't depend on template-created .git/hooks
 -:  ----------- >  9:  1802158b14d tests: change "mkdir -p && write_script" to use "test_hook"
 -:  ----------- > 10:  7fef92872f3 tests: change "cat && chmod +x" to use "test_hook"
-- 
2.35.1.1228.g56895c6ee86

