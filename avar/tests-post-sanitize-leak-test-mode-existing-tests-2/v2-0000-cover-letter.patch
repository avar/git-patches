From 9dfd6c9585d41fdd6a7a1804fa0cd4a49173d457 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-0.9-00000000000-20211012T134703Z-avarab@gmail.com>
In-Reply-To: <cover-00.10-00000000000-20211006T094705Z-avarab@gmail.com>
References: <cover-00.10-00000000000-20211006T094705Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 12 Oct 2021 15:47:03 +0200
Subject: [PATCH v2 0/9] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (9):
  leak tests: run various built-in tests in t00*.sh SANITIZE=leak
  leak tests: run various "test-tool" tests in t00*.sh SANITIZE=leak
  leak tests: mark all ls-tree tests as passing with SANITIZE=leak
  leak tests: mark all trace2 tests as passing with SANITIZE=leak
  leak tests: mark all checkout-index tests as passing with
    SANITIZE=leak
  leak tests: mark some ls-files tests as passing with SANITIZE=leak
  leak tests: mark some read-tree tests as passing with SANITIZE=leak
  leak tests: mark various "generic" tests as passing with SANITIZE=leak
  leak tests: mark some misc tests as passing with SANITIZE=leak

 t/t0001-init.sh                         | 1 +
 t/t0002-gitfile.sh                      | 1 +
 t/t0003-attributes.sh                   | 1 +
 t/t0005-signals.sh                      | 2 ++
 t/t0007-git-var.sh                      | 2 ++
 t/t0008-ignores.sh                      | 1 +
 t/t0010-racy-git.sh                     | 1 +
 t/t0013-sha1dc.sh                       | 2 ++
 t/t0022-crlf-rename.sh                  | 1 +
 t/t0024-crlf-archive.sh                 | 1 +
 t/t0025-crlf-renormalize.sh             | 1 +
 t/t0026-eol-config.sh                   | 1 +
 t/t0029-core-unsetenvvars.sh            | 1 +
 t/t0052-simple-ipc.sh                   | 1 +
 t/t0055-beyond-symlinks.sh              | 1 +
 t/t0061-run-command.sh                  | 1 +
 t/t0065-strcmp-offset.sh                | 1 +
 t/t0066-dir-iterator.sh                 | 1 +
 t/t0067-parse_pathspec_file.sh          | 1 +
 t/t0210-trace2-normal.sh                | 2 ++
 t/t0211-trace2-perf.sh                  | 2 ++
 t/t0212-trace2-event.sh                 | 2 ++
 t/t1000-read-tree-m-3way.sh             | 2 ++
 t/t1003-read-tree-prefix.sh             | 1 +
 t/t1009-read-tree-new-index.sh          | 1 +
 t/t1010-mktree.sh                       | 1 +
 t/t1012-read-tree-df.sh                 | 1 +
 t/t1014-read-tree-confusing.sh          | 2 ++
 t/t1100-commit-tree-options.sh          | 1 +
 t/t1430-bad-ref-name.sh                 | 1 +
 t/t1504-ceiling-dirs.sh                 | 2 ++
 t/t1510-repo-setup.sh                   | 1 +
 t/t2002-checkout-cache-u.sh             | 1 +
 t/t2003-checkout-cache-mkdir.sh         | 1 +
 t/t2004-checkout-cache-temp.sh          | 1 +
 t/t2005-checkout-index-symlinks.sh      | 1 +
 t/t2050-git-dir-relative.sh             | 1 +
 t/t2081-parallel-checkout-collisions.sh | 1 +
 t/t2300-cd-to-toplevel.sh               | 1 +
 t/t3000-ls-files-others.sh              | 2 ++
 t/t3002-ls-files-dashpath.sh            | 2 ++
 t/t3003-ls-files-exclude.sh             | 2 ++
 t/t3004-ls-files-basic.sh               | 1 +
 t/t3006-ls-files-long.sh                | 2 ++
 t/t3008-ls-files-lazy-init-name-hash.sh | 1 +
 t/t3070-wildmatch.sh                    | 1 +
 t/t3100-ls-tree-restrict.sh             | 2 ++
 t/t3101-ls-tree-dirname.sh              | 2 ++
 t/t3102-ls-tree-wildcards.sh            | 1 +
 t/t3103-ls-tree-misc.sh                 | 1 +
 t/t3205-branch-color.sh                 | 1 +
 t/t3211-peel-ref.sh                     | 1 +
 t/t3300-funny-names.sh                  | 1 +
 t/t3601-rm-pathspec-file.sh             | 1 +
 t/t3902-quoted.sh                       | 1 +
 t/t4002-diff-basic.sh                   | 2 ++
 t/t4016-diff-quote.sh                   | 1 +
 t/t4019-diff-wserror.sh                 | 1 +
 t/t4025-hunk-header.sh                  | 1 +
 t/t4026-color.sh                        | 2 ++
 t/t4300-merge-tree.sh                   | 2 ++
 t/t5580-unc-paths.sh                    | 1 +
 t/t5615-alternate-env.sh                | 2 ++
 t/t7518-ident-corner-cases.sh           | 2 ++
 t/t7812-grep-icase-non-ascii.sh         | 1 +
 t/t7813-grep-icase-iso.sh               | 1 +
 t/t7816-grep-binary-pattern.sh          | 1 +
 67 files changed, 87 insertions(+)

Range-diff against v1:
 1:  81772da1ac2 <  -:  ----------- Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
 2:  975854b4621 <  -:  ----------- tests: add a test mode for SANITIZE=leak, run it in CI
 3:  bbb278bca71 <  -:  ----------- submodule-config.h: remove unused SUBMODULE_INIT macro
 4:  bf5a3f3490b <  -:  ----------- *.[ch] *_INIT macros: use { 0 } for a "zero out" idiom
 5:  f3f7a1d1153 <  -:  ----------- *.h _INIT macros: don't specify fields equal to 0
 6:  8c69ad5cdbe <  -:  ----------- *.h: move some *_INIT to designated initializers
 7:  7de11e3bdf4 <  -:  ----------- cbtree.h: define cb_init() in terms of CBTREE_INIT
 8:  a88622077cc <  -:  ----------- daemon.c: refactor hostinfo_init() to HOSTINFO_INIT macro
 9:  212b1b5efd6 <  -:  ----------- builtin/blame.c: refactor commit_info_init() to COMMIT_INFO_INIT macro
10:  f7d1ae2c98d <  -:  ----------- urlmatch.[ch]: add and use URLMATCH_CONFIG_INIT
11:  6f0b0aed07d <  -:  ----------- builtin/remote.c: add and use a REF_STATES_INIT
12:  0fb62cd641e <  -:  ----------- builtin/remote.c: add and use SHOW_INFO_INIT
13:  4fc779f114e <  -:  ----------- t2500: add various tests for nuking untracked files
14:  dc7098d3a4b <  -:  ----------- checkout, read-tree: fix leak of unpack_trees_options.dir
15:  b7924ff0015 <  -:  ----------- read-tree, merge-recursive: overwrite ignored files by default
16:  42c15a1adea <  -:  ----------- unpack-trees: introduce preserve_ignored to unpack_trees_options
17:  bfa0e284732 <  -:  ----------- unpack-trees: make dir an internal-only struct
18:  3e12a5a4aa8 <  -:  ----------- Remove ignored files by default when they are in the way
19:  e627c7d683c <  -:  ----------- Change unpack_trees' 'reset' flag into an enum
20:  859604b206b <  -:  ----------- unpack-trees: avoid nuking untracked dir in way of unmerged file
21:  7f69643c5c9 <  -:  ----------- unpack-trees: avoid nuking untracked dir in way of locally deleted file
22:  751c341f128 <  -:  ----------- Comment important codepaths regarding nuking untracked files/dirs
23:  fce181acc64 <  -:  ----------- Documentation: call out commands that nuke untracked files/directories
24:  e5ef1be2aa9 <  -:  ----------- unpack-trees: don't leak memory in verify_clean_subdirectory()
25:  21f9da06b46 <  -:  ----------- built-ins & lib: plug memory leaks with unpack_trees_options_release()
26:  67fbd70c55a !  1:  4a426acf701 leak tests: run various built-in tests in t00*.sh SANITIZE=leak
    @@ Commit message
         TEST_PASSES_SANITIZE_LEAK=true as passing when git is compiled with
         SANITIZE=leak.
     
    -    They'll now be whitelisted as running under the
    +    They'll now be listed as running under the
         "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks" CI
         target).
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    + ## t/t0001-init.sh ##
    +@@
    + 
    + test_description='git init'
    + 
    ++TEST_PASSES_SANITIZE_LEAK=true
    + . ./test-lib.sh
    + 
    + check_config () {
    +
      ## t/t0002-gitfile.sh ##
     @@ t/t0002-gitfile.sh: Verify that plumbing commands work when .git is a file
      GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
27:  9a8804e1d9a !  2:  6c868ae4ae1 leak tests: run various "test-tool" tests in t00*.sh SANITIZE=leak
    @@ Commit message
         Mark various existing tests in t00*.sh that invoke a "test-tool" with
         as passing when git is compiled with SANITIZE=leak.
     
    -    They'll now be whitelisted as running under the
    +    They'll now be listed as running under the
         "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks" CI
         target).
     
28:  3a7dd917d9f <  -:  ----------- leak tests: mark t0000-init.sh as passing with SANITIZE=leak
29:  e18b5093a52 !  3:  dab4752680c leak tests: mark all ls-tree tests as passing with SANITIZE=leak
    @@ Commit message
         leak tests: mark all ls-tree tests as passing with SANITIZE=leak
     
         Mark those tests that match "*ls-tree*" as passing when git is
    -    compiled with SANITIZE=leak. They'll now be whitelisted as running
    -    under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the
    -    "linux-leaks" CI target).
    +    compiled with SANITIZE=leak. They'll now be listed as running under
    +    the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks"
    +    CI target).
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
30:  da2631ce626 !  4:  df235c1dc68 leak tests: mark all trace2 tests as passing with SANITIZE=leak
    @@ Metadata
      ## Commit message ##
         leak tests: mark all trace2 tests as passing with SANITIZE=leak
     
    -    Mark all tests that match "*trace2*" as passing when git is
    -    compiled with SANITIZE=leak. They'll now be whitelisted as running
    -    under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the
    -    "linux-leaks" CI target).
    +    Mark all tests that match "*trace2*" as passing when git is compiled
    +    with SANITIZE=leak. They'll now be listed as running under the
    +    "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks" CI
    +    target).
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
31:  7ab1583c77d !  5:  39a0199d5c6 leak tests: mark all checkout-index tests as passing with SANITIZE=leak
    @@ Metadata
      ## Commit message ##
         leak tests: mark all checkout-index tests as passing with SANITIZE=leak
     
    -    Mark some tests that match "*{checkout,switch}*" as passing when git is
    -    compiled with SANITIZE=leak. They'll now be whitelisted as running
    -    under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the
    -    "linux-leaks" CI target).
    +    Mark some tests that match "*{checkout,switch}*" as passing when git
    +    is compiled with SANITIZE=leak. They'll now be listed as running under
    +    the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks"
    +    CI target).
     
         Unfortunately almost all of those tests fail when compiled with
         SANITIZE=leak, these only pass because they run "checkout-index", not
32:  b913feca9d8 !  6:  45d3f07cd15 leak tests: mark some ls-files tests as passing with SANITIZE=leak
    @@ Commit message
         leak tests: mark some ls-files tests as passing with SANITIZE=leak
     
         Mark some tests that match "*ls-files*" as passing when git is
    -    compiled with SANITIZE=leak. They'll now be whitelisted as running
    -    under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the
    -    "linux-leaks" CI target). We still have others that match '*ls-files*"
    -    that fail under SANITIZE=leak.
    +    compiled with SANITIZE=leak. They'll now be listed as running under
    +    the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks"
    +    CI target). We still have others that match '*ls-files*" that fail
    +    under SANITIZE=leak.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
33:  d2d7f9f9f8c !  7:  889e7227abf leak tests: mark some read-tree tests as passing with SANITIZE=leak
    @@ Commit message
         leak tests: mark some read-tree tests as passing with SANITIZE=leak
     
         Mark some tests that match "*read-tree*" as passing when git is
    -    compiled with SANITIZE=leak. They'll now be whitelisted as running
    -    under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the
    -    "linux-leaks" CI target). We still have around half the tests that
    -    match "*read-tree*" failing, but let's whitelist those that don't.
    +    compiled with SANITIZE=leak. They'll now be listed as running under
    +    the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test mode (the "linux-leaks"
    +    CI target). We still have around half the tests that match
    +    "*read-tree*" failing, but let's whitelist those that don't.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
34:  9299634b932 =  8:  a4843f35004 leak tests: mark various "generic" tests as passing with SANITIZE=leak
35:  1b68890f614 !  9:  9dfd6c9585d leak tests: mark some misc tests as passing with SANITIZE=leak
    @@ Commit message
     
         Mark some tests that match "*{mktree,commit,diff,grep,rm,merge,hunk}*"
         as passing when git is compiled with SANITIZE=leak. They'll now be
    -    whitelisted as running under the "GIT_TEST_PASSING_SANITIZE_LEAK=true"
    -    test mode (the "linux-leaks" CI target).
    +    listed as running under the "GIT_TEST_PASSING_SANITIZE_LEAK=true" test
    +    mode (the "linux-leaks" CI target).
     
         These were picked because we still have a lot of failures in adjacent
         areas, and we didn't have much if any coverage of e.g. grep and diff
-- 
2.33.0.1567.g7b23ce7ed9e

