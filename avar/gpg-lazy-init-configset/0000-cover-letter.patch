From c099d48b4bfae4eb152a9498de9ac1ab1ae996f3 Mon Sep 17 00:00:00 2001
Message-Id: <cover-0.2-00000000000-20230209T142225Z-avarab@gmail.com>
In-Reply-To: <+TqEM21o+3TGx6D@coredump.intra.peff.net>
References: <+TqEM21o+3TGx6D@coredump.intra.peff.net>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 9 Feb 2023 15:22:25 +0100
Subject: [PATCH 0/2] gpg-interface: cleanup + convert low hanging fruit to configset API
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

On Thu, Feb 09 2023, Jeff King wrote:

> If the gpg code used git_config_get_string(), etc, then they could just
> access each key on demand (efficiently, from an internal hash table),
> which reduces the risk of "oops, we forgot to initialize the config
> here". It does probably mean restructuring the code a little, though
> (since you'd often have an accessor function to get "foo.bar" rather
> than assuming "foo.bar" was parsed into an enum already, etc). That may
> not be worth the effort (and risk of regression) to convert.

I'd already played around with that a bit as part of reviewing Junio's
change, this goes on top of that.

I found that continuing this conversion was getting harder, but these
3 cases really were trivial cases where we're just reading a variable
globally, and then proceeding to use it in one specific place.

Out of the remaining ones gpg.program et all looked easiest, but I
didn't continue with it.

Ævar Arnfjörð Bjarmason (2):
  {am,commit-tree,verify-{commit,tag}}: refactor away config wrapper
  gpg-interface.c: lazily get GPG config variables on demand

 builtin/am.c            |  7 +----
 builtin/commit-tree.c   |  7 +----
 builtin/verify-commit.c |  7 +----
 builtin/verify-tag.c    |  7 +----
 gpg-interface.c         | 66 ++++++++++++++++-------------------------
 5 files changed, 29 insertions(+), 65 deletions(-)

-- 
2.39.1.1475.gc2542cdc5ef

