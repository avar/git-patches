From 31bf03c190df05669002c24506554530cd34809d Mon Sep 17 00:00:00 2001
In-Reply-To: <20210316021312.13927-1-avarab@gmail.com>
References: <20210316021312.13927-1-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 16 Mar 2021 16:15:46 +0100
Subject: [PATCH v3 00/32] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (32):
  diff.c: remove redundant canon_mode() call
  notes & match-trees: use name_entry's "pathlen" member
  cache.h: add a comment to object_type()
  tree-walk.h: add object_type member to name_entry
  tree-walk.c: migrate to using new "object_type" field when possible
  fast-import tests: test for sorting dir/file foo v.s. foo.txt
  mktree tests: test that "mode" is passed when sorting
  diff tests: test that "mode" is passed when sorting
  cache.h: have base_name_compare() take "is tree?", not "mode"
  tree-walk.h users: switch object_type(...) to new .object_type
  tree.h: format argument lists of read_tree_recursive() users
  tree.h users: format argument lists in archive.c
  archive: get rid of 'stage' parameter
  tree.h API: make read_tree_fn_t take an "enum object_type"
  tree-walk.h users: migrate "p->mode &&" pattern
  tree-walk.h users: refactor chained "mode" if/else into switch
  tree-walk.h users: migrate miscellaneous "mode" to "object_type"
  merge-tree tests: test for the mode comparison in same_entry()
  merge-ort: correct reference to test in 62fdec17a11
  fsck.c: switch on "object_type" in fsck_walk_tree()
  tree-walk.h users: use temporary variable(s) for "mode"
  tree-walk.h API: formatting changes for subsequent commit
  tree-walk.h API: rename get_tree_entry() to get_tree_entry_mode()
  match-trees: use "tmp" for mode in shift_tree_by()
  tree-walk.h API: add get_tree_entry_type()
  tree-walk.h API: document and format tree_entry_extract()
  tree-entry.h API: rename tree_entry_extract() to
    tree_entry_extract_mode()
  tree-walk.h API: add a tree_entry_extract_all() function
  tree-walk.h API: add get_tree_entry_all()
  tree-walk.h API: add a get_tree_entry_path() function
  blame: emit a better error on 'git blame directory'
  tree-walk.h API: add a tree_entry_extract_type() function

 archive.c                       | 50 +++++++++---------
 blame.c                         |  9 ++--
 builtin/checkout.c              |  6 ++-
 builtin/fast-import.c           | 12 +++--
 builtin/grep.c                  |  6 +--
 builtin/log.c                   |  7 +--
 builtin/ls-files.c              |  6 ++-
 builtin/ls-tree.c               | 14 +++---
 builtin/merge-tree.c            | 30 +++++++----
 builtin/mktree.c                |  4 +-
 builtin/pack-objects.c          |  6 +--
 builtin/reflog.c                |  3 +-
 builtin/rm.c                    |  2 +-
 builtin/update-index.c          |  6 ++-
 cache-tree.c                    |  2 +-
 cache.h                         | 11 ++--
 combine-diff.c                  |  8 +--
 delta-islands.c                 |  2 +-
 diff.c                          |  2 +-
 fsck.c                          | 23 ++++-----
 http-push.c                     |  6 ++-
 line-log.c                      |  2 +-
 list-objects.c                  | 20 +++++---
 match-trees.c                   | 52 +++++++++----------
 merge-ort.c                     | 13 ++---
 merge-recursive.c               | 33 ++++++------
 notes.c                         | 14 +++---
 object-name.c                   |  7 ++-
 pack-bitmap-write.c             |  8 +--
 read-cache.c                    | 16 +++---
 revision.c                      | 12 +++--
 t/t1450-fsck.sh                 | 66 ++++++++++++++++++++++++
 t/t4300-merge-tree.sh           | 44 ++++++++++++++++
 t/t8004-blame-with-conflicts.sh | 21 ++++++++
 t/t9300-fast-import.sh          | 87 ++++++++++++++++++++++++++++++++
 tree-diff.c                     | 30 +++++++----
 tree-walk.c                     | 89 ++++++++++++++++++++++++---------
 tree-walk.h                     | 63 ++++++++++++++++++++---
 tree.c                          | 19 ++++---
 tree.h                          |  5 +-
 unpack-trees.c                  | 24 +++++----
 walker.c                        | 22 ++++----
 42 files changed, 618 insertions(+), 244 deletions(-)

Range-diff:
 1:  a093f0ba95 <  -:  ---------- l10n: ru.po: update Russian translation
 2:  684dd4c2b4 <  -:  ---------- checkout: fix bug that makes checkout follow symlinks in leading path
 3:  0d58fef58a <  -:  ---------- run-command: invalidate lstat cache after a command finished
 4:  22539ec3b5 <  -:  ---------- unpack_trees(): start with a fresh lstat cache
 5:  6b82d3eea6 <  -:  ---------- Git 2.17.6
 6:  6eed462c8f <  -:  ---------- Git 2.18.5
 7:  9fb2a1fb08 <  -:  ---------- Git 2.19.6
 8:  8b1a5f33d3 <  -:  ---------- Git 2.20.5
 9:  c735d7470e <  -:  ---------- Git 2.21.4
10:  c753e2a7a8 <  -:  ---------- Git 2.22.5
11:  d60b6a96f0 <  -:  ---------- Git 2.23.4
12:  06214d171b <  -:  ---------- Git 2.24.4
13:  42ce4c7930 <  -:  ---------- Git 2.25.5
14:  a79fd20c71 <  -:  ---------- Git 2.26.3
15:  6ff7f46039 <  -:  ---------- Git 2.27.1
16:  e4f4299859 <  -:  ---------- Git 2.28.1
17:  0628636d0c <  -:  ---------- Git 2.29.3
18:  94f6e3e283 <  -:  ---------- Git 2.30.2
19:  a9926ecd54 <  -:  ---------- l10n: Update Catalan translation
20:  712b0ed6ec <  -:  ---------- l10n: git.pot: v2.31.0 round 1 (155 new, 89 removed)
21:  66f52fa26b <  -:  ---------- pack-revindex.c: don't close unopened file descriptors
22:  5ff5a30652 <  -:  ---------- l10n: fr: v2.31.0 rnd 1
23:  fa42d191c6 <  -:  ---------- l10n: pl.po: Update translation
24:  fe8885258b <  -:  ---------- l10n: sv.po: Update Swedish translation (5103t0f0u)
25:  3ed77c4792 <  -:  ---------- l10n: tr: v2.31.0-rc0
26:  9b7e82b940 <  -:  ---------- l10n: git.pot: v2.31.0 round 2 (9 new, 8 removed)
27:  929dc48e96 <  -:  ---------- l10n: sv.po: Update Swedish translation (5104t0f0u)
28:  f6a7e896b8 <  -:  ---------- l10n: tr: v2.31.0-rc1
29:  068cb92300 <  -:  ---------- l10n: fr: v2.31 rnd 2
30:  2f176de687 <  -:  ---------- l10n: bg.po: Updated Bulgarian translation (5104t)
31:  8278f87022 <  -:  ---------- l10n: zh_TW.po: v2.31.0 round 2 (15 untranslated)
32:  2aec3bc4b6 <  -:  ---------- fetch-pack: do not mix --pack_header and packfile uri
33:  8c4abfb8be <  -:  ---------- l10n: start Indonesian translation
34:  c21ad4d941 <  -:  ---------- l10n: Add translation team info
35:  b0adcc311b <  -:  ---------- l10n: es: 2.31.0 round 2
36:  1369935987 <  -:  ---------- l10n: vi.po(5104t): for git v2.31.0 l10n round 2
37:  408985d301 <  -:  ---------- l10n: pt_PT: add Portuguese translations part 1
38:  834845142d <  -:  ---------- l10n: de.po: Update German translation for Git v2.31.0
39:  13d7ab6b5d <  -:  ---------- Git 2.31-rc2
40:  b2a51c1b03 <  -:  ---------- mergetool: do not enable hideResolved by default
41:  53204061ac <  -:  ---------- doc: describe mergetool configuration in git-mergetool(1)
42:  473eb54151 <  -:  ---------- l10n: zh_CN: for git v2.31.0 l10n round 1 and 2
43:  a5828ae6b5 <  -:  ---------- Git 2.31
44:  b338f2c01a <  -:  ---------- ls-files tests: add meaningful --with-tree tests
45:  4578b83944 <  -:  ---------- tree.c API: move read_tree() into builtin/ls-files.c
46:  33656ff63b <  -:  ---------- ls-files: don't needlessly pass around stage variable
47:  1c96d5d361 <  -:  ---------- ls-files: refactor away read_tree()
48:  367cb99224 <  -:  ---------- tree.h API: remove support for starting at prefix != ""
49:  38e36780e2 <  -:  ---------- tree.h API: remove "stage" parameter from read_tree_recursive()
50:  859902ffd8 <  -:  ---------- tree.h API: rename read_tree_recursive() to read_tree()
51:  a63c9b49f1 <  -:  ---------- show tests: add test for "git show <tree>"
52:  570642c862 <  -:  ---------- tree.h API: expose read_tree_1() as read_tree_at()
53:  f9bbc30f69 =  1:  f9bbc30f69 diff.c: remove redundant canon_mode() call
54:  187fc2c3e6 =  2:  187fc2c3e6 notes & match-trees: use name_entry's "pathlen" member
55:  311637c558 =  3:  311637c558 cache.h: add a comment to object_type()
56:  fecfe3d462 =  4:  fecfe3d462 tree-walk.h: add object_type member to name_entry
57:  db961ab5e8 =  5:  db961ab5e8 tree-walk.c: migrate to using new "object_type" field when possible
 -:  ---------- >  6:  f87ab9feb1 fast-import tests: test for sorting dir/file foo v.s. foo.txt
 -:  ---------- >  7:  4b6eff5d9c mktree tests: test that "mode" is passed when sorting
 -:  ---------- >  8:  d08b852a61 diff tests: test that "mode" is passed when sorting
58:  df2fc76161 !  9:  ced6fcbb1e cache.h: have base_name_compare() take "is tree?", not "mode"
    @@ Commit message
         958ba6c96eb (Introduce "base_name_compare()" helper function,
         2005-05-20).
     
    +    None of these comparison functions used to have tests, but with
    +    preceding commits some of them now do. I thought the remainder was
    +    trivial enough to review without tests, and didn't want to spend more
    +    time on them.
    +
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## builtin/fast-import.c ##
     @@ builtin/fast-import.c: static int tecmp0 (const void *_a, const void *_b)
    + {
      	struct tree_entry *a = *((struct tree_entry**)_a);
      	struct tree_entry *b = *((struct tree_entry**)_b);
    ++	int istree_a = S_ISDIR(a->versions[0].mode);
    ++	int istree_b = S_ISDIR(b->versions[0].mode);
      	return base_name_compare(
     -		a->name->str_dat, a->name->str_len, a->versions[0].mode,
     -		b->name->str_dat, b->name->str_len, b->versions[0].mode);
    -+		a->name->str_dat, a->name->str_len, 1,
    -+		b->name->str_dat, b->name->str_len, 1);
    ++		a->name->str_dat, a->name->str_len, istree_a,
    ++		b->name->str_dat, b->name->str_len, istree_b);
      }
      
      static int tecmp1 (const void *_a, const void *_b)
    -@@ builtin/fast-import.c: static int tecmp1 (const void *_a, const void *_b)
    + {
      	struct tree_entry *a = *((struct tree_entry**)_a);
      	struct tree_entry *b = *((struct tree_entry**)_b);
    ++	int istree_a = S_ISDIR(a->versions[1].mode);
    ++	int istree_b = S_ISDIR(b->versions[1].mode);
      	return base_name_compare(
     -		a->name->str_dat, a->name->str_len, a->versions[1].mode,
     -		b->name->str_dat, b->name->str_len, b->versions[1].mode);
    -+		a->name->str_dat, a->name->str_len, 1,
    -+		b->name->str_dat, b->name->str_len, 1);
    ++		a->name->str_dat, a->name->str_len, istree_a,
    ++		b->name->str_dat, b->name->str_len, istree_b);
      }
      
      static void mktree(struct tree_content *t, int v, struct strbuf *b)
59:  49d5da8c08 = 10:  20303a99fc tree-walk.h users: switch object_type(...) to new .object_type
60:  c9d209d496 = 11:  c8872f676e tree.h: format argument lists of read_tree_recursive() users
61:  a6d2660fe1 = 12:  c7130734d3 tree.h users: format argument lists in archive.c
62:  15f7f89acc = 13:  5bdfbd2358 archive: get rid of 'stage' parameter
63:  7a71404ea3 = 14:  042b6b0bb0 tree.h API: make read_tree_fn_t take an "enum object_type"
64:  64dc9364ba = 15:  1f0c09c019 tree-walk.h users: migrate "p->mode &&" pattern
65:  93ed3edbbd = 16:  7fdd71f660 tree-walk.h users: refactor chained "mode" if/else into switch
66:  7aa48aa34c = 17:  aad8165309 tree-walk.h users: migrate miscellaneous "mode" to "object_type"
67:  3ae81621dc = 18:  5a9b64fbba merge-tree tests: test for the mode comparison in same_entry()
68:  4249ad5c4d = 19:  ca73536f5b merge-ort: correct reference to test in 62fdec17a11
69:  e5e17505dd = 20:  5fcc51f1ab fsck.c: switch on "object_type" in fsck_walk_tree()
70:  3f0b884f1f = 21:  42d160f4da tree-walk.h users: use temporary variable(s) for "mode"
71:  174167613b = 22:  58a74f1347 tree-walk.h API: formatting changes for subsequent commit
72:  ec76db613f = 23:  1ba1c09387 tree-walk.h API: rename get_tree_entry() to get_tree_entry_mode()
73:  11e3494172 ! 24:  142249e03b tree-walk.h API users: use "tmp" for mode in shift_tree_by()
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    tree-walk.h API users: use "tmp" for mode in shift_tree_by()
    +    match-trees: use "tmp" for mode in shift_tree_by()
     
         Refactor code added in 85e51b783c3 (Make "subtree" part more
         orthogonal to the rest of merge-recursive., 2008-06-30) to make it
74:  b31c106557 = 25:  4e0701c14d tree-walk.h API: add get_tree_entry_type()
75:  304d5d4d1a = 26:  696df8d874 tree-walk.h API: document and format tree_entry_extract()
76:  346453df35 = 27:  199ebd05ce tree-entry.h API: rename tree_entry_extract() to tree_entry_extract_mode()
77:  dd012b661e = 28:  8c63dd61fa tree-walk.h API: add a tree_entry_extract_all() function
78:  b6ee8410e3 = 29:  03a1dbdbe1 tree-walk.h API: add get_tree_entry_all()
79:  5c98afd9e7 ! 30:  64fe9e2e87 tree-walk.h API: add a get_tree_entry_path() function
    @@ Commit message
         need neither the mode nor "enum object_type" parameters filled for
         them.
     
    -    There's callers here which doesn't need the "struct object_id" filled
    -    either, and provides a throwaway variable for us.
    +    There are callers here which don't need the "struct object_id" filled;
    +    forcing callers to pass one just requires they create a throwaway
    +    variable.
     
         See the following commits for the introduction of such code that's
         being modified here:
     
    -     - shift_tree(): 68faf68938e (A new merge stragety 'subtree'.,
    +     - shift_tree(): 68faf68938e (A new merge stragety[sic] 'subtree'.,
             2007-02-15) for the shift_tree()
     
          - tree_has_path(): 96e7ffbdc31 (merge-recursive: check for directory
80:  3e7e0f7eb8 ! 31:  3422fe8b9f blame: emit a better error on 'git blame directory'
    @@ Commit message
     
             fatal: no such path 't' in HEAD
     
    +    The main point of this test is to assert that we're not doing
    +    something uniquely bad when in a conflicted merge. See
    +    cd8ae20195 (git-blame shouldn't crash if run in an unmerged tree,
    +    2007-10-18) and 9aeaab6811 (blame: allow "blame file" in the middle of
    +    a conflicted merge, 2012-09-11) for the bug the t8004 test was
    +    originally meant to address.
    +
    +    But when extending it let's grep out the specific error message for
    +    good measure. Having to change it in the future (e.g. as part of my
    +    parallel series to improve such 'OID does not match type' messages) is
    +    a small price for ensuring it doesn't regress.
    +
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## blame.c ##
    @@ t/t8004-blame-with-conflicts.sh: test_expect_success 'blame does not crash with
     +	test_commit second &&
     +	test_commit d/file &&
     +	test_must_fail git blame d 2>expected &&
    ++	grep "unsupported file type d" expected &&
     +
     +	git reset --hard second &&
     +	>d &&
81:  ac1ccf1357 = 32:  31bf03c190 tree-walk.h API: add a tree_entry_extract_type() function
-- 
2.31.0.256.gf0ddda3145

