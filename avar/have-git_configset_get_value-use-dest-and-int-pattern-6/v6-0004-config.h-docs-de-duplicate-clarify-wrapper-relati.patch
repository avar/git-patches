From cf26e96ac28903989d99cbddb2985555ee4a4729 Mon Sep 17 00:00:00 2001
Message-Id: <patch-v6-04.11-cf26e96ac28-20230307T175532Z-avarab@gmail.com>
In-Reply-To: <cover-v6-00.11-00000000000-20230307T175532Z-avarab@gmail.com>
References: <cover-v5-00.10-00000000000-20230207T154000Z-avarab@gmail.com>
	<cover-v6-00.11-00000000000-20230307T175532Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Tue, 7 Mar 2023 11:41:18 +0100
Subject: [PATCH v6 04/11] config.h docs: de-duplicate & clarify wrapper
 relationships
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

As noted here the git_config_get_*() functions are wrapper for the
corresponding repo_config_get_*() functions, which are mostly
pass-through wrappers for the underlying git_configset_get_*()
functions.

Given that the structure of this documentation is quite odd, and a
result of incremental additions over time. The repo_config_get_*()
functions were added after the git_config_get_*().

It would be more logical to have all the documentation discuss the
underlying API, note which variants are simple wrappers, and which are
wrappers that add extra validation.

This takes a small step in that direction, as a subsequent commit will
need to add variant of these functions. When we do that we'll no
longer need to duplicate that documentation, which we'd be
structurally constrained to do before this change.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
 config.h | 29 +++++++++++++++--------------
 1 file changed, 15 insertions(+), 14 deletions(-)

diff --git a/config.h b/config.h
index 2eca084cb1c..32adf74cc4d 100644
--- a/config.h
+++ b/config.h
@@ -460,17 +460,19 @@ const struct string_list *git_configset_get_value_multi(struct config_set *cs, c
  */
 void git_configset_clear(struct config_set *cs);
 
-/*
+/**
  * These functions return 1 if not found, and 0 if found, leaving the found
  * value in the 'dest' pointer.
+ *
+ * The functions that return a single value (i.e. not
+ * *_get_*multi*()) will return the highest-priority value for the
+ * configuration variable `key`, i.e. in the case where we have
+ * multiple values the last value found.
  */
 
 /*
- * Finds the highest-priority value for the configuration variable `key`
- * and config set `cs`, stores the pointer to it in `value` and returns 0.
- * When the configuration variable `key` is not found, returns 1 without
- * touching `value`. The caller should not free or modify `value`, as it
- * is owned by the cache.
+ * The caller should not free or modify `value`, as it is owned by the
+ * cache.
  */
 int git_configset_get_value(struct config_set *cs, const char *key, const char **dest);
 
@@ -521,14 +523,13 @@ void git_protected_config(config_fn_t fn, void *data);
  * manner, the config API provides two functions `git_config_get_value`
  * and `git_config_get_value_multi`. They both read values from an internal
  * cache generated previously from reading the config files.
- */
-
-/**
- * Finds the highest-priority value for the configuration variable `key`,
- * stores the pointer to it in `value` and returns 0. When the
- * configuration variable `key` is not found, returns 1 without touching
- * `value`. The caller should not free or modify `value`, as it is owned
- * by the cache.
+ *
+ * The git_config_get_*() functions are wrappers for the corresponding
+ * repo_config_get_*() functions, which in turn wrap the corresponding
+ * git_configset_get_*() functions.
+ *
+ * The non-configset variants might impose extra validation, see
+ * e.g. repo_config_get_string() and repo_config_get_string_tmp().
  */
 int git_config_get_value(const char *key, const char **value);
 
-- 
2.40.0.rc1.1034.g5867a1b10c5

