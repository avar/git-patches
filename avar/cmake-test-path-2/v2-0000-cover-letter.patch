From 158a41ca7a45a374c74a1794f86809eaa3979005 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-00.11-00000000000-20221027T031847Z-avarab@gmail.com>
In-Reply-To: <cover-0.9-00000000000-20221021T091013Z-avarab@gmail.com>
References: <cover-0.9-00000000000-20221021T091013Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 27 Oct 2022 05:18:47 +0200
Subject: [PATCH v2 00/11] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (11):
  cmake: don't "mkdir -p" and "cd" in build instructions
  cmake: update instructions for portable CMakeLists.txt
  cmake: don't copy chainlint.pl to build directory
  cmake: chmod +x the bin-wrappers/* & SCRIPT_{SH,PERL} & git-p4
  cmake & test-lib.sh: add a $GIT_SOURCE_DIR variable
  cmake: set "USE_LIBPCRE2" in "GIT-BUILD-OPTIONS" for test-lib.sh
  test-lib.sh: support a "GIT_TEST_BUILD_DIR"
  Makefile + cmake: use environment, not GIT-BUILD-DIR
  cmake: support GIT_TEST_OPTS, abstract away WIN32 defaults
  cmake: copy over git-p4.py for t983[56] perforce test
  CI: add a "linux-cmake-test" to run cmake & ctest on linux

 .github/workflows/main.yml          |   3 +
 .gitignore                          |   1 -
 Makefile                            |   1 -
 ci/run-build-and-tests.sh           |  13 ++-
 contrib/buildsystems/CMakeLists.txt | 133 +++++++++++++++++++++-------
 t/README                            |   3 +
 t/lib-gettext.sh                    |   2 +-
 t/lib-gitweb.sh                     |   2 +-
 t/t7609-mergetool--lib.sh           |   2 +-
 t/t9902-completion.sh               |  14 +--
 t/t9903-bash-prompt.sh              |   2 +-
 t/test-lib.sh                       |  27 +++++-
 12 files changed, 152 insertions(+), 51 deletions(-)

Range-diff against v1:
 -:  ----------- >  1:  667a2bd5271 cmake: don't "mkdir -p" and "cd" in build instructions
 -:  ----------- >  2:  9e2470dcb95 cmake: update instructions for portable CMakeLists.txt
 1:  16c99177e6d !  3:  2d7d9742a73 cmake: don't copy chainlint.pl to build directory
    @@ Commit message
     
      ## contrib/buildsystems/CMakeLists.txt ##
     @@ contrib/buildsystems/CMakeLists.txt: if(NOT ${CMAKE_BINARY_DIR}/CMakeCache.txt STREQUAL ${CACHE_PATH})
    - 		"string(REPLACE \"\${GIT_BUILD_DIR_REPL}\" \"GIT_BUILD_DIR=\\\"$TEST_DIRECTORY/../${BUILD_DIR_RELATIVE}\\\"\" content \"\${content}\")\n"
    - 		"file(WRITE ${CMAKE_SOURCE_DIR}/t/test-lib.sh \${content})")
    + 	file(WRITE ${CMAKE_BINARY_DIR}/CTestCustom.cmake
    + 		"file(WRITE ${CMAKE_SOURCE_DIR}/GIT-BUILD-DIR \"${CMAKE_BINARY_DIR}\")")
      	#misc copies
     -	file(COPY ${CMAKE_SOURCE_DIR}/t/chainlint.pl DESTINATION ${CMAKE_BINARY_DIR}/t/)
      	file(COPY ${CMAKE_SOURCE_DIR}/po/is.po DESTINATION ${CMAKE_BINARY_DIR}/po/)
    - 	file(COPY ${CMAKE_SOURCE_DIR}/mergetools/tkdiff DESTINATION ${CMAKE_BINARY_DIR}/mergetools/)
    - 	file(COPY ${CMAKE_SOURCE_DIR}/contrib/completion/git-prompt.sh DESTINATION ${CMAKE_BINARY_DIR}/contrib/completion/)
    + 	file(GLOB mergetools "${CMAKE_SOURCE_DIR}/mergetools/*")
    + 	file(COPY ${mergetools} DESTINATION ${CMAKE_BINARY_DIR}/mergetools/)
 2:  2c1d194e590 !  4:  ea8a3feec81 cmake: chmod +x the bin-wrappers/* & SCRIPT_{SH,PERL} & git-p4
    @@ Metadata
      ## Commit message ##
         cmake: chmod +x the bin-wrappers/* & SCRIPT_{SH,PERL} & git-p4
     
    -    The cmake recipe added in [1] did not create the bin-wrappers/*
    -    directory, and thus fell back on running the tests with the equivalent
    -    of "--no-bin-wrappers".
    +    Since the cmake file was made to run on *nix in [1] running the tests
    +    with "ctest" broken, because we'd attempt to invoke our bin-wrappers/,
    +    but they didn't have the executable bit.
     
    -    Thus the. "t/test-lib.sh" would be unable to find "bin-wrappers/git",
    -    and we'd fall back on "GIT_EXEC_PATH=$GIT_BUILD_DIR" using the
    -    fallback behavior added in [2]:
    +    In the best case, the "t/test-lib.sh" would be unable to find
    +    "bin-wrappers/git", and we'd fall back on
    +    "GIT_EXEC_PATH=$GIT_BUILD_DIR" using the fallback behavior added in
    +    [2]:
     
                 $ ./t0001-init.sh
                 <GIT_BUILD_DIR>/t/../contrib/buildsystems/out/bin-wrappers/git is not executable; using GIT_EXEC_PATH
     
    -    Or rather, this is what would have happened on *nix, but until [3]
    -    there wasn't any non-Windows support for "cmake". On Windows it didn't
    -    matter that the bin-wrappers weren't made executable, since there's no
    -    executable bit, instead the emulation layer looks at whether a file
    -    has a shebang.
    +    This was recently somewhat swept under the rug in [3], as ctest would
    +    run them with "--no-bin-wrappers". But still with [3], running e.g.:
     
    -    But with [3] we've effectively used the semi-equivalent of
    -    "--no-bin-wrappers" unintentionally on *nix, and furthermore because
    -    we didn't make these executable
    +            cmake -S contrib/buildsystems -B contrib/buildsystems/out -DCMAKE_BUILD_TYPE=Debug &&
    +            make -C contrib/buildsystems/out &&
    +            ctest --test-dir contrib/buildsystems/out --jobs="$(nproc)" --output-on-failure
     
    -    In addition, we'd fail any test that needed to invoke one of our built
    -    shell, perl or Python scripts on *nix. E.g. t0012-help.sh would fail
    -    on a test that tried to invoke "git web--browse". I.e. the equivalent
    -    of this (in the "out" directory) would happen:
    +    Fails around 20% of our testts on *nix. So even with [3] we'd fail any
    +    test that needed to invoke one of our built shell, perl or Python
    +    scripts on *nix. E.g. t0012-help.sh would fail on a test that tried to
    +    invoke "git web--browse". The equivalent of this (in the "out"
    +    directory) would happen:
     
                 $ ./git --exec-path=$PWD web--browse
                 git: 'web--browse' is not a git command. See 'git --help'.
    @@ Commit message
                 usage: git web--browse [--browser=browser|--tool=browser] [--config=conf.var] url/file ...
     
         The same goes for e.g. the "git-p4" tests, which would fail because
    -    our built "git-p4" wasn't executable, etc.
    +    our built "git-p4" wasn't executable, etc. There's also a few other
    +    outstanding issues, which will be fixed in subsequent commits.
     
    -    This change should ideally use file(CHMOD ...), but that's much newer
    -    than our required cmake version[1].
    +    This change should ideally use file(CHMOD ...), but the "file(CHMOD"
    +    feature is much newer than our required cmake version[5].
     
    -    1. a30e4c531d9 (Merge branch 'ss/cmake-build', 2020-08-11)
    +    Before this change:
    +
    +            80% tests passed, 196 tests failed out of 977
    +
    +    After:
    +
    +            99% tests passed, 5 tests failed out of 977
    +
    +    The remaining failures will be addressed in subsequent commits.
    +
    +    There was a suggestion of using a function to abstract this away[6],
    +    which sounds good. But after spending too long trying to get all
    +    combinations of "${content}" and ${content} (unqoted) in the function
    +    and its callers working I wasn't able to fix the quoting issues it
    +    introduced.
    +
    +    A lot of this is duplicated already, we can follow-up at some other
    +    time with refactoring, and address any tricky quoting issues in
    +    calling function with these parameters then.
    +
    +    1. f31b6244950 (Merge branch 'yw/cmake-updates', 2022-06-07)
         2. e4597aae659 (run test suite without dashed git-commands in PATH, 2009-12-02)
    -    3. f31b6244950 (Merge branch 'yw/cmake-updates', 2022-06-07)
    -    4. https://cmake.org/cmake/help/latest/command/file.html#chmod
    +    3. 2ea1d8b5563 (cmake: make it easier to diagnose regressions in CTest
    +       runs, 2022-10-18)
    +    4. a30e4c531d9 (Merge branch 'ss/cmake-build', 2020-08-11)
    +    5. https://cmake.org/cmake/help/latest/command/file.html#chmod
    +    6. https://lore.kernel.org/git/0fda0e54-0432-7690-74a7-3d1a59923e0c@dunelm.org.uk/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
 3:  addaf73992f !  5:  6387682db06 cmake & test-lib.sh: add a $GIT_SOURCE_DIR variable
    @@ Commit message
         recipe has needed to copy various assets to that
         "contrib/buildsystems/out" directory.
     
    -    Let's instead teach the test-lib.sh that there's such a thing as the
    -    "$GIT_SOURCE_DIR" distinct from the "$GIT_BUILD_DIR".
    +    But we've only been doing this for the subsets of tests that run on
    +    Windows, and which have otherwise been covered by that CI target. The
    +    CI target builds (among other things) with "-DPERL_TESTS=OFF
    +    -DPYTHON_TESTS=OFF -DCURL_NO_CURL_CMAKE=ON", see [1]. Furthermore, the
    +    CI isn't testing from the "contrib/buildsystems/out" directory,
    +    instead it clobbers the top-level MAkefile.
    +
    +    There was a recent commit to fix a subset of these issues, see
    +    6a83b5f0810 (cmake: copy the merge tools for testing, 2022-10-18).
    +
    +    Let's stop going for that approach, and instead teach the test-lib.sh
    +    that there's such a thing as the "$GIT_SOURCE_DIR" distinct from the
    +    "$GIT_BUILD_DIR".
     
         Just as the "$TEST_DIRECTORY" always points to our actual "t"
         directory (not the "[...]/out/t" cmake creates), this new
         "$GIT_SOURCE_DIR" will always be the top-level source directory.
     
    -    So even though the "GIT_BUILD_DIR=(.*)" line in t/test-lib.sh will
    -    still be altered by CMakeLists.txt, that recipe will no longer need to
    -    copy over various things from our source directory, as the tests now
    -    know where to find those assets.
    +    With this change we now pass 3/5 of the tests that we still had
    +    failing with the fixes in the preceding commit.
    +
    +    1. 4c2c38e800f (ci: modification of main.yml to use cmake for vs-build
    +       job, 2020-06-26)
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## contrib/buildsystems/CMakeLists.txt ##
     @@ contrib/buildsystems/CMakeLists.txt: if(NOT ${CMAKE_BINARY_DIR}/CMakeCache.txt STREQUAL ${CACHE_PATH})
    - 		"file(STRINGS ${CMAKE_SOURCE_DIR}/t/test-lib.sh content NEWLINE_CONSUME)\n"
    - 		"string(REPLACE \"\${GIT_BUILD_DIR_REPL}\" \"GIT_BUILD_DIR=\\\"$TEST_DIRECTORY/../${BUILD_DIR_RELATIVE}\\\"\" content \"\${content}\")\n"
    - 		"file(WRITE ${CMAKE_SOURCE_DIR}/t/test-lib.sh \${content})")
    + 	#Setting the build directory in test-lib.sh before running tests
    + 	file(WRITE ${CMAKE_BINARY_DIR}/CTestCustom.cmake
    + 		"file(WRITE ${CMAKE_SOURCE_DIR}/GIT-BUILD-DIR \"${CMAKE_BINARY_DIR}\")")
     -	#misc copies
     -	file(COPY ${CMAKE_SOURCE_DIR}/po/is.po DESTINATION ${CMAKE_BINARY_DIR}/po/)
    --	file(COPY ${CMAKE_SOURCE_DIR}/mergetools/tkdiff DESTINATION ${CMAKE_BINARY_DIR}/mergetools/)
    +-	file(GLOB mergetools "${CMAKE_SOURCE_DIR}/mergetools/*")
    +-	file(COPY ${mergetools} DESTINATION ${CMAKE_BINARY_DIR}/mergetools/)
     -	file(COPY ${CMAKE_SOURCE_DIR}/contrib/completion/git-prompt.sh DESTINATION ${CMAKE_BINARY_DIR}/contrib/completion/)
     -	file(COPY ${CMAKE_SOURCE_DIR}/contrib/completion/git-completion.bash DESTINATION ${CMAKE_BINARY_DIR}/contrib/completion/)
      endif()
    @@ t/t9903-bash-prompt.sh: export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
     
      ## t/test-lib.sh ##
     @@ t/test-lib.sh: then
    - 	# elsewhere
    - 	TEST_OUTPUT_DIRECTORY=$TEST_DIRECTORY
    + 	echo "PANIC: Running in a $TEST_DIRECTORY that doesn't end in '/t'?" >&2
    + 	exit 1
      fi
    --GIT_BUILD_DIR="${TEST_DIRECTORY%/t}"
    -+
    -+# The GIT_{SOURCE,BUILD}_DIR is always the same, except when
    -+# CMakeLists.txt replaces the "GIT_BUILD_DIR" line with the path to
    -+# its build directory.
    -+GIT_SOURCE_DIR="${TEST_DIRECTORY%/t}"
    -+GIT_BUILD_DIR="$GIT_SOURCE_DIR"
     +
    - if test "$TEST_DIRECTORY" = "$GIT_BUILD_DIR"
    ++# For CMake the top-level source directory is different from our build
    ++# directory. With the top-level Makefile they're the same.
    ++GIT_SOURCE_DIR="$GIT_BUILD_DIR"
    + if test -f "$GIT_BUILD_DIR/GIT-BUILD-DIR"
      then
    - 	echo "PANIC: Running in a $TEST_DIRECTORY that doesn't end in '/t'?" >&2
    + 	GIT_BUILD_DIR="$(cat "$GIT_BUILD_DIR/GIT-BUILD-DIR")" || exit 1
     @@ t/test-lib.sh: then
      		make_valgrind_symlink $file
      	done
 4:  52cd674d5b8 !  6:  29a9811857f cmake: set "USE_LIBPCRE2" in "GIT-BUILD-OPTIONS" for test-lib.sh
    @@ Commit message
         on the behavior of !PCRE2. The reason this hasn't been noticed is that
         the Windows CI doesn't have access to libpcre2.
     
    +    With this the remaining two failures we had left after the preceding
    +    step are resolved, but note that that test run didn't include the
    +    git-p4 tests, which a subsequent commit will address).
    +
         1. 80431510a2b (cmake: add pcre2 support, 2022-05-24)
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
 5:  6199a913c0a !  7:  a9ea3867f5f test-lib.sh: support a "GIT_TEST_BUILD_DIR"
    @@ Commit message
                 [apply this change to git2]
                 (cd git2 && GIT_TEST_BUILD_DIR="$PWD/../git1" make -C t prove)
     
    +    This facility and file-based instructions to have the test suite use
    +    another build directory[2] are mutually exclusive, but in a subsequent
    +    commit we'll make CMake use this instead.
    +
         1. 6720721e152 (test-lib.sh: Allow running the test suite against
            installed git, 2009-03-16)
    +    2. 350a005e366 (cmake: avoid editing t/test-lib.sh, 2022-10-18)
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    @@ t/README: override the location of the dashed-form subcommands (what
     
      ## t/test-lib.sh ##
     @@ t/test-lib.sh: fi
    - # its build directory.
    - GIT_SOURCE_DIR="${TEST_DIRECTORY%/t}"
    - GIT_BUILD_DIR="$GIT_SOURCE_DIR"
    + # For CMake the top-level source directory is different from our build
    + # directory. With the top-level Makefile they're the same.
    + GIT_SOURCE_DIR="$GIT_BUILD_DIR"
    +-if test -f "$GIT_BUILD_DIR/GIT-BUILD-DIR"
     +if test -n "$GIT_TEST_BUILD_DIR"
     +then
     +	GIT_BUILD_DIR="$GIT_TEST_BUILD_DIR"
    -+fi
    - 
    - if test "$TEST_DIRECTORY" = "$GIT_BUILD_DIR"
    ++elif test -f "$GIT_BUILD_DIR/GIT-BUILD-DIR"
      then
    + 	GIT_BUILD_DIR="$(cat "$GIT_BUILD_DIR/GIT-BUILD-DIR")" || exit 1
    + 	# On Windows, we must convert Windows paths lest they contain a colon
 6:  45f1a4e6f93 !  8:  51bb01b99d4 cmake: use GIT_TEST_BUILD_DIR instead of editing hack
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    cmake: use GIT_TEST_BUILD_DIR instead of editing hack
    +    Makefile + cmake: use environment, not GIT-BUILD-DIR
     
    -    When cmake builds git in "contrib/buildsystems/out" it will create a
    -    "t/" directory there containing only the "t/helper/test-tool", but for
    -    running the tests with "cmake" it cd's to the "real" t/ directory, and
    -    runs the tests from there.
    +    Change the method used to have building with "cmake" followed by
    +    running the tests manually work without creating inter-dependency issues with the Makefile.
     
    -    To get the test-lib.sh to locate "git" and other binaries in
    -    "../contrib/buildsystems/out/" rather than "../" we have since [1]
    -    been editing the "GIT_BUILD_DIR" assignment in test-lib.sh in-place.
    +    Per ee9e66e4e76 (cmake: avoid editing t/test-lib.sh, 2022-10-18) and
    +    the surrounding discussion the goal of that change was to have
    +    building with cmake and:
     
    -    This has meant that when testing cmake we've had to "git reset --hard"
    -    before running "make" again.
    +            (cd t && ./t0001-init.sh)
     
    -    What this build infrastructure really wanted was some feature like the
    -    "GIT_TEST_BUILD_DIR" variable added in the preceding commit, so let's
    -    make use of it.
    +    Work, to do so we need some way to make the test-lib.sh aware that we
    +    have a build in contrib/buildsystems/out. The downside of doing it via
    +    the GIT-BUILD-DIR facility in ee9e66e4e76 is:
     
    -    Even though "ctest" will work with this approach, one advantage of the
    -    previous arrangement was that we could:
    +    - A "remove this file while at it" only fits into the Makefile
    +      dependency graph if we "FORCE" a shell command to be run, so doing it
    +      this way precludes speeding up the Makefile by e.g. making use of the
    +      "$(file)" function (for which I've got follow-up patches).
     
    -            A. Build with cmake
    -            B. cd t
    -            C. Run a test
    +    - If you build with make, then with cmake, and then e.g.:
     
    -    And have the test itself know to locate and use the cmake binaries,
    -    this workflow was documented in [2]. The "t/test-lib".sh modification
    -    here is so that we can support this use-case.
    +            make -C t prove
     
    -    As [3] notes "contrib/buildsystems/out" isn't just the directory that
    -    happens to be documented in "contrib/buildsystems/CMakeLists.txt", but
    -    the one that VS will use when building git.
    +      We'll run the tests against the cmake version of the tests, not the
    +      "make" built ones. It's important to get any subtle interaction
    +      between two conflicting build systems right.
     
    -    To make it clear what's happening we emit a "setup: " from the
    -    test-lib.sh to note that we used this fallback method:
    +    Now we'll instead:
    +
    +    - Check if the top-level "git" exists, if not we'll look in
    +      "contrib/buildsystems/out/git", and when running interactively inform
    +      the user about the fallback being picked.
     
                 $ ./t0001-init.sh
                 setup: had no ../git, but found & used cmake built git in ../contrib/buildsystems/out/git
                 ok 1 - plain
                 [...]
     
    -    Note: the "On Windows[...]" part of this is lifted from [4].
    +    - This also makes things more obvious on the cmake side, because we'll
    +      now use an environment variable to select the test environment, which
    +      ctest it notes in its verbose output, e.g.:
    +
    +            [...]
    +            2: Test command: /bin/sh "/home/avar/g/git/contrib/buildsystems/../../t/t0001-init.sh" "--no-bin-wrappers" "--no-chain-lint" "-vx"
    +            2: Working Directory: /home/avar/g/git/contrib/buildsystems/../../t
    +            2: Environment variables:
    +            2:  GIT_TEST_BUILD_DIR=/home/avar/g/git/contrib/buildsystems/out
    +            [...]
    +
    +       See [1] for the relevant cmake language references.
    +
    +    - We don't support an arbitrary build directory outside of
    +      "contrib/buildsystems/out". This is OK because the reason for doing
    +      this part is to support the workflow documented in [2].
    +
    +      As [3] notes "contrib/buildsystems/out" isn't just the directory that
    +      happens to be documented in "contrib/buildsystems/CMakeLists.txt", but
    +      the one that VS will use when building git.
     
    -    1. 7f5397a07c6 (cmake: support for testing git when building out of
    -       the source tree, 2020-06-26)
    -    2. f2f1250c47f (cmake (Windows): recommend using Visual Studio's
    +    1. https://cmake.org/cmake/help/latest/command/set_property.html
    +       https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html#test-properties
    +       https://cmake.org/cmake/help/latest/manual/cmake-language.7.html#cmake-language-lists
    +    1. f2f1250c47f (cmake (Windows): recommend using Visual Studio's
            built-in CMake support, 2020-09-30)
    -    3. 3eccc7b99d4 (cmake: ignore files generated by CMake as run in
    +    2. 3eccc7b99d4 (cmake: ignore files generated by CMake as run in
            Visual Studio, 2020-09-25)
    -    4. https://lore.kernel.org/git/5b0c2a150e9fce1ca0284d65628b42ed5a7aad9a.1666090745.git.gitgitgadget@gmail.com/
     
    -    Signed-off-by: Johannes Schindelin <johannes.schindelin@gmx.de>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    + ## .gitignore ##
    +@@
    + /fuzz_corpora
    +-/GIT-BUILD-DIR
    + /GIT-BUILD-OPTIONS
    + /GIT-CFLAGS
    + /GIT-LDFLAGS
    +
    + ## Makefile ##
    +@@ Makefile: else
    + 	@echo RUNTIME_PREFIX=\'false\' >>$@+
    + endif
    + 	@if cmp $@+ $@ >/dev/null 2>&1; then $(RM) $@+; else mv $@+ $@; fi
    +-	@if test -f GIT-BUILD-DIR; then rm GIT-BUILD-DIR; fi
    + 
    + ### Detect Python interpreter path changes
    + ifndef NO_PYTHON
    +
      ## contrib/buildsystems/CMakeLists.txt ##
     @@ contrib/buildsystems/CMakeLists.txt: if(USE_VCPKG)
      	file(APPEND ${CMAKE_BINARY_DIR}/GIT-BUILD-OPTIONS "PATH=\"$PATH:$TEST_DIRECTORY/../compat/vcbuild/vcpkg/installed/x64-windows/bin\"\n")
    @@ contrib/buildsystems/CMakeLists.txt: if(USE_VCPKG)
     -#Make the tests work when building out of the source tree
     -get_filename_component(CACHE_PATH ${CMAKE_CURRENT_LIST_DIR}/../../CMakeCache.txt ABSOLUTE)
     -if(NOT ${CMAKE_BINARY_DIR}/CMakeCache.txt STREQUAL ${CACHE_PATH})
    --	file(RELATIVE_PATH BUILD_DIR_RELATIVE ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR}/CMakeCache.txt)
    --	string(REPLACE "/CMakeCache.txt" "" BUILD_DIR_RELATIVE ${BUILD_DIR_RELATIVE})
     -	#Setting the build directory in test-lib.sh before running tests
     -	file(WRITE ${CMAKE_BINARY_DIR}/CTestCustom.cmake
    --		"file(STRINGS ${CMAKE_SOURCE_DIR}/t/test-lib.sh GIT_BUILD_DIR_REPL REGEX \"GIT_BUILD_DIR=(.*)\")\n"
    --		"file(STRINGS ${CMAKE_SOURCE_DIR}/t/test-lib.sh content NEWLINE_CONSUME)\n"
    --		"string(REPLACE \"\${GIT_BUILD_DIR_REPL}\" \"GIT_BUILD_DIR=\\\"$TEST_DIRECTORY/../${BUILD_DIR_RELATIVE}\\\"\" content \"\${content}\")\n"
    --		"file(WRITE ${CMAKE_SOURCE_DIR}/t/test-lib.sh \${content})")
    +-		"file(WRITE ${CMAKE_SOURCE_DIR}/GIT-BUILD-DIR \"${CMAKE_BINARY_DIR}\")")
     -endif()
     -
      file(GLOB test_scipts "${CMAKE_SOURCE_DIR}/t/t[0-9]*.sh")
      
      #test
    - foreach(tsh ${test_scipts})
    +@@ contrib/buildsystems/CMakeLists.txt: foreach(tsh ${test_scipts})
      	add_test(NAME ${tsh}
    --		COMMAND ${SH_EXE} ${tsh}
    -+		COMMAND env GIT_TEST_BUILD_DIR=${CMAKE_BINARY_DIR} ${SH_EXE} ${tsh}
    + 		COMMAND ${SH_EXE} ${tsh} --no-bin-wrappers --no-chain-lint -vx
      		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/t)
    ++       set_property(TEST ${tsh} APPEND PROPERTY ENVIRONMENT
    ++		    GIT_TEST_BUILD_DIR=${CMAKE_BINARY_DIR})		
      endforeach()
      
    + # This test script takes an extremely long time and is known to time out even
     
      ## t/test-lib.sh ##
     @@ t/test-lib.sh: fi
    - # its build directory.
    - GIT_SOURCE_DIR="${TEST_DIRECTORY%/t}"
    - GIT_BUILD_DIR="$GIT_SOURCE_DIR"
    + # For CMake the top-level source directory is different from our build
    + # directory. With the top-level Makefile they're the same.
    + GIT_SOURCE_DIR="$GIT_BUILD_DIR"
    ++
     +GIT_AUTO_CONTRIB_BUILDSYSTEMS_OUT=
      if test -n "$GIT_TEST_BUILD_DIR"
      then
      	GIT_BUILD_DIR="$GIT_TEST_BUILD_DIR"
    +-elif test -f "$GIT_BUILD_DIR/GIT-BUILD-DIR"
     +elif ! test -x "$GIT_BUILD_DIR/git" &&
     +     test -x "$GIT_BUILD_DIR/contrib/buildsystems/out/git"
    -+then
    + then
    +-	GIT_BUILD_DIR="$(cat "$GIT_BUILD_DIR/GIT-BUILD-DIR")" || exit 1
     +	GIT_BUILD_DIR="$GIT_SOURCE_DIR/contrib/buildsystems/out"
     +	GIT_AUTO_CONTRIB_BUILDSYSTEMS_OUT=t
    -+	# On Windows, we must convert Windows paths lest they contain a colon
    -+	case "$(uname -s)" in
    -+	*MINGW*)
    -+		GIT_BUILD_DIR="$(cygpath -au "$GIT_BUILD_DIR")"
    -+		;;
    -+	esac
    - fi
    - 
    - if test "$TEST_DIRECTORY" = "$GIT_BUILD_DIR"
    ++
    + 	# On Windows, we must convert Windows paths lest they contain a colon
    + 	case "$(uname -s)" in
    + 	*MINGW*)
     @@ t/test-lib.sh: remove_trash_directory "$TRASH_DIRECTORY" || {
      	BAIL_OUT 'cannot prepare test area'
      }
 7:  fc9f036695f !  9:  9f5276d79c9 cmake: support using GIT_TEST_OPTS from the environment
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    cmake: support using GIT_TEST_OPTS from the environment
    +    cmake: support GIT_TEST_OPTS, abstract away WIN32 defaults
     
    -    Get "GIT_TEST_OPTS" from the environment, and use it to pass arguments
    -    to tests. This allows for passing arguments to tests with e.g.:
    +    The rationale for adding "--no-bin-wrappers" and "--no-chain-lint" in
    +    2ea1d8b5563 (cmake: make it easier to diagnose regressions in CTest
    +    runs, 2022-10-18) was those options slowed down the tests considerably
    +    on Windows.
     
    -            GIT_TEST_OPTS="--verbose --debug" cmake .; ctest -R t0001 --verbose
    +    But since f31b6244950 (Merge branch 'yw/cmake-updates', 2022-06-07)
    +    and with the preceding commits cmake and ctest are not
    +    Windows-specific anymore.
     
    -    There's some overlap with this and what was suggested in [1], but as
    -    noted there we're not passing "--verbose" and friends unconditionally,
    -    so a plain "ctest" invocation without a "cmake" re-build won't pick up
    -    the options.
    +    So let's set those same options by default on Windows, but do so with
    +    the set() facility. As noted in cmake's documentation[1] this
    +    integrates nicely with e.g. cmake-gui.
     
    -    1. https://lore.kernel.org/git/356b2e9a1007bcd1382f26f333926ff0d5b9abe2.1666090745.git.gitgitgadget@gmail.com/
    +    On *nix we don't set any custom options. The change in 2ea1d8b5563
    +    didn't discuss why Windows should have divergent defaults with "cmake"
    +    and "make", but such reasons presumably don't apply on *nix. I for one
    +    am happy with the same defaults as the tests have when running via the
    +    Makefile.
    +
    +    With the "message()" addition we'll emit this when running cmake:
    +
    +            Generating hook-list.h
    +            -- Using user-selected test options: -vixd
    +            -- Configuring done
    +            -- Generating done
    +            -- Build files have been written to: /home/avar/g/git/contrib/buildsystems/out
    +
    +    Unfortunately cmake doesn't support a non-hacky way to pass variables
    +    to ctest without re-running cmake itself, so when re-running tests via
    +    cmake and wanting to change the test defaults we'll need:
    +
    +            GIT_TEST_OPTS=-i cmake -S contrib/buildsystems -B contrib/buildsystems/out &&
    +            ctest --jobs=$(nproc) --test-dir contrib/buildsystems/out -R t0071 --verbose
    +
    +    1. https://cmake.org/cmake/help/latest/command/set.html#set-cache-entry
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## contrib/buildsystems/CMakeLists.txt ##
    +@@ contrib/buildsystems/CMakeLists.txt: To use this in Visual Studio:
    + 
    + Open the worktree as a folder. Visual Studio 2019 and later will detect
    + the CMake configuration automatically and set everything up for you,
    +-ready to build. You can then run the tests in `t/` via a regular Git Bash.
    ++ready to build. See "== Running the tests ==" below for running the tests.
    + 
    + Note: Visual Studio also has the option of opening `CMakeLists.txt`
    + directly; Using this option, Visual Studio will not find the source code,
    +@@ contrib/buildsystems/CMakeLists.txt: empty(default) :
    + 
    + NOTE: -DCMAKE_BUILD_TYPE is optional. For multi-config generators like Visual Studio
    + this option is ignored
    ++
    ++== Running the tests ==
    ++
    ++Once we've built in "contrib/buildsystems/out" the tests can be run at
    ++the top-level (note: not the generated "contrib/buildsystems/out/t/"
    ++drectory). If no top-level build is found (as created with the
    ++Makefile) the t/test-lib.sh will discover the git in
    ++"contrib/buildsystems/out" on e.g.:
    ++
    ++	(cd t && ./t0001-init.sh)
    ++	setup: had no ../git, but found & used cmake built git in ../contrib/buildsystems/out/git
    ++	[...]
    ++
    ++The tests can also be run with ctest, e.g. after building with "cmake"
    ++and "make" or "msbuild" run, from the top-level e.g.:
    ++
    ++	ctest --test-dir contrib/buildsystems/out --jobs="$(nproc)"--output-on-failure
    ++
    ++Options can be passed by setting GIT_TEST_OPTIONS before invoking
    ++cmake. E.g. on a Linux system with systemd the tests can be sped up by
    ++using a ramdisk for the scratch files:
    ++
    ++	GIT_TEST_OPTS="--root=/run/user/$(id -u)/ctest" cmake -S contrib/buildsystems -B contrib/buildsystems/out
    ++	[...]
    ++	-- Using user-selected test options: --root=/run/user/1001/ctest
    ++
    ++Then running the tests with "ctest" (here with --jobs="$(nproc)"):
    ++
    ++	ctest --jobs=$(nproc) --test-dir contrib/buildsystems/out
    + ]]
    + cmake_minimum_required(VERSION 3.14)
    + 
     @@ contrib/buildsystems/CMakeLists.txt: endif()
    + 
      file(GLOB test_scipts "${CMAKE_SOURCE_DIR}/t/t[0-9]*.sh")
      
    - #test
    -+set(GIT_TEST_OPTS "$ENV{GIT_TEST_OPTS}")
    ++string(COMPARE NOTEQUAL "$ENV{GIT_TEST_OPTS}" "" HAVE_USER_GIT_TEST_OPTS)
    ++if(HAVE_USER_GIT_TEST_OPTS)
    ++	set(GIT_TEST_OPTS "$ENV{GIT_TEST_OPTS}")
    ++	message(STATUS "Using user-selected test options: ${GIT_TEST_OPTS}")
    ++elseif(WIN32)
    ++	set(GIT_TEST_OPTS "--no-bin-wrappers --no-chain-lint -vx")
    ++	message(STATUS "Using Windowns-specific default test options: ${GIT_TEST_OPTS}")
    ++else()
    ++	set(GIT_TEST_OPTS "")
    ++	message(STATUS "No custom test options selected, set e.g. GIT_TEST_OPTS=\"-vixd\"")
    ++endif()
     +separate_arguments(GIT_TEST_OPTS)
    ++
    + #test
      foreach(tsh ${test_scipts})
      	add_test(NAME ${tsh}
    --		COMMAND env GIT_TEST_BUILD_DIR=${CMAKE_BINARY_DIR} ${SH_EXE} ${tsh}
    -+		COMMAND env GIT_TEST_BUILD_DIR=${CMAKE_BINARY_DIR} ${SH_EXE} ${tsh} ${GIT_TEST_OPTS}
    +-		COMMAND ${SH_EXE} ${tsh} --no-bin-wrappers --no-chain-lint -vx
    ++		COMMAND ${SH_EXE} ${tsh} ${GIT_TEST_OPTS}
      		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/t)
    - endforeach()
    - 
    +        set_property(TEST ${tsh} APPEND PROPERTY ENVIRONMENT
    + 		    GIT_TEST_BUILD_DIR=${CMAKE_BINARY_DIR})		
 8:  56102c2a4bf = 10:  ef6a304368c cmake: copy over git-p4.py for t983[56] perforce test
 9:  b81f18dec61 = 11:  158a41ca7a4 CI: add a "linux-cmake-test" to run cmake & ctest on linux
-- 
2.38.0.1250.ge066ede4da3

