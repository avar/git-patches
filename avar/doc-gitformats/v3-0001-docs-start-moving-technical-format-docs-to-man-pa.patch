From a666302b2ce3d3434217d2e8dd68f5fed3dd0b11 Mon Sep 17 00:00:00 2001
Message-Id: <patch-v3-01.11-a666302b2ce-20210921T192924Z-avarab@gmail.com>
In-Reply-To: <cover-v3-00.11-00000000000-20210921T192923Z-avarab@gmail.com>
References: <cover-v2-0.5-00000000000-20210910T112545Z-avarab@gmail.com>
	<cover-v3-00.11-00000000000-20210921T192923Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Fri, 4 Jun 2021 15:47:28 +0200
Subject: [PATCH v3 01/11] docs: start moving technical "format" docs to man
 pages
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Move the Documentation/technical/bundle-format.txt documentation added
in 7378ec90e1c (doc: describe Git bundle format, 2020-02-07) to a new
gitformat-bundle(5) page, and add a gitformats(5) index page which
will be an index of such documentation. We'll move more of it over in
subsequent commits.

The reason to do this is that having this documentation in
Documentation/technical/* makes it less accessible. It is not
installed by default, and we don't build man page versions of these,
therefore when we link to it from man pages we end up linking to the
generated HTML version of these docs.

I don't see a reason for why most or all of of
Documentation/technical/* documentation of this nature shouldn't be
promoted to being a part of our main documentation, e.g. in this case
the git-bundle(1) manpage can now link to this new documentation.

Unfortunately the syntax of the current Documentation/technical/*.txt
is not the same (when it comes to section headings etc.) as our
Documentation/*.txt documentation, so change the relevant bits of
syntax as we're moving this over.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
 Documentation/Makefile                        |  2 +
 Documentation/git-bundle.txt                  |  5 +++
 ...bundle-format.txt => gitformat-bundle.txt} | 44 ++++++++++++++++---
 Documentation/gitformats.txt                  | 29 ++++++++++++
 builtin/help.c                                |  8 ++++
 command-list.txt                              |  6 +++
 help.c                                        | 20 ++++++++-
 help.h                                        |  1 +
 8 files changed, 107 insertions(+), 8 deletions(-)
 rename Documentation/{technical/bundle-format.txt => gitformat-bundle.txt} (78%)
 create mode 100644 Documentation/gitformats.txt

diff --git a/Documentation/Makefile b/Documentation/Makefile
index f5605b7767f..855dd671cef 100644
--- a/Documentation/Makefile
+++ b/Documentation/Makefile
@@ -21,6 +21,8 @@ MAN1_TXT += gitweb.txt
 
 # man5 / man7 guides (note: new guides should also be added to command-list.txt)
 MAN5_TXT += gitattributes.txt
+MAN5_TXT += gitformat-bundle.txt
+MAN5_TXT += gitformats.txt
 MAN5_TXT += githooks.txt
 MAN5_TXT += gitignore.txt
 MAN5_TXT += gitmailmap.txt
diff --git a/Documentation/git-bundle.txt b/Documentation/git-bundle.txt
index 71b5ecabd1f..cd24eda583f 100644
--- a/Documentation/git-bundle.txt
+++ b/Documentation/git-bundle.txt
@@ -334,6 +334,11 @@ You can also see what references it offers:
 $ git ls-remote mybundle
 ----------------
 
+FILE FORMAT
+-----------
+
+See linkgit:gitformat-bundle[5].
+
 GIT
 ---
 Part of the linkgit:git[1] suite
diff --git a/Documentation/technical/bundle-format.txt b/Documentation/gitformat-bundle.txt
similarity index 78%
rename from Documentation/technical/bundle-format.txt
rename to Documentation/gitformat-bundle.txt
index bac558d049a..3aa2242eb9d 100644
--- a/Documentation/technical/bundle-format.txt
+++ b/Documentation/gitformat-bundle.txt
@@ -1,11 +1,33 @@
-= Git bundle v2 format
+gitformat-bundle(5)
+===================
 
-The Git bundle format is a format that represents both refs and Git objects.
+NAME
+----
+gitformat-bundle - The bundle file format
+
+
+SYNOPSIS
+--------
+[verse]
+*.bundle
+*.bdl
+
+DESCRIPTION
+-----------
+
+The Git bundle format is a format that represents both refs and Git
+objects. A bundle is a header in a format similar to
+linkgit:git-show-ref[1] followed by a pack in *.pack format.
 
-== Format
+The format is created and read by the linkgit:git-bundle[1] command,
+and supported by e.g. linkgit:git-fetch[1] and linkgit:git-clone[1].
+
+
+FORMAT
+------
 
 We will use ABNF notation to define the Git bundle format. See
-protocol-common.txt for the details.
+link:technical/protocol-common.html for the details.
 
 A v2 bundle looks like this:
 
@@ -36,7 +58,9 @@ value        = *(%01-09 / %0b-FF)
 pack         = ... ; packfile
 ----
 
-== Semantics
+
+SEMANTICS
+---------
 
 A Git bundle consists of several parts.
 
@@ -62,15 +86,21 @@ In the bundle format, there can be a comment following a prerequisite obj-id.
 This is a comment and it has no specific meaning. The writer of the bundle MAY
 put any string here. The reader of the bundle MUST ignore the comment.
 
-=== Note on the shallow clone and a Git bundle
+Note on the shallow clone and a Git bundle
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Note that the prerequisites does not represent a shallow-clone boundary. The
 semantics of the prerequisites and the shallow-clone boundaries are different,
 and the Git bundle v2 format cannot represent a shallow clone repository.
 
-== Capabilities
+CAPABILITIES
+------------
 
 Because there is no opportunity for negotiation, unknown capabilities cause 'git
 bundle' to abort.  The only known capability is `object-format`, which specifies
 the hash algorithm in use, and can take the same values as the
 `extensions.objectFormat` configuration value.
+
+GIT
+---
+Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformats.txt b/Documentation/gitformats.txt
new file mode 100644
index 00000000000..64c12d0d4d0
--- /dev/null
+++ b/Documentation/gitformats.txt
@@ -0,0 +1,29 @@
+gitformats(5)
+=============
+
+NAME
+----
+gitformats - Overview of file and wire formats used by Git
+
+SYNOPSIS
+--------
+
+$GIT_DIR/<various files>
+<over the wire formats>
+
+DESCRIPTION
+-----------
+
+Git uses various on-disk and over-the-wire file formats. This manual
+page serves as an overview of these files formats.
+
+FORMATS
+-------
+
+bundle format::
+	The file format used by .bundle files created by
+	linkgit:git-bundle[1]. See linkgit:gitformat-bundle[5].
+
+GIT
+---
+Part of the linkgit:git[1] suite
diff --git a/builtin/help.c b/builtin/help.c
index 5862a1e431d..8e58636ba69 100644
--- a/builtin/help.c
+++ b/builtin/help.c
@@ -45,6 +45,7 @@ static enum help_action {
 	HELP_ACTION_GUIDES,
 	HELP_ACTION_CONFIG,
 	HELP_ACTION_USER_FORMATS,
+	HELP_ACTION_GIT_FORMATS,
 	HELP_ACTION_CONFIG_FOR_COMPLETION,
 	HELP_ACTION_CONFIG_SECTIONS_FOR_COMPLETION,
 } cmd_mode;
@@ -69,6 +70,8 @@ static struct option builtin_help_options[] = {
 		    HELP_ACTION_GUIDES),
 	OPT_CMDMODE(0, "user-formats", &cmd_mode, N_("print list of user-facing file formats"),
 		    HELP_ACTION_USER_FORMATS),
+	OPT_CMDMODE(0, "git-formats", &cmd_mode, N_("print list of Git's own file and network formats"),
+		    HELP_ACTION_GIT_FORMATS),
 	OPT_CMDMODE('c', "config", &cmd_mode, N_("print all configuration variable names"),
 		    HELP_ACTION_CONFIG),
 	OPT_CMDMODE_F(0, "config-for-completion", &cmd_mode, "",
@@ -85,6 +88,7 @@ static const char * const builtin_help_usage[] = {
 	N_("git help [-g|--guides]"),
 	N_("git help [-c|--config]"),
 	N_("git help [--user-formats]"),
+	N_("git help [--git-formats]"),
 	NULL
 };
 
@@ -623,6 +627,10 @@ int cmd_help(int argc, const char **argv, const char *prefix)
 		no_extra_argc(argc);
 		list_user_formats_help();
 		return 0;
+	case HELP_ACTION_GIT_FORMATS:
+		no_extra_argc(argc);
+		list_git_formats_help();
+		return 0;
 	case HELP_ACTION_CONFIG_SECTIONS_FOR_COMPLETION:
 		no_extra_argc(argc);
 		list_config_help(SHOW_CONFIG_SECTIONS);
diff --git a/command-list.txt b/command-list.txt
index 2aa741dbafb..587cf13a78c 100644
--- a/command-list.txt
+++ b/command-list.txt
@@ -47,6 +47,10 @@
 # .mailmap etc. files lives in man section 5. Those entries can only
 # have the "userformats" "userformats" attribute and nothing else.
 #
+# Git's own file and network formats such as documentation for the
+# *.bundle format lives in mn section 5. These entrys can only have
+# the "gitformats" attribute and nothing else.
+#
 ### command list (do not change this line, also do not change alignment)
 # command name                          category [category] [category]
 git-add                                 mainporcelain           worktree
@@ -210,6 +214,8 @@ githooks                                userformats
 gitignore                               userformats
 gitmailmap                              userformats
 gitmodules                              userformats
+gitformats                              gitformats
+gitformat-bundle                        gitformats
 gitnamespaces                           guide
 gitremote-helpers                       guide
 gitrepository-layout                    guide
diff --git a/help.c b/help.c
index 5d13e0909d3..945a023c1c3 100644
--- a/help.c
+++ b/help.c
@@ -38,6 +38,7 @@ static struct category_description main_categories[] = {
 	{ CAT_synchingrepositories, N_("Low-level Commands / Syncing Repositories") },
 	{ CAT_purehelpers, N_("Low-level Commands / Internal Helpers") },
 	{ CAT_userformats, N_("User-facing file formats") },
+	{ CAT_gitformats, N_("Internal file- and wire formats formats") },
 	{ 0, NULL }
 };
 
@@ -50,7 +51,6 @@ static const char *drop_prefix(const char *name, uint32_t category)
 	if (category == CAT_guide && skip_prefix(name, "git", &new_name))
 		return new_name;
 	return name;
-
 }
 
 static void extract_cmds(struct cmdname_help **p_cmds, uint32_t mask)
@@ -99,6 +99,14 @@ static int cmd_name_cmp(const void *elem1, const void *elem2)
 	const struct cmdname_help *e1 = elem1;
 	const struct cmdname_help *e2 = elem2;
 
+	/*
+	 * "-" sorts before "s", but it makes sense to have the
+	 * "gitformats" index page sorted at the top of its category.
+	 */
+	if (!strcmp(e1->name, "gitformats") &&
+	    starts_with(e2->name, "gitformat-"))
+		return -1;
+
 	return strcmp(e1->name, e2->name);
 }
 
@@ -421,6 +429,16 @@ void list_user_formats_help(void)
 	putchar('\n');
 }
 
+void list_git_formats_help(void)
+{
+	struct category_description catdesc[] = {
+		{ CAT_gitformats, N_("Git's internal file and network formats are:") },
+		{ 0, NULL }
+	};
+	print_cmd_by_category(catdesc, NULL);
+	putchar('\n');
+}
+
 static int get_alias(const char *var, const char *value, void *data)
 {
 	struct string_list *list = data;
diff --git a/help.h b/help.h
index 133a42f6985..bf8b2a69343 100644
--- a/help.h
+++ b/help.h
@@ -23,6 +23,7 @@ void list_common_cmds_help(void);
 void list_all_cmds_help(void);
 void list_guides_help(void);
 void list_user_formats_help(void);
+void list_git_formats_help(void);
 
 void list_all_main_cmds(struct string_list *list);
 void list_all_other_cmds(struct string_list *list);
-- 
2.33.0.1098.gf02a64c1a2d

