From 3e3f92f76d7d36191451b1624d34ac23452f7fa1 Mon Sep 17 00:00:00 2001
Message-Id: <patch-v3-11.11-3e3f92f76d7-20210921T192914Z-avarab@gmail.com>
In-Reply-To: <cover-v3-00.11-00000000000-20210921T192914Z-avarab@gmail.com>
References: <cover-v2-0.5-00000000000-20210910T112545Z-avarab@gmail.com>
	<cover-v3-00.11-00000000000-20210921T192914Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Tue, 21 Sep 2021 21:26:04 +0200
Subject: [PATCH v3 11/11] Mostly revert this branch, too many conflicts

Revert "docs: move chunk-format docs to man section 5"

This reverts commit 4fb21f65c1539b69ddbb67bf51e2c06f677434a9.

Revert "docs: move bitmap-format docs to man section 5"

This reverts commit 24be49877a2b352570d632c1e6265901bdf5f9d6.

Revert "docs: move signature-format docs to man section 5"

This reverts commit f26e5ecba12df8e4a305125f54430980a57a3592.

Revert "docs: move index-format docs to man section 5"

This reverts commit 92210bc7ddb8bf9e207776ee5c87955f13af9f5c.

Revert "docs: move commit-graph format docs to man section 5"

This reverts commit 83deccbb9a69fd2c5b8b926ed228c13c6a2ab942.

Revert "docs: move http-protocol docs to man section 5"

This reverts commit b1c4f0df139e292161996fab6bf9b70265270b31.

Revert "docs: move pack-protocol docs to man section 5"

This reverts commit 1ebf7653a5416f6ff87dea509902ac32ba76f438.

Revert "docs: move pack format docs to man section 5"

This reverts commit ba15f599a9ea057a73cd13bd69765a8290904813.

Revert "docs: move protocol-related docs to man section 5"

This reverts commit 784508b1109dfd62097cc9c496ae01d6021250aa.
---
 Documentation/Makefile                        | 19 +++++-----
 Documentation/config/lsrefs.txt               |  2 +-
 Documentation/config/pack.txt                 |  2 +-
 Documentation/config/protocol.txt             |  2 +-
 Documentation/git-multi-pack-index.txt        |  4 +--
 Documentation/gitformat-bundle.txt            |  2 +-
 .../howto/recover-corrupted-object-harder.txt |  2 +-
 Documentation/technical/api-simple-ipc.txt    |  2 +-
 .../bitmap-format.txt}                        | 30 ++--------------
 .../chunk-format.txt}                         | 31 ++++------------
 .../commit-graph-format.txt}                  | 24 ++-----------
 .../technical/hash-function-transition.txt    |  2 +-
 .../http-protocol.txt}                        | 35 ++++---------------
 .../index-format.txt}                         | 23 ++----------
 .../long-running-process-protocol.txt         |  2 +-
 .../pack-format.txt}                          | 35 ++-----------------
 .../pack-protocol.txt}                        | 27 +++-----------
 Documentation/technical/partial-clone.txt     |  2 +-
 .../protocol-capabilities.txt}                | 29 ++++-----------
 .../protocol-common.txt}                      | 24 ++-----------
 .../protocol-v2.txt}                          | 27 +++-----------
 .../signature-format.txt}                     | 22 ++----------
 Documentation/user-manual.txt                 |  2 +-
 cache.h                                       |  3 +-
 command-list.txt                              |  8 -----
 pack-revindex.h                               |  2 +-
 t/t5551-http-fetch-smart.sh                   |  2 +-
 27 files changed, 69 insertions(+), 296 deletions(-)
 rename Documentation/{gitformat-bitmap.txt => technical/bitmap-format.txt} (92%)
 rename Documentation/{gitformat-chunk.txt => technical/chunk-format.txt} (90%)
 rename Documentation/{gitformat-commit-graph.txt => technical/commit-graph-format.txt} (95%)
 rename Documentation/{gitformat-protocol-http.txt => technical/http-protocol.txt} (97%)
 rename Documentation/{gitformat-index.txt => technical/index-format.txt} (98%)
 rename Documentation/{gitformat-pack.txt => technical/pack-format.txt} (95%)
 rename Documentation/{gitformat-pack-protocol.txt => technical/pack-protocol.txt} (98%)
 rename Documentation/{gitformat-protocol-capabilities.txt => technical/protocol-capabilities.txt} (96%)
 rename Documentation/{gitformat-protocol-common.txt => technical/protocol-common.txt} (88%)
 rename Documentation/{gitformat-protocol-v2.txt => technical/protocol-v2.txt} (97%)
 rename Documentation/{gitformat-signature.txt => technical/signature-format.txt} (96%)

diff --git a/Documentation/Makefile b/Documentation/Makefile
index 491149e6dd0..855dd671cef 100644
--- a/Documentation/Makefile
+++ b/Documentation/Makefile
@@ -21,18 +21,7 @@ MAN1_TXT += gitweb.txt
 
 # man5 / man7 guides (note: new guides should also be added to command-list.txt)
 MAN5_TXT += gitattributes.txt
-MAN5_TXT += gitformat-bitmap.txt
 MAN5_TXT += gitformat-bundle.txt
-MAN5_TXT += gitformat-chunk.txt
-MAN5_TXT += gitformat-commit-graph.txt
-MAN5_TXT += gitformat-index.txt
-MAN5_TXT += gitformat-pack-protocol.txt
-MAN5_TXT += gitformat-pack.txt
-MAN5_TXT += gitformat-protocol-capabilities.txt
-MAN5_TXT += gitformat-protocol-common.txt
-MAN5_TXT += gitformat-protocol-http.txt
-MAN5_TXT += gitformat-protocol-v2.txt
-MAN5_TXT += gitformat-signature.txt
 MAN5_TXT += gitformats.txt
 MAN5_TXT += githooks.txt
 MAN5_TXT += gitignore.txt
@@ -104,15 +93,23 @@ TECH_DOCS += MyFirstContribution
 TECH_DOCS += MyFirstObjectWalk
 TECH_DOCS += SubmittingPatches
 TECH_DOCS += technical/hash-function-transition
+TECH_DOCS += technical/http-protocol
+TECH_DOCS += technical/index-format
 TECH_DOCS += technical/long-running-process-protocol
 TECH_DOCS += technical/multi-pack-index
+TECH_DOCS += technical/pack-format
 TECH_DOCS += technical/pack-heuristics
+TECH_DOCS += technical/pack-protocol
 TECH_DOCS += technical/parallel-checkout
 TECH_DOCS += technical/partial-clone
+TECH_DOCS += technical/protocol-capabilities
+TECH_DOCS += technical/protocol-common
+TECH_DOCS += technical/protocol-v2
 TECH_DOCS += technical/racy-git
 TECH_DOCS += technical/reftable
 TECH_DOCS += technical/send-pack-pipeline
 TECH_DOCS += technical/shallow
+TECH_DOCS += technical/signature-format
 TECH_DOCS += technical/trivial-merge
 SP_ARTICLES += $(TECH_DOCS)
 SP_ARTICLES += technical/api-index
diff --git a/Documentation/config/lsrefs.txt b/Documentation/config/lsrefs.txt
index e9efe498c01..adeda0f24d3 100644
--- a/Documentation/config/lsrefs.txt
+++ b/Documentation/config/lsrefs.txt
@@ -1,7 +1,7 @@
 lsrefs.unborn::
 	May be "advertise" (the default), "allow", or "ignore". If "advertise",
 	the server will respond to the client sending "unborn" (as described in
-	linkgit:gitformat-protocol-v2[5]) and will advertise support for this feature during the
+	protocol-v2.txt) and will advertise support for this feature during the
 	protocol v2 capability advertisement. "allow" is the same as
 	"advertise" except that the server will not advertise support for this
 	feature; this is useful for load-balanced servers that cannot be
diff --git a/Documentation/config/pack.txt b/Documentation/config/pack.txt
index 86cd4559ead..763f7af7c4d 100644
--- a/Documentation/config/pack.txt
+++ b/Documentation/config/pack.txt
@@ -162,7 +162,7 @@ pack.writeBitmapHashCache::
 
 pack.writeReverseIndex::
 	When true, git will write a corresponding .rev file (see:
-	linkgit:gitformat-pack[5])
+	link:../technical/pack-format.html[Documentation/technical/pack-format.txt])
 	for each new packfile that it writes in all places except for
 	linkgit:git-fast-import[1] and in the bulk checkin mechanism.
 	Defaults to false.
diff --git a/Documentation/config/protocol.txt b/Documentation/config/protocol.txt
index bf18a70a924..756591d77b0 100644
--- a/Documentation/config/protocol.txt
+++ b/Documentation/config/protocol.txt
@@ -58,6 +58,6 @@ protocol.version::
 * `1` - the original wire protocol with the addition of a version string
   in the initial response from the server.
 
-* `2` - Wire protocol version 2, see linkgit:gitformat-protocol-v2[5].
+* `2` - link:technical/protocol-v2.html[wire protocol version 2].
 
 --
diff --git a/Documentation/git-multi-pack-index.txt b/Documentation/git-multi-pack-index.txt
index d96b361db5b..a9df3dbd328 100644
--- a/Documentation/git-multi-pack-index.txt
+++ b/Documentation/git-multi-pack-index.txt
@@ -109,8 +109,8 @@ $ git multi-pack-index verify
 SEE ALSO
 --------
 See link:technical/multi-pack-index.html[The Multi-Pack-Index Design
-Document] and linkgit:gitformat-pack[5] for more information on the
-multi-pack-index feature and its file format.
+Document] and link:technical/pack-format.html[The Multi-Pack-Index
+Format] for more information on the multi-pack-index feature.
 
 
 GIT
diff --git a/Documentation/gitformat-bundle.txt b/Documentation/gitformat-bundle.txt
index 614d51362c9..3aa2242eb9d 100644
--- a/Documentation/gitformat-bundle.txt
+++ b/Documentation/gitformat-bundle.txt
@@ -27,7 +27,7 @@ FORMAT
 ------
 
 We will use ABNF notation to define the Git bundle format. See
-linkgit:gitformat-protocol-common[5] for the details.
+link:technical/protocol-common.html for the details.
 
 A v2 bundle looks like this:
 
diff --git a/Documentation/howto/recover-corrupted-object-harder.txt b/Documentation/howto/recover-corrupted-object-harder.txt
index 5efb4fe81ff..8994e2559ea 100644
--- a/Documentation/howto/recover-corrupted-object-harder.txt
+++ b/Documentation/howto/recover-corrupted-object-harder.txt
@@ -68,7 +68,7 @@ Note that the "object" file isn't fit for feeding straight to zlib; it
 has the git packed object header, which is variable-length. We want to
 strip that off so we can start playing with the zlib data directly. You
 can either work your way through it manually (the format is described in
-linkgit:gitformat-pack[5]),
+link:../technical/pack-format.html[Documentation/technical/pack-format.txt]),
 or you can walk through it in a debugger. I did the latter, creating a
 valid pack like:
 
diff --git a/Documentation/technical/api-simple-ipc.txt b/Documentation/technical/api-simple-ipc.txt
index 945c21bbc38..d79ad323e67 100644
--- a/Documentation/technical/api-simple-ipc.txt
+++ b/Documentation/technical/api-simple-ipc.txt
@@ -78,7 +78,7 @@ client and an optional response message from the server.  Both the
 client and server messages are unlimited in length and are terminated
 with a flush packet.
 
-The pkt-line routines (linkgit:gitformat-protocol-common[5])
+The pkt-line routines (Documentation/technical/protocol-common.txt)
 are used to simplify buffer management during message generation,
 transmission, and reception.  A flush packet is used to mark the end
 of the message.  This allows the sender to incrementally generate and
diff --git a/Documentation/gitformat-bitmap.txt b/Documentation/technical/bitmap-format.txt
similarity index 92%
rename from Documentation/gitformat-bitmap.txt
rename to Documentation/technical/bitmap-format.txt
index 6da3541c8d6..04b3ec21785 100644
--- a/Documentation/gitformat-bitmap.txt
+++ b/Documentation/technical/bitmap-format.txt
@@ -1,23 +1,5 @@
-gitformat-bitmap(5)
-===================
-
-NAME
-----
-gitformat-bitmap - The bitmap file format
-
-SYNOPSIS
---------
-[verse]
-$GIT_DIR/objects/pack/*.bitmap
-
-DESCRIPTION
------------
-
-Bitmaps are a file format associated with .pack files. See
-linkgit:gitformat-pack[5] and linkgit:git-pack-objects[1].
-
 GIT bitmap v1 format
---------------------
+====================
 
 == Pack and multi-pack bitmaps
 
@@ -149,8 +131,7 @@ MIDXs, both the bit-cache and rev-cache extensions are required.
 
 		- The compressed bitmap itself, see Appendix A.
 
-Appendix A - Serialization format for an EWAH bitmap
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+== Appendix A: Serialization format for an EWAH bitmap
 
 Ewah bitmaps are serialized in the same protocol as the JAVAEWAH
 library, making them backwards compatible with the JGit
@@ -198,8 +179,7 @@ chunk.  For efficient appending to the bitstream, the EWAH stores a
 pointer to the last RLW in the stream.
 
 
-Appendix B - Optional Bitmap Sections
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+== Appendix B: Optional Bitmap Sections
 
 These sections may or may not be present in the `.bitmap` file; their
 presence is indicated by the header flags section described above.
@@ -225,7 +205,3 @@ Note that this hashing scheme is tied to the BITMAP_OPT_HASH_CACHE flag.
 If implementations want to choose a different hashing scheme, they are
 free to do so, but MUST allocate a new header flag (because comparing
 hashes made under two different schemes would be pointless).
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformat-chunk.txt b/Documentation/technical/chunk-format.txt
similarity index 90%
rename from Documentation/gitformat-chunk.txt
rename to Documentation/technical/chunk-format.txt
index f420f5ce99e..593614fceda 100644
--- a/Documentation/gitformat-chunk.txt
+++ b/Documentation/technical/chunk-format.txt
@@ -1,27 +1,12 @@
-gitformat-chunk(5)
-==================
-
-NAME
-----
-gitformat-chunk - Chunk-based file formats
-
-
-SYNOPSIS
---------
-
-used by linkgit:gitformat-commit-graph[5] and the "MIDX" format (see
-linkgit:gitformat-pack[5]).
-
-
-DESCRIPTION
------------
+Chunk-based file formats
+========================
 
 Some file formats in Git use a common concept of "chunks" to describe
 sections of the file. This allows structured access to a large file by
 scanning a small "table of contents" for the remaining data. This common
 format is used by the `commit-graph` and `multi-pack-index` files. See
-the `multi-pack-index` format in linkgit:gitformat-pack[5] and
-the `commit-graph` format in linkgit:gitformat-commit-graph[5] for
+link:technical/pack-format.html[the `multi-pack-index` format] and
+link:technical/commit-graph-format.html[the `commit-graph` format] for
 how they use the chunks to describe structured data.
 
 A chunk-based file format begins with some header information custom to
@@ -123,13 +108,9 @@ for future formats:
 * *commit-graph:* see `write_commit_graph_file()` and `parse_commit_graph()`
   in `commit-graph.c` for how the chunk-format API is used to write and
   parse the commit-graph file format documented in
-  the commit-graph file format in linkgit:gitformat-commit-graph[5].
+  link:technical/commit-graph-format.html[the commit-graph file format].
 
 * *multi-pack-index:* see `write_midx_internal()` and `load_multi_pack_index()`
   in `midx.c` for how the chunk-format API is used to write and
   parse the multi-pack-index file format documented in
-  the multi-pack-index file format sectino of linkgit:gitformat-pack[5].
-
-GIT
----
-Part of the linkgit:git[1] suite
+  link:technical/pack-format.html[the multi-pack-index file format].
diff --git a/Documentation/gitformat-commit-graph.txt b/Documentation/technical/commit-graph-format.txt
similarity index 95%
rename from Documentation/gitformat-commit-graph.txt
rename to Documentation/technical/commit-graph-format.txt
index e98429daa2d..87971c27dd7 100644
--- a/Documentation/gitformat-commit-graph.txt
+++ b/Documentation/technical/commit-graph-format.txt
@@ -1,19 +1,5 @@
-gitformat-commit-graph(5)
-=========================
-
-NAME
-----
-gitformat-commit-graph - Git commit graph format
-
-
-SYNOPSIS
---------
-[verse]
-$GIT_DIR/objects/info/commit-graph
-$GIT_DIR/objects/info/commit-graph
-
-DESCRIPTION
------------
+Git commit graph format
+=======================
 
 The Git commit graph stores a list of commit OIDs and some associated
 metadata, including:
@@ -76,7 +62,7 @@ CHUNK LOOKUP:
       ID appears at most once.
 
   The CHUNK LOOKUP matches the table of contents from
-  the chunk-based file format, see linkgit:gitformat-chunk[5]
+  link:technical/chunk-format.html[the chunk-based file format].
 
   The remaining data in the body is described one chunk at a time, and
   these chunks may be given in any order. Chunks are required unless
@@ -170,7 +156,3 @@ CHUNK DATA:
 TRAILER:
 
 	H-byte HASH-checksum of all of the above.
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/technical/hash-function-transition.txt b/Documentation/technical/hash-function-transition.txt
index e2ac36dd210..260224b0331 100644
--- a/Documentation/technical/hash-function-transition.txt
+++ b/Documentation/technical/hash-function-transition.txt
@@ -205,7 +205,7 @@ SHA-1 content.
 Object storage
 ~~~~~~~~~~~~~~
 Loose objects use zlib compression and packed objects use the packed
-format described in linkgit:gitformat-pack[5], just like
+format described in Documentation/technical/pack-format.txt, just like
 today. The content that is compressed and stored uses SHA-256 content
 instead of SHA-1 content.
 
diff --git a/Documentation/gitformat-protocol-http.txt b/Documentation/technical/http-protocol.txt
similarity index 97%
rename from Documentation/gitformat-protocol-http.txt
rename to Documentation/technical/http-protocol.txt
index b85fc86abf6..cc5126cfeda 100644
--- a/Documentation/gitformat-protocol-http.txt
+++ b/Documentation/technical/http-protocol.txt
@@ -1,19 +1,5 @@
-gitformat-protocol-http(5)
-==========================
-
-NAME
-----
-gitformat-protocol-http - Git HTTP-based protocols
-
-
-SYNOPSIS
---------
-[verse]
-<over-the-wire-protocol>
-
-
-DESCRIPTION
------------
+HTTP transfer protocols
+=======================
 
 Git supports two HTTP based transfer protocols.  A "dumb" protocol
 which requires only a standard HTTP server on the server end of the
@@ -236,7 +222,7 @@ smart server reply:
    S: 0000
 
 The client may send Extra Parameters (see
-linkgit:gitformat-pack-protocol[5]) as a colon-separated string
+Documentation/technical/pack-protocol.txt) as a colon-separated string
 in the Git-Protocol HTTP header.
 
 Uses the `--http-backend-info-refs` option to
@@ -526,18 +512,11 @@ the id obtained through ref discovery as old_id.
 
 TODO: Document this further.
 
-REFERENCES
+
+References
 ----------
 
 http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators (URL)]
 http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1]
-
-SEE ALSO
---------
-
-linkgit:gitformat-pack-protocol[5]
-linkgit:gitformat-protocol-capabilities[5]
-
-GIT
----
-Part of the linkgit:git[1] suite
+link:technical/pack-protocol.html
+link:technical/protocol-capabilities.html
diff --git a/Documentation/gitformat-index.txt b/Documentation/technical/index-format.txt
similarity index 98%
rename from Documentation/gitformat-index.txt
rename to Documentation/technical/index-format.txt
index 00110182a53..65da0daaa56 100644
--- a/Documentation/gitformat-index.txt
+++ b/Documentation/technical/index-format.txt
@@ -1,20 +1,5 @@
-gitformat-index(5)
-==================
-
-NAME
-----
-gitformat-index - Git index format
-
-
-SYNOPSIS
---------
-[verse]
-$GIT_DIR/index
-
-DESCRIPTION
------------
-
 Git index format
+================
 
 == The Git index file has the following format
 
@@ -142,7 +127,7 @@ Git index format
     entry is encoded as if the path name for the previous entry is an
     empty string).  At the beginning of an entry, an integer N in the
     variable width encoding (the same encoding as the offset is encoded
-    for OFS_DELTA pack entries; see linkgit:gitformat-pack[5]) is stored, followed
+    for OFS_DELTA pack entries; see pack-format.txt) is stored, followed
     by a NUL-terminated string S.  Removing N bytes from the end of the
     path name for the previous entry, and replacing it with the string S
     yields the path name for this entry.
@@ -419,7 +404,3 @@ The remaining data of each directory block is grouped by type:
   with signature { 's', 'd', 'i', 'r' }. Like the split-index extension,
   tools should avoid interacting with a sparse index unless they understand
   this extension.
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/technical/long-running-process-protocol.txt b/Documentation/technical/long-running-process-protocol.txt
index c6922ce6ccc..aa0aa9af1c2 100644
--- a/Documentation/technical/long-running-process-protocol.txt
+++ b/Documentation/technical/long-running-process-protocol.txt
@@ -3,7 +3,7 @@ Long-running process protocol
 
 This protocol is used when Git needs to communicate with an external
 process throughout the entire life of a single Git command. All
-communication is in pkt-line format (see linkgit:gitformat-protocol-common[5])
+communication is in pkt-line format (see technical/protocol-common.txt)
 over standard input and standard output.
 
 Handshake
diff --git a/Documentation/gitformat-pack.txt b/Documentation/technical/pack-format.txt
similarity index 95%
rename from Documentation/gitformat-pack.txt
rename to Documentation/technical/pack-format.txt
index 461d7c0adc0..8d2f42f29e5 100644
--- a/Documentation/gitformat-pack.txt
+++ b/Documentation/technical/pack-format.txt
@@ -1,29 +1,5 @@
-gitformat-pack(5)
-=================
-
-NAME
-----
-gitformat-pack - Git pack format
-
-
-SYNOPSIS
---------
-[verse]
-$GIT_DIR/objects/pack/pack-*.{pack,idx}
-$GIT_DIR/objects/pack/pack-*.rev
-$GIT_DIR/objects/pack/multi-pack-index
-
-DESCRIPTION
------------
-
-The Git pack format is now Git stores most of its primary repository
-data. Over the lietime af a repository loose objects (if any) and
-smaller packs are consolidated into larger pack(s). See
-linkgit:git-gc[1] and linkgit:git-pack-objects[1].
-
-The pack format is also used over-the-wire, see
-e.g. linkgit:gitformat-protocol-v2[5], as well as being a part of
-other container formats in the case of linkgit:gitformat-bundle[5].
+Git pack format
+===============
 
 == Checksums and object IDs
 
@@ -361,7 +337,7 @@ CHUNK LOOKUP:
 	    using the next chunk position if necessary.)
 
 	The CHUNK LOOKUP matches the table of contents from
-	the chunk-based file format, see linkgit:gitformat-chunk[5].
+	link:technical/chunk-format.html[the chunk-based file format].
 
 	The remaining data in the body is described one chunk at a time, and
 	these chunks may be given in any order. Chunks are required unless
@@ -486,8 +462,3 @@ includes the checksum of the pack or MIDX to which it belongs, which
 makes it impossible to write in the MIDX. To avoid races when rewriting
 the MIDX, a MIDX reverse index includes the MIDX's checksum in its
 filename (e.g., `multi-pack-index-xyz.rev`).
-
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformat-pack-protocol.txt b/Documentation/technical/pack-protocol.txt
similarity index 98%
rename from Documentation/gitformat-pack-protocol.txt
rename to Documentation/technical/pack-protocol.txt
index d7ffa296866..e13a2c064d1 100644
--- a/Documentation/gitformat-pack-protocol.txt
+++ b/Documentation/technical/pack-protocol.txt
@@ -1,24 +1,11 @@
-gitformat-pack-protocol(5)
-==========================
-
-NAME
-----
-gitformat-pack-protocol - How packs are transferred over-the-wire
-
-
-SYNOPSIS
---------
-[verse]
-<over-the-wire-protocol>
-
-DESCRIPTION
------------
+Packfile transfer protocols
+===========================
 
 Git supports transferring data in packfiles over the ssh://, git://, http:// and
 file:// transports.  There exist two sets of protocols, one for pushing
 data from a client to a server and another for fetching data from a
 server to a client.  The three transports (ssh, git, file) use the same
-protocol to transfer data. http is documented in linkgit:gitformat-protocol-http[5].
+protocol to transfer data. http is documented in http-protocol.txt.
 
 The processes invoked in the canonical Git implementation are 'upload-pack'
 on the server side and 'fetch-pack' on the client side for fetching data;
@@ -31,7 +18,7 @@ pkt-line Format
 ---------------
 
 The descriptions below build on the pkt-line format described in
-linkgit:gitformat-protocol-common[5]. When the grammar indicate `PKT-LINE(...)`, unless
+protocol-common.txt. When the grammar indicate `PKT-LINE(...)`, unless
 otherwise noted the usual pkt-line LF rules apply: the sender SHOULD
 include a LF, but the receiver MUST NOT complain if it is not present.
 
@@ -468,7 +455,7 @@ Now that the client and server have finished negotiation about what
 the minimal amount of data that needs to be sent to the client is, the server
 will construct and send the required data in packfile format.
 
-See linkgit:gitformat-pack[5] for what the packfile itself actually looks like.
+See pack-format.txt for what the packfile itself actually looks like.
 
 If 'side-band' or 'side-band-64k' capabilities have been specified by
 the client, the server will send the packfile data multiplexed.
@@ -720,7 +707,3 @@ An example client/server communication might look like this:
    S: 0018ok refs/heads/debug\n
    S: 002ang refs/heads/master non-fast-forward\n
 ----
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/technical/partial-clone.txt b/Documentation/technical/partial-clone.txt
index 957d6dfe375..a0dd7c66f24 100644
--- a/Documentation/technical/partial-clone.txt
+++ b/Documentation/technical/partial-clone.txt
@@ -79,7 +79,7 @@ Design Details
   upload-pack negotiation.
 +
 This uses the existing capability discovery mechanism.
-See "filter" in linkgit:gitformat-pack-protocol[5].
+See "filter" in Documentation/technical/pack-protocol.txt.
 
 - Clients pass a "filter-spec" to clone and fetch which is passed to the
   server to request filtering during packfile construction.
diff --git a/Documentation/gitformat-protocol-capabilities.txt b/Documentation/technical/protocol-capabilities.txt
similarity index 96%
rename from Documentation/gitformat-protocol-capabilities.txt
rename to Documentation/technical/protocol-capabilities.txt
index 63e78c46559..9dfade930da 100644
--- a/Documentation/gitformat-protocol-capabilities.txt
+++ b/Documentation/technical/protocol-capabilities.txt
@@ -1,21 +1,8 @@
-gitformat-protocol-capabilities(5)
-==================================
-
-NAME
-----
-gitformat-protocol-capabilities - Protocol v0 and v1 capabilities
-
-
-SYNOPSIS
---------
-[verse]
-<over-the-wire-protocol>
-
-DESCRIPTION
------------
+Git Protocol Capabilities
+=========================
 
 NOTE: this document describes capabilities for versions 0 and 1 of the pack
-protocol. For version 2, please refer to the linkgit:gitformat-protocol-v2[5]
+protocol. For version 2, please refer to the link:protocol-v2.html[protocol-v2]
 doc.
 
 Servers SHOULD support all capabilities defined in this document.
@@ -90,7 +77,7 @@ interleaved with S-R-Q.
 multi_ack_detailed
 ------------------
 This is an extension of multi_ack that permits client to better
-understand the server's in-memory state. See linkgit:gitformat-pack-protocol[5],
+understand the server's in-memory state. See pack-protocol.txt,
 section "Packfile Negotiation" for more information.
 
 no-done
@@ -294,7 +281,7 @@ a packfile upload and reference update.  If the pushing client requests
 this capability, after unpacking and updating references the server
 will respond with whether the packfile unpacked successfully and if
 each reference was updated successfully.  If any of those were not
-successful, it will send back an error message.  See linkgit:gitformat-pack-protocol[5]
+successful, it will send back an error message.  See pack-protocol.txt
 for example messages.
 
 report-status-v2
@@ -305,7 +292,7 @@ adding new "option" directives in order to support reference rewritten by
 the "proc-receive" hook.  The "proc-receive" hook may handle a command
 for a pseudo-reference which may create or update a reference with
 different name, new-oid, and old-oid.  While the capability
-'report-status' cannot report for such case.  See linkgit:gitformat-pack-protocol[5]
+'report-status' cannot report for such case.  See pack-protocol.txt
 for details.
 
 delete-refs
@@ -391,7 +378,3 @@ packet-line, and must not contain non-printable or whitespace characters. The
 current implementation uses trace2 session IDs (see
 link:api-trace2.html[api-trace2] for details), but this may change and users of
 the session ID should not rely on this fact.
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformat-protocol-common.txt b/Documentation/technical/protocol-common.txt
similarity index 88%
rename from Documentation/gitformat-protocol-common.txt
rename to Documentation/technical/protocol-common.txt
index de88434c832..ecedb34bba5 100644
--- a/Documentation/gitformat-protocol-common.txt
+++ b/Documentation/technical/protocol-common.txt
@@ -1,21 +1,5 @@
-gitformat-protocol-common(5)
-============================
-
-NAME
-----
-gitformat-protocol-common - Things common to various protocols
-
-
-SYNOPSIS
---------
-[verse]
-<over-the-wire-protocol>
-
-DESCRIPTION
------------
-
-This document sets defines things common to various over-the-wire
-protocols and file formats used in Git.
+Documentation Common to Pack and Http Protocols
+===============================================
 
 ABNF Notation
 -------------
@@ -113,7 +97,3 @@ Examples (as C-style strings):
   "000bfoobar\n"    "foobar\n"
   "0004"            ""
 ----
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformat-protocol-v2.txt b/Documentation/technical/protocol-v2.txt
similarity index 97%
rename from Documentation/gitformat-protocol-v2.txt
rename to Documentation/technical/protocol-v2.txt
index 20955760dff..213538f1d0e 100644
--- a/Documentation/gitformat-protocol-v2.txt
+++ b/Documentation/technical/protocol-v2.txt
@@ -1,18 +1,5 @@
-gitformat-protocol-v2(5)
-========================
-
-NAME
-----
-gitformat-protocol-v2 - Git Wire Protocol, Version 2
-
-
-SYNOPSIS
---------
-[verse]
-<over-the-wire-protocol>
-
-DESCRIPTION
------------
+Git Wire Protocol, Version 2
+============================
 
 This document presents a specification for a version 2 of Git's wire
 protocol.  Protocol v2 will improve upon v1 in the following ways:
@@ -39,7 +26,7 @@ Packet-Line Framing
 -------------------
 
 All communication is done using packet-line framing, just as in v1.  See
-linkgit:gitformat-pack-protocol[5] and
+`Documentation/technical/pack-protocol.txt` and
 `Documentation/technical/protocol-common.txt` for more information.
 
 In protocol v2 these special packets will have the following semantics:
@@ -55,7 +42,7 @@ Initial Client Request
 In general a client can request to speak protocol v2 by sending
 `version=2` through the respective side-channel for the transport being
 used which inevitably sets `GIT_PROTOCOL`.  More information can be
-found in linkgit:gitformat-pack-protocol[5] and linkgit:gitformat-protocol-http[5].  In all cases the
+found in `pack-protocol.txt` and `http-protocol.txt`.  In all cases the
 response from the server is the capability advertisement.
 
 Git Transport
@@ -76,7 +63,7 @@ HTTP Transport
 ~~~~~~~~~~~~~~
 
 When using the http:// or https:// transport a client makes a "smart"
-info/refs request as described in linkgit:gitformat-protocol-http[5] and requests that
+info/refs request as described in `http-protocol.txt` and requests that
 v2 be used by supplying "version=2" in the `Git-Protocol` header.
 
    C: GET $GIT_URL/info/refs?service=git-upload-pack HTTP/1.0
@@ -569,7 +556,3 @@ and associated requested information, each separated by a single space.
 	attr = "size"
 
 	obj-info = obj-id SP obj-size
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/gitformat-signature.txt b/Documentation/technical/signature-format.txt
similarity index 96%
rename from Documentation/gitformat-signature.txt
rename to Documentation/technical/signature-format.txt
index 490a41f6419..2c9406a56a8 100644
--- a/Documentation/gitformat-signature.txt
+++ b/Documentation/technical/signature-format.txt
@@ -1,19 +1,7 @@
-gitformat-signature(5)
-======================
+Git signature format
+====================
 
-NAME
-----
-gitformat-signature - Git cryptographic signature formats
-
-
-SYNOPSIS
---------
-[verse]
-<[tag|commit] object header(s)>
-<over-the-wire protocol>
-
-DESCRIPTION
------------
+== Overview
 
 Git uses cryptographic signatures in various places, currently objects (tags,
 commits, mergetags) and transactions (pushes). In every case, the command which
@@ -196,7 +184,3 @@ Date:   Wed Jun 15 09:13:29 2016 +0000
     # gpg:          There is no indication that the signature belongs to the owner.
     # Primary key fingerprint: D4BE 2231 1AD3 131E 5EDA  29A4 6109 2E85 B722 7189
 ----
-
-GIT
----
-Part of the linkgit:git[1] suite
diff --git a/Documentation/user-manual.txt b/Documentation/user-manual.txt
index ca9decdd952..865074bed4e 100644
--- a/Documentation/user-manual.txt
+++ b/Documentation/user-manual.txt
@@ -3133,7 +3133,7 @@ those "loose" objects.
 You can save space and make Git faster by moving these loose objects in
 to a "pack file", which stores a group of objects in an efficient
 compressed format; the details of how pack files are formatted can be
-found in link:gitformat-pack[5].
+found in link:technical/pack-format.html[pack format].
 
 To put the loose objects into a pack, just run git repack:
 
diff --git a/cache.h b/cache.h
index cb777444d61..0c245d4f105 100644
--- a/cache.h
+++ b/cache.h
@@ -461,7 +461,8 @@ extern struct index_state the_index;
 
 /*
  * Values in this enum (except those outside the 3 bit range) are part
- * of pack file format. See gitformat-pack(5) for more information.
+ * of pack file format. See Documentation/technical/pack-format.txt
+ * for more information.
  */
 enum object_type {
 	OBJ_BAD = -1,
diff --git a/command-list.txt b/command-list.txt
index ea2c378c84c..587cf13a78c 100644
--- a/command-list.txt
+++ b/command-list.txt
@@ -215,15 +215,7 @@ gitignore                               userformats
 gitmailmap                              userformats
 gitmodules                              userformats
 gitformats                              gitformats
-gitformat-bitmap                        gitformats
 gitformat-bundle                        gitformats
-gitformat-chunk                         gitformats
-gitformat-commit-graph                  gitformats
-gitformat-index                         gitformats
-gitformat-pack                          gitformats
-gitformat-pack-protocol                 gitformats
-gitformat-protocol-http                 gitformats
-gitformat-signature                     gitformats
 gitnamespaces                           guide
 gitremote-helpers                       guide
 gitrepository-layout                    guide
diff --git a/pack-revindex.h b/pack-revindex.h
index 9c8f2bb9301..479b8f2f9c9 100644
--- a/pack-revindex.h
+++ b/pack-revindex.h
@@ -22,7 +22,7 @@
  *
  *   - pack position refers to an object's position within a non-existent pack
  *     described by the MIDX. The pack structure is described in
- *     gitformat-pack(5).
+ *     Documentation/technical/pack-format.txt.
  *
  *     It is effectively a concatanation of all packs in the MIDX (ordered by
  *     their numeric ID within the MIDX) in their original order within each
diff --git a/t/t5551-http-fetch-smart.sh b/t/t5551-http-fetch-smart.sh
index 5ebc9b58d2c..4f87d90c5bd 100755
--- a/t/t5551-http-fetch-smart.sh
+++ b/t/t5551-http-fetch-smart.sh
@@ -175,7 +175,7 @@ test_expect_success 'no-op half-auth fetch does not require a password' '
 	# This is not possible with protocol v2, since both objects and refs
 	# are obtained from the "git-upload-pack" path. A solution to this is
 	# to teach the server and client to be able to inline ls-refs requests
-	# as an Extra Parameter (see gitformat-pack-protocol(5)), so that "info/refs"
+	# as an Extra Parameter (see pack-protocol.txt), so that "info/refs"
 	# can serve refs, just like it does in protocol v0.
 	GIT_TEST_PROTOCOL_VERSION=0 git --git-dir=half-auth fetch &&
 	expect_askpass none
-- 
2.33.0.1098.gf02a64c1a2d

