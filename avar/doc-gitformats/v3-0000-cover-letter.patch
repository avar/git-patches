From 3e3f92f76d7d36191451b1624d34ac23452f7fa1 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v3-00.11-00000000000-20210921T192914Z-avarab@gmail.com>
In-Reply-To: <cover-v2-0.5-00000000000-20210910T112545Z-avarab@gmail.com>
References: <cover-v2-0.5-00000000000-20210910T112545Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 21 Sep 2021 21:29:14 +0200
Subject: [PATCH v3 00/11] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (11):
  docs: start moving technical "format" docs to man pages
  docs: move protocol-related docs to man section 5
  docs: move pack format docs to man section 5
  docs: move pack-protocol docs to man section 5
  docs: move http-protocol docs to man section 5
  docs: move commit-graph format docs to man section 5
  docs: move index-format docs to man section 5
  docs: move signature-format docs to man section 5
  docs: move bitmap-format docs to man section 5
  docs: move chunk-format docs to man section 5
  Mostly revert this branch, too many conflicts

 Documentation/Makefile                        |  2 +
 Documentation/git-bundle.txt                  |  5 +++
 ...bundle-format.txt => gitformat-bundle.txt} | 44 ++++++++++++++++---
 Documentation/gitformats.txt                  | 29 ++++++++++++
 builtin/help.c                                |  8 ++++
 command-list.txt                              |  6 +++
 help.c                                        | 20 ++++++++-
 help.h                                        |  1 +
 8 files changed, 107 insertions(+), 8 deletions(-)
 rename Documentation/{technical/bundle-format.txt => gitformat-bundle.txt} (78%)
 create mode 100644 Documentation/gitformats.txt

Range-diff against v2:
 1:  b10bfd21f14 <  -:  ----------- help: correct the usage string in -h and documentation
 -:  ----------- >  1:  a666302b2ce docs: start moving technical "format" docs to man pages
 -:  ----------- >  2:  784508b1109 docs: move protocol-related docs to man section 5
 -:  ----------- >  3:  ba15f599a9e docs: move pack format docs to man section 5
 -:  ----------- >  4:  1ebf7653a54 docs: move pack-protocol docs to man section 5
 5:  e995a42cb8d !  5:  b1c4f0df139 help / completion: make "git help" do the hard work
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    help / completion: make "git help" do the hard work
    +    docs: move http-protocol docs to man section 5
     
    -    The "help" builtin has been able to emit configuration variables since
    -    e17ca926371 (completion: drop the hard coded list of config vars,
    -    2018-05-26), but it hasn't produced exactly the format the completion
    -    script wanted. Let's do that.
    -
    -    We got partway there in 2675ea1cc0f (completion: use 'sort -u' to
    -    deduplicate config variable names, 2019-08-13) and
    -    d9438873c4d (completion: deduplicate configuration sections,
    -    2019-08-13), but after both we still needed some sorting,
    -    de-duplicating and awk post-processing of the list.
    -
    -    We can instead simply do the relevant parsing ourselves (we were doing
    -    most of it already), and call string_list_remove_duplicates() after
    -    already sorting the list, so the caller doesn't need to invoke "sort
    -    -u".
    -
    -    This changes the output of the section list to emit lines like "alias"
    -    instead of "alias.". The dot suffix is better done as an argument to
    -    __gitcomp().
    -
    -    This means that we'll have the list_config_help() function do a bit
    -    more work, let's switch its "for_human" to passing a full
    -    "show_config", but as an enum type so we can have the compiler check
    -    what values we're expecting to get.
    +    Continue the move of existing Documentation/technical/* protocol and
    +    file-format documentation into our main documentation space by moving
    +    the http-protocol.txt documentation over. I'm renaming it to
    +    "protocol-http" to be consistent with other things in the new
    +    gitformat-protocol-* namespace.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/help.c ##
    -@@ builtin/help.c: static const char *html_path;
    + ## Documentation/Makefile ##
    +@@ Documentation/Makefile: MAN5_TXT += gitformat-pack-protocol.txt
    + MAN5_TXT += gitformat-pack.txt
    + MAN5_TXT += gitformat-protocol-capabilities.txt
    + MAN5_TXT += gitformat-protocol-common.txt
    ++MAN5_TXT += gitformat-protocol-http.txt
    + MAN5_TXT += gitformat-protocol-v2.txt
    + MAN5_TXT += gitformats.txt
    + MAN5_TXT += githooks.txt
    +@@ Documentation/Makefile: TECH_DOCS += MyFirstContribution
    + TECH_DOCS += MyFirstObjectWalk
    + TECH_DOCS += SubmittingPatches
    + TECH_DOCS += technical/hash-function-transition
    +-TECH_DOCS += technical/http-protocol
    + TECH_DOCS += technical/index-format
    + TECH_DOCS += technical/long-running-process-protocol
    + TECH_DOCS += technical/multi-pack-index
    +
    + ## Documentation/gitformat-pack-protocol.txt ##
    +@@ Documentation/gitformat-pack-protocol.txt: Git supports transferring data in packfiles over the ssh://, git://, http:// and
    + file:// transports.  There exist two sets of protocols, one for pushing
    + data from a client to a server and another for fetching data from a
    + server to a client.  The three transports (ssh, git, file) use the same
    +-protocol to transfer data. http is documented in http-protocol.txt.
    ++protocol to transfer data. http is documented in linkgit:gitformat-protocol-http[5].
      
    - static int show_all = 0;
    - static int show_guides = 0;
    --static int show_config;
    -+enum show_config_type {
    -+	SHOW_CONFIG_UNSET = 0,
    -+	SHOW_CONFIG_HUMAN,
    -+	SHOW_CONFIG_VARS,
    -+	SHOW_CONFIG_SECTIONS,
    -+} show_config;
    - static int verbose = 1;
    - static unsigned int colopts;
    - static enum help_format help_format = HELP_FORMAT_NONE;
    -@@ builtin/help.c: static struct option builtin_help_options[] = {
    - 	OPT_HIDDEN_BOOL(0, "exclude-guides", &exclude_guides, N_("exclude guides")),
    - 	OPT_BOOL('g', "guides", &show_guides, N_("print list of useful guides")),
    - 	OPT_BOOL('c', "config", &show_config, N_("print all configuration variable names")),
    --	OPT_SET_INT_F(0, "config-for-completion", &show_config, "", 2, PARSE_OPT_HIDDEN),
    -+	OPT_SET_INT_F(0, "config-for-completion-vars", &show_config, "",
    -+		      SHOW_CONFIG_VARS, PARSE_OPT_HIDDEN),
    -+	OPT_SET_INT_F(0, "config-for-completion-sections", &show_config, "",
    -+		      SHOW_CONFIG_SECTIONS, PARSE_OPT_HIDDEN),
    - 	OPT_SET_INT('m', "man", &help_format, N_("show man page"), HELP_FORMAT_MAN),
    - 	OPT_SET_INT('w', "web", &help_format, N_("show manual in web browser"),
    - 			HELP_FORMAT_WEB),
    -@@ builtin/help.c: struct slot_expansion {
    - 	int found;
    - };
    + The processes invoked in the canonical Git implementation are 'upload-pack'
    + on the server side and 'fetch-pack' on the client side for fetching data;
    +
    + ## Documentation/technical/http-protocol.txt => Documentation/gitformat-protocol-http.txt ##
    +@@
    +-HTTP transfer protocols
    +-=======================
    ++gitformat-protocol-http(5)
    ++==========================
    ++
    ++NAME
    ++----
    ++gitformat-protocol-http - Git HTTP-based protocols
    ++
    ++
    ++SYNOPSIS
    ++--------
    ++[verse]
    ++<over-the-wire-protocol>
    ++
    ++
    ++DESCRIPTION
    ++-----------
      
    --static void list_config_help(int for_human)
    -+static void list_config_help(enum show_config_type type)
    - {
    - 	struct slot_expansion slot_expansions[] = {
    - 		{ "advice", "*", list_config_advices },
    -@@ builtin/help.c: static void list_config_help(int for_human)
    - 	const char **p;
    - 	struct slot_expansion *e;
    - 	struct string_list keys = STRING_LIST_INIT_DUP;
    -+	struct string_list keys_uniq = STRING_LIST_INIT_DUP;
    -+	struct string_list_item *item;
    - 	int i;
    + Git supports two HTTP based transfer protocols.  A "dumb" protocol
    + which requires only a standard HTTP server on the server end of the
    +@@ Documentation/gitformat-protocol-http.txt: the id obtained through ref discovery as old_id.
      
    - 	for (p = config_name_list; *p; p++) {
    -@@ builtin/help.c: static void list_config_help(int for_human)
    - 	for (i = 0; i < keys.nr; i++) {
    - 		const char *var = keys.items[i].string;
    - 		const char *wildcard, *tag, *cut;
    -+		const char *dot = NULL;
    -+		struct strbuf sb = STRBUF_INIT;
    + TODO: Document this further.
      
    --		if (for_human) {
    -+		switch (type) {
    -+		case SHOW_CONFIG_HUMAN:
    - 			puts(var);
    - 			continue;
    -+		case SHOW_CONFIG_SECTIONS:
    -+			dot = strchr(var, '.');
    -+			break;
    -+		case SHOW_CONFIG_VARS:
    -+			break;
    -+		case SHOW_CONFIG_UNSET:
    -+			BUG("should not get SHOW_CONFIG_UNSET here");
    - 		}
     -
    - 		wildcard = strchr(var, '*');
    - 		tag = strchr(var, '<');
    - 
    --		if (!wildcard && !tag) {
    --			puts(var);
    -+		if (!dot && !wildcard && !tag) {
    -+			string_list_append(&keys_uniq, var);
    - 			continue;
    - 		}
    - 
    --		if (wildcard && !tag)
    -+		if (dot)
    -+			cut = dot;
    -+		else if (wildcard && !tag)
    - 			cut = wildcard;
    - 		else if (!wildcard && tag)
    - 			cut = tag;
    - 		else
    - 			cut = wildcard < tag ? wildcard : tag;
    +-References
    ++REFERENCES
    + ----------
      
    --		/*
    --		 * We may produce duplicates, but that's up to
    --		 * git-completion.bash to handle
    --		 */
    --		printf("%.*s\n", (int)(cut - var), var);
    -+		strbuf_add(&sb, var, cut - var);
    -+		string_list_append(&keys_uniq, sb.buf);
    -+		strbuf_release(&sb);
    + http://www.ietf.org/rfc/rfc1738.txt[RFC 1738: Uniform Resource Locators (URL)]
    + http://www.ietf.org/rfc/rfc2616.txt[RFC 2616: Hypertext Transfer Protocol -- HTTP/1.1]
    +-link:technical/pack-protocol.html
    +-link:technical/protocol-capabilities.html
     +
    - 	}
    - 	string_list_clear(&keys, 0);
    -+	string_list_remove_duplicates(&keys_uniq, 0);
    -+	for_each_string_list_item(item, &keys_uniq)
    -+		puts(item->string);
    -+	string_list_clear(&keys_uniq, 0);
    - }
    ++SEE ALSO
    ++--------
    ++
    ++linkgit:gitformat-pack-protocol[5]
    ++linkgit:gitformat-protocol-capabilities[5]
    ++
    ++GIT
    ++---
    ++Part of the linkgit:git[1] suite
    +
    + ## Documentation/gitformat-protocol-v2.txt ##
    +@@ Documentation/gitformat-protocol-v2.txt: gitformat-protocol-v2 - Git Wire Protocol, Version 2
      
    - static enum help_format parse_help_format(const char *format)
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    - 		return 0;
    - 	}
    + SYNOPSIS
    + --------
    +-
    ++[verse]
    + <over-the-wire-protocol>
      
    --	if (show_config) {
    --		int for_human = show_config == 1;
    -+	switch (show_config) {
    -+	case SHOW_CONFIG_UNSET:
    -+		break;
    -+	case SHOW_CONFIG_VARS:
    -+	case SHOW_CONFIG_SECTIONS:
    -+		list_config_help(show_config);
    + DESCRIPTION
    +@@ Documentation/gitformat-protocol-v2.txt: Initial Client Request
    + In general a client can request to speak protocol v2 by sending
    + `version=2` through the respective side-channel for the transport being
    + used which inevitably sets `GIT_PROTOCOL`.  More information can be
    +-found in linkgit:gitformat-pack-protocol[5] and `http-protocol.txt`.  In all cases the
    ++found in linkgit:gitformat-pack-protocol[5] and linkgit:gitformat-protocol-http[5].  In all cases the
    + response from the server is the capability advertisement.
      
    --		if (!for_human) {
    --			list_config_help(for_human);
    --			return 0;
    --		}
    -+		return 0;
    -+	case SHOW_CONFIG_HUMAN:
    - 		setup_pager();
    --		list_config_help(for_human);
    -+		list_config_help(show_config);
    - 		printf("\n%s\n", _("'git help config' for more information"));
    -+
    - 		return 0;
    - 	}
    + Git Transport
    +@@ Documentation/gitformat-protocol-v2.txt: HTTP Transport
    + ~~~~~~~~~~~~~~
      
    -
    - ## contrib/completion/git-completion.bash ##
    -@@ contrib/completion/git-completion.bash: __git_config_vars=
    - __git_compute_config_vars ()
    - {
    - 	test -n "$__git_config_vars" ||
    --	__git_config_vars="$(git help --config-for-completion | sort -u)"
    -+	__git_config_vars="$(git help --config-for-completion-vars)"
    -+}
    -+
    -+__git_config_sections=
    -+__git_compute_config_sections ()
    -+{
    -+	test -n "$__git_config_sections" ||
    -+	__git_config_sections="$(git help --config-for-completion-sections)"
    - }
    + When using the http:// or https:// transport a client makes a "smart"
    +-info/refs request as described in `http-protocol.txt` and requests that
    ++info/refs request as described in linkgit:gitformat-protocol-http[5] and requests that
    + v2 be used by supplying "version=2" in the `Git-Protocol` header.
      
    - # Completes possible values of various configuration variables.
    -@@ contrib/completion/git-completion.bash: __git_complete_config_variable_name ()
    - 		__gitcomp "$__git_config_vars" "" "$cur_" "$sfx"
    - 		;;
    - 	*)
    --		__git_compute_config_vars
    --		__gitcomp "$(echo "$__git_config_vars" |
    --				awk -F . '{
    --					sections[$1] = 1
    --				}
    --				END {
    --					for (s in sections)
    --						print s "."
    --				}
    --				')" "" "$cur_"
    -+		__git_compute_config_sections
    -+		__gitcomp "$__git_config_sections" "" "$cur_" "."
    - 		;;
    - 	esac
    - }
    +    C: GET $GIT_URL/info/refs?service=git-upload-pack HTTP/1.0
     
    - ## t/t0012-help.sh ##
    -@@ t/t0012-help.sh: test_expect_success 'git help -c' '
    - 	test_cmp expect actual
    - '
    - 
    -+test_expect_success 'git help --config-for-completion-vars' '
    -+	git help -c >human &&
    -+	grep -E \
    -+	     -e "^[^.]+\.[^.]+$" \
    -+	     -e "^[^.]+\.[^.]+\.[^.]+$" human |
    -+	     sed -e "s/\*.*//" -e "s/<.*//" |
    -+	     sort -u >human.munged &&
    -+
    -+	git help --config-for-completion-vars >vars &&
    -+	test_cmp human.munged vars
    -+'
    -+
    -+test_expect_success 'git help --config-for-completion-sections' '
    -+	git help -c >human &&
    -+	grep -E \
    -+	     -e "^[^.]+\.[^.]+$" \
    -+	     -e "^[^.]+\.[^.]+\.[^.]+$" human |
    -+	     sed -e "s/\..*//" |
    -+	     sort -u >human.munged &&
    -+
    -+	git help --config-for-completion-sections >sections &&
    -+	test_cmp human.munged sections
    -+'
    -+
    - test_expect_success 'generate builtin list' '
    - 	git --list-cmds=builtins >builtins
    - '
    + ## command-list.txt ##
    +@@ command-list.txt: gitformats                              gitformats
    + gitformat-bundle                        gitformats
    + gitformat-pack                          gitformats
    + gitformat-pack-protocol                 gitformats
    ++gitformat-protocol-http                 gitformats
    + gitnamespaces                           guide
    + gitremote-helpers                       guide
    + gitrepository-layout                    guide
 -:  ----------- >  6:  83deccbb9a6 docs: move commit-graph format docs to man section 5
 4:  32d73d5273c !  7:  92210bc7ddb help: correct logic error in combining --all and --config
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    help: correct logic error in combining --all and --config
    -
    -    Fix a bug in the --config option that's been there ever since its
    -    introduction in 3ac68a93fd2 (help: add --config to list all available
    -    config, 2018-05-26). Die when --all and --config are combined,
    -    combining them doesn't make sense.
    -
    -    The code for the --config option when combined with an earlier
    -    refactoring done to support the --guide option in
    -    65f98358c0c (builtin/help.c: add --guide option, 2013-04-02) would
    -    cause us to take the "--all" branch early and ignore the --config
    -    option.
    -
    -    Let's instead list these as incompatible, both in the synopsis and
    -    help output, and enforce it in the code itself.
    +    docs: move index-format docs to man section 5
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/git-help.txt ##
    -@@ Documentation/git-help.txt: SYNOPSIS
    - 'git help' [-a|--all [--[no-]verbose]]
    - 	   [[-i|--info] [-m|--man] [-w|--web]] [COMMAND|GUIDE]
    - 'git help' [-g|--guides]
    -+'git help' [-c|--config]
    - 
    - DESCRIPTION
    - -----------
    + ## Documentation/Makefile ##
    +@@ Documentation/Makefile: MAN1_TXT += gitweb.txt
    + MAN5_TXT += gitattributes.txt
    + MAN5_TXT += gitformat-bundle.txt
    + MAN5_TXT += gitformat-commit-graph.txt
    ++MAN5_TXT += gitformat-index.txt
    + MAN5_TXT += gitformat-pack-protocol.txt
    + MAN5_TXT += gitformat-pack.txt
    + MAN5_TXT += gitformat-protocol-capabilities.txt
    +@@ Documentation/Makefile: TECH_DOCS += MyFirstContribution
    + TECH_DOCS += MyFirstObjectWalk
    + TECH_DOCS += SubmittingPatches
    + TECH_DOCS += technical/hash-function-transition
    +-TECH_DOCS += technical/index-format
    + TECH_DOCS += technical/long-running-process-protocol
    + TECH_DOCS += technical/multi-pack-index
    + TECH_DOCS += technical/pack-heuristics
     
    - ## builtin/help.c ##
    -@@ builtin/help.c: static const char * const builtin_help_usage[] = {
    - 	N_("git help [-a|--all] [--[no-]verbose]]\n"
    - 	   "         [[-i|--info] [-m|--man] [-w|--web]] [<command>]"),
    - 	N_("git help [-g|--guides]"),
    -+	N_("git help [-c|--config]"),
    - 	NULL
    - };
    - 
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    - 	int nongit;
    - 	enum help_format parsed_help_format;
    - 	const char *page;
    -+	int need_config = 0;
    - 
    - 	argc = parse_options(argc, argv, prefix, builtin_help_options,
    - 			builtin_help_usage, 0);
    - 	parsed_help_format = help_format;
    - 
    -+	/* Incompatible options */
    -+	if (show_all && show_config)
    -+		usage_msg_opt(_("--config and --all cannot be combined"),
    -+			      builtin_help_usage, builtin_help_options);
    + ## Documentation/technical/index-format.txt => Documentation/gitformat-index.txt ##
    +@@
    ++gitformat-index(5)
    ++==================
     +
    -+	if (show_config && show_guides)
    -+		usage_msg_opt(_("--config and --guides cannot be combined"),
    -+			      builtin_help_usage, builtin_help_options);
    ++NAME
    ++----
    ++gitformat-index - Git index format
     +
    - 	/* Options that take no further arguments */
    -+	if (argc && show_config)
    -+		usage_msg_opt(_("--config cannot be combined with command or guide names"),
    -+			      builtin_help_usage, builtin_help_options);
    - 	if (argc && show_guides)
    --		usage_msg_opt(_("--guides cannot be combined with other options"),
    -+		usage_msg_opt(_("--guides cannot be combined with command or guide names"),
    - 			      builtin_help_usage, builtin_help_options);
    - 
    --	if (show_all) {
    -+	need_config = show_all || show_config;
    -+	if (need_config)
    - 		git_config(git_help_config, NULL);
     +
    -+	if (show_all) {
    - 		if (verbose) {
    - 			setup_pager();
    - 			list_all_cmds_help();
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    - 		list_commands(colopts, &main_cmds, &other_cmds);
    - 	}
    - 
    -+	if (show_guides)
    -+		list_guides_help();
    ++SYNOPSIS
    ++--------
    ++[verse]
    ++$GIT_DIR/index
     +
    -+	if (show_all || show_guides) {
    -+		printf("%s\n", _(git_more_info_string));
    -+		return 0;
    -+	}
    ++DESCRIPTION
    ++-----------
     +
    - 	if (show_config) {
    - 		int for_human = show_config == 1;
    - 
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    - 		return 0;
    - 	}
    + Git index format
    +-================
      
    --	if (show_guides)
    --		list_guides_help();
    --
    --	if (show_all || show_guides) {
    --		printf("%s\n", _(git_more_info_string));
    --		return 0;
    --	}
    --
    - 	if (!argv[0]) {
    - 		printf(_("usage: %s%s"), _(git_usage_string), "\n\n");
    - 		list_common_cmds_help();
    -
    - ## t/t0012-help.sh ##
    -@@ t/t0012-help.sh: test_expect_success 'basic help commands' '
    - '
    + == The Git index file has the following format
      
    - test_expect_success 'invalid usage' '
    --	test_expect_code 129 git help -g git-add
    -+	test_expect_code 129 git help -g git-add &&
    -+	test_expect_code 129 git help -c git-add &&
    -+	test_expect_code 129 git help -g git-add &&
    +@@ Documentation/gitformat-index.txt: The remaining data of each directory block is grouped by type:
    +   with signature { 's', 'd', 'i', 'r' }. Like the split-index extension,
    +   tools should avoid interacting with a sparse index unless they understand
    +   this extension.
     +
    -+	test_expect_code 129 git help -a -c &&
    -+	test_expect_code 129 git help -g -c
    - '
    - 
    - test_expect_success "works for commands and guides by default" '
    ++GIT
    ++---
    ++Part of the linkgit:git[1] suite
    +
    + ## command-list.txt ##
    +@@ command-list.txt: gitmodules                              userformats
    + gitformats                              gitformats
    + gitformat-bundle                        gitformats
    + gitformat-commit-graph                  gitformats
    ++gitformat-index                         gitformats
    + gitformat-pack                          gitformats
    + gitformat-pack-protocol                 gitformats
    + gitformat-protocol-http                 gitformats
 3:  258282095de !  8:  f26e5ecba12 help tests: add test for --config output
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    help tests: add test for --config output
    -
    -    Add a missing test for checking what the --config output added in
    -    ac68a93fd2 (help: add --config to list all available config,
    -    2018-05-26) looks like. We should not be emitting anything except
    -    config variables and the brief usage information at the end here.
    +    docs: move signature-format docs to man section 5
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/t0012-help.sh ##
    -@@ t/t0012-help.sh: test_expect_success 'git help -g' '
    - 	test_i18ngrep "^   tutorial   " help.output
    - '
    + ## Documentation/Makefile ##
    +@@ Documentation/Makefile: MAN5_TXT += gitformat-protocol-capabilities.txt
    + MAN5_TXT += gitformat-protocol-common.txt
    + MAN5_TXT += gitformat-protocol-http.txt
    + MAN5_TXT += gitformat-protocol-v2.txt
    ++MAN5_TXT += gitformat-signature.txt
    + MAN5_TXT += gitformats.txt
    + MAN5_TXT += githooks.txt
    + MAN5_TXT += gitignore.txt
    +@@ Documentation/Makefile: TECH_DOCS += technical/racy-git
    + TECH_DOCS += technical/reftable
    + TECH_DOCS += technical/send-pack-pipeline
    + TECH_DOCS += technical/shallow
    +-TECH_DOCS += technical/signature-format
    + TECH_DOCS += technical/trivial-merge
    + SP_ARTICLES += $(TECH_DOCS)
    + SP_ARTICLES += technical/api-index
    +
    + ## Documentation/technical/signature-format.txt => Documentation/gitformat-signature.txt ##
    +@@
    +-Git signature format
    +-====================
    ++gitformat-signature(5)
    ++======================
      
    -+test_expect_success 'git help -c' '
    -+	git help -c >help.output &&
    -+	cat >expect <<-\EOF &&
    +-== Overview
    ++NAME
    ++----
    ++gitformat-signature - Git cryptographic signature formats
    ++
     +
    -+	'"'"'git help config'"'"' for more information
    -+	EOF
    -+	grep -v -E \
    -+		-e "^[^.]+\.[^.]+$" \
    -+		-e "^[^.]+\.[^.]+\.[^.]+$" \
    -+		help.output >actual &&
    -+	test_cmp expect actual
    -+'
    ++SYNOPSIS
    ++--------
    ++[verse]
    ++<[tag|commit] object header(s)>
    ++<over-the-wire protocol>
     +
    - test_expect_success 'generate builtin list' '
    - 	git --list-cmds=builtins >builtins
    - '
    ++DESCRIPTION
    ++-----------
    + 
    + Git uses cryptographic signatures in various places, currently objects (tags,
    + commits, mergetags) and transactions (pushes). In every case, the command which
    +@@ Documentation/gitformat-signature.txt: Date:   Wed Jun 15 09:13:29 2016 +0000
    +     # gpg:          There is no indication that the signature belongs to the owner.
    +     # Primary key fingerprint: D4BE 2231 1AD3 131E 5EDA  29A4 6109 2E85 B722 7189
    + ----
    ++
    ++GIT
    ++---
    ++Part of the linkgit:git[1] suite
    +
    + ## command-list.txt ##
    +@@ command-list.txt: gitformat-index                         gitformats
    + gitformat-pack                          gitformats
    + gitformat-pack-protocol                 gitformats
    + gitformat-protocol-http                 gitformats
    ++gitformat-signature                     gitformats
    + gitnamespaces                           guide
    + gitremote-helpers                       guide
    + gitrepository-layout                    guide
 2:  039639a0dd3 !  9:  24be49877a2 help: correct usage & behavior of "git help --guides"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    help: correct usage & behavior of "git help --guides"
    -
    -    As noted in 65f98358c0c (builtin/help.c: add --guide option,
    -    2013-04-02) and a133737b809 (doc: include --guide option description
    -    for "git help", 2013-04-02) which introduced the --guide option it
    -    cannot be combined with e.g. <command>.
    -
    -    Change both the usage string to reflect that, and test and assert for
    -    this behavior in the command itself. Now that we assert this in code
    -    we don't need to exhaustively describe the previous confusing behavior
    -    in the documentation either, instead of silently ignoring the provided
    -    argument we'll now error out.
    -
    -    The comment being removed was added in 15f7d494380 (builtin/help.c:
    -    split "-a" processing into two, 2013-04-02). The "Ignore any remaining
    -    args" part of it is now no longer applicable as explained above, let's
    -    just remove it entirely, it's rather obvious that if we're returning
    -    we're done.
    +    docs: move bitmap-format docs to man section 5
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/git-help.txt ##
    -@@ Documentation/git-help.txt: git-help - Display help information about Git
    - SYNOPSIS
    - --------
    - [verse]
    --'git help' [-a|--all [--[no-]verbose]] [-g|--guides]
    -+'git help' [-a|--all [--[no-]verbose]]
    - 	   [[-i|--info] [-m|--man] [-w|--web]] [COMMAND|GUIDE]
    -+'git help' [-g|--guides]
    + ## Documentation/Makefile ##
    +@@ Documentation/Makefile: MAN1_TXT += gitweb.txt
      
    - DESCRIPTION
    - -----------
    -@@ Documentation/git-help.txt: OPTIONS
    + # man5 / man7 guides (note: new guides should also be added to command-list.txt)
    + MAN5_TXT += gitattributes.txt
    ++MAN5_TXT += gitformat-bitmap.txt
    + MAN5_TXT += gitformat-bundle.txt
    + MAN5_TXT += gitformat-commit-graph.txt
    + MAN5_TXT += gitformat-index.txt
    +
    + ## Documentation/technical/bitmap-format.txt => Documentation/gitformat-bitmap.txt ##
    +@@
    ++gitformat-bitmap(5)
    ++===================
    ++
    ++NAME
    ++----
    ++gitformat-bitmap - The bitmap file format
    ++
    ++SYNOPSIS
    ++--------
    ++[verse]
    ++$GIT_DIR/objects/pack/*.bitmap
    ++
    ++DESCRIPTION
    ++-----------
    ++
    ++Bitmaps are a file format associated with .pack files. See
    ++linkgit:gitformat-pack[5] and linkgit:git-pack-objects[1].
    ++
    + GIT bitmap v1 format
    +-====================
    ++--------------------
      
    - -g::
    - --guides::
    --	Prints a list of the Git concept guides on the standard output. This
    --	option overrides any given command or guide name.
    -+	Prints a list of the Git concept guides on the standard output.
    + == Pack and multi-pack bitmaps
      
    - -i::
    - --info::
    -
    - ## builtin/help.c ##
    -@@ builtin/help.c: static struct option builtin_help_options[] = {
    - };
    +@@ Documentation/gitformat-bitmap.txt: MIDXs, both the bit-cache and rev-cache extensions are required.
      
    - static const char * const builtin_help_usage[] = {
    --	N_("git help [-a|--all] [-g|--guides] [--[no-]verbose]]\n"
    -+	N_("git help [-a|--all] [--[no-]verbose]]\n"
    - 	   "         [[-i|--info] [-m|--man] [-w|--web]] [<command>]"),
    -+	N_("git help [-g|--guides]"),
    - 	NULL
    - };
    + 		- The compressed bitmap itself, see Appendix A.
      
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    - 			builtin_help_usage, 0);
    - 	parsed_help_format = help_format;
    +-== Appendix A: Serialization format for an EWAH bitmap
    ++Appendix A - Serialization format for an EWAH bitmap
    ++~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      
    -+	/* Options that take no further arguments */
    -+	if (argc && show_guides)
    -+		usage_msg_opt(_("--guides cannot be combined with other options"),
    -+			      builtin_help_usage, builtin_help_options);
    -+
    - 	if (show_all) {
    - 		git_config(git_help_config, NULL);
    - 		if (verbose) {
    -@@ builtin/help.c: int cmd_help(int argc, const char **argv, const char *prefix)
    + Ewah bitmaps are serialized in the same protocol as the JAVAEWAH
    + library, making them backwards compatible with the JGit
    +@@ Documentation/gitformat-bitmap.txt: chunk.  For efficient appending to the bitstream, the EWAH stores a
    + pointer to the last RLW in the stream.
      
    - 	if (show_all || show_guides) {
    - 		printf("%s\n", _(git_more_info_string));
    --		/*
    --		* We're done. Ignore any remaining args
    --		*/
    - 		return 0;
    - 	}
      
    -
    - ## t/t0012-help.sh ##
    -@@ t/t0012-help.sh: test_expect_success 'basic help commands' '
    - 	git help -a >/dev/null
    - '
    +-== Appendix B: Optional Bitmap Sections
    ++Appendix B - Optional Bitmap Sections
    ++~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      
    -+test_expect_success 'invalid usage' '
    -+	test_expect_code 129 git help -g git-add
    -+'
    + These sections may or may not be present in the `.bitmap` file; their
    + presence is indicated by the header flags section described above.
    +@@ Documentation/gitformat-bitmap.txt: Note that this hashing scheme is tied to the BITMAP_OPT_HASH_CACHE flag.
    + If implementations want to choose a different hashing scheme, they are
    + free to do so, but MUST allocate a new header flag (because comparing
    + hashes made under two different schemes would be pointless).
     +
    - test_expect_success "works for commands and guides by default" '
    - 	configure_help &&
    - 	git help status &&
    ++GIT
    ++---
    ++Part of the linkgit:git[1] suite
    +
    + ## command-list.txt ##
    +@@ command-list.txt: gitignore                               userformats
    + gitmailmap                              userformats
    + gitmodules                              userformats
    + gitformats                              gitformats
    ++gitformat-bitmap                        gitformats
    + gitformat-bundle                        gitformats
    + gitformat-commit-graph                  gitformats
    + gitformat-index                         gitformats
 -:  ----------- > 10:  4fb21f65c15 docs: move chunk-format docs to man section 5
 -:  ----------- > 11:  3e3f92f76d7 Mostly revert this branch, too many conflicts
-- 
2.33.0.1098.gf02a64c1a2d

