From 5fa312812707f0357b58f8f930e68f708e448c25 Mon Sep 17 00:00:00 2001
Message-Id: <patch-02.10-5fa3128127-20210420T125416Z-avarab@gmail.com>
In-Reply-To: <cover-00.10-0000000000-20210420T125415Z-avarab@gmail.com>
References: <cover-0.6-0000000000-20210409T082935Z-avarab@gmail.com>
	<cover-00.10-0000000000-20210420T125415Z-avarab@gmail.com>
From: =?UTF-8?q?=C3=86var=20Arnfj=C3=B6r=C3=B0=20Bjarmason?=
 <avarab@gmail.com>
Date: Sun, 28 Mar 2021 01:25:32 +0100
Subject: [PATCH v2 02/10] object.c: remove "gently" argument to
 type_from_string_gently()
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Get rid of the "gently" argument to type_from_string_gently() to make
it consistent with most other *_gently() functions. It's already a
"gentle" function, it shouldn't need a boolean argument telling it to
be gentle.

The reason it had a "gentle" parameter was because until the preceding
commit "type_from_string()" was a macro resolving to
"type_from_string_gently()", it's now a function.

This refactoring of adding a third parameter was done in
fe8e3b71805 (Refactor type_from_string() to allow continuing after
detecting an error, 2014-09-10) in preparation for its use in
fsck.c.

Simplifying this means we can move the die() into the simpler
type_from_string() function.

Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
 builtin/mktree.c |  2 +-
 fsck.c           |  2 +-
 object-file.c    |  2 +-
 object.c         | 12 +++++-------
 object.h         |  2 +-
 5 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/builtin/mktree.c b/builtin/mktree.c
index 67e11d8562..7d3f323209 100644
--- a/builtin/mktree.c
+++ b/builtin/mktree.c
@@ -117,7 +117,7 @@ static void mktree_line(char *buf, int nul_term_line, int allow_missing)
 	 * These should all agree.
 	 */
 	mode_type = object_type(mode);
-	type_type = type_from_string_gently(ptr, ntr - ptr, 1);
+	type_type = type_from_string_gently(ptr, ntr - ptr);
 	if (type_type < 0)
 		die("entry '%s' object type '%.*s' is invalid (our derived mode type is '%s')",
 			path, (int)(ntr - ptr), ptr, type_name(mode_type));
diff --git a/fsck.c b/fsck.c
index f5ed6a2635..8dda548c38 100644
--- a/fsck.c
+++ b/fsck.c
@@ -875,7 +875,7 @@ int fsck_tag_standalone(const struct object_id *oid, const char *buffer,
 		ret = report(options, oid, OBJ_TAG, FSCK_MSG_MISSING_TYPE, "invalid format - unexpected end after 'type' line");
 		goto done;
 	}
-	*tagged_type = type_from_string_gently(buffer, eol - buffer, 1);
+	*tagged_type = type_from_string_gently(buffer, eol - buffer);
 	if (*tagged_type < 0)
 		ret = report(options, oid, OBJ_TAG, FSCK_MSG_BAD_TYPE, "invalid 'type' value");
 	if (ret)
diff --git a/object-file.c b/object-file.c
index d2f223dcef..4af4748edd 100644
--- a/object-file.c
+++ b/object-file.c
@@ -1314,7 +1314,7 @@ static int parse_loose_header_extended(const char *hdr, struct object_info *oi,
 		type_len++;
 	}
 
-	type = type_from_string_gently(type_buf, type_len, 1);
+	type = type_from_string_gently(type_buf, type_len);
 	if (oi->type_name)
 		strbuf_add(oi->type_name, type_buf, type_len);
 	/*
diff --git a/object.c b/object.c
index aae2a27e55..7028243c9a 100644
--- a/object.c
+++ b/object.c
@@ -35,7 +35,7 @@ const char *type_name(unsigned int type)
 	return object_type_strings[type];
 }
 
-int type_from_string_gently(const char *str, size_t len, int gentle)
+int type_from_string_gently(const char *str, size_t len)
 {
 	int i;
 
@@ -46,17 +46,15 @@ int type_from_string_gently(const char *str, size_t len, int gentle)
 		if (!strncmp(str, object_type_strings[i], len) &&
 		    object_type_strings[i][len] == '\0')
 			return i;
-
-	if (gentle)
-		return -1;
-
-	die(_("invalid object type \"%.*s\""), (int)len, str);
+	return -1;
 }
 
 int type_from_string(const char *str)
 {
 	size_t len = strlen(str);
-	int ret = type_from_string_gently(str, len, 0);
+	int ret = type_from_string_gently(str, len);
+	if (ret < 0)
+		die(_("invalid object type \"%s\""), str);
 	return ret;
 }
 
diff --git a/object.h b/object.h
index f9d8f4d22b..470b3c1b86 100644
--- a/object.h
+++ b/object.h
@@ -93,7 +93,7 @@ struct object {
 };
 
 const char *type_name(unsigned int type);
-int type_from_string_gently(const char *str, size_t, int gentle);
+int type_from_string_gently(const char *str, size_t len);
 int type_from_string(const char *str);
 
 /*
-- 
2.31.1.723.ga5d7868e4a

