From 03b93add820848a256422ed1fe8c86b0a4010ed1 Mon Sep 17 00:00:00 2001
Message-Id: <patch-v4-03.13-03b93add820-20211101T154856Z-avarab@gmail.com>
In-Reply-To: <cover-v4-00.13-00000000000-20211101T154856Z-avarab@gmail.com>
References: <cover-v3-00.13-00000000000-20211019T231647Z-avarab@gmail.com>
	<cover-v4-00.13-00000000000-20211101T154856Z-avarab@gmail.com>
From: Emily Shaffer <emilyshaffer@google.com>
Date: Wed, 26 May 2021 17:08:40 -0700
Subject: [PATCH v4 03/13] rebase: convert pre-rebase to use hook.h
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Move the pre-rebase hook away from run-command.h to and over to the
new hook.h library.

Since this hook needs arguments introduce a run_hooksl() wrapper, like
run_hooks(), but it takes varargs.

Signed-off-by: Emily Shaffer <emilyshaffer@google.com>
Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
---
 builtin/rebase.c |  5 +++--
 hook.c           | 14 ++++++++++++++
 hook.h           | 10 ++++++++++
 3 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/builtin/rebase.c b/builtin/rebase.c
index 34b4744e5f3..2a9e43c307d 100644
--- a/builtin/rebase.c
+++ b/builtin/rebase.c
@@ -28,6 +28,7 @@
 #include "sequencer.h"
 #include "rebase-interactive.h"
 #include "reset.h"
+#include "hook.h"
 
 #define DEFAULT_REFLOG_ACTION "rebase"
 
@@ -1712,8 +1713,8 @@ int cmd_rebase(int argc, const char **argv, const char *prefix)
 
 	/* If a hook exists, give it a chance to interrupt*/
 	if (!ok_to_skip_pre_rebase &&
-	    run_hook_le(NULL, "pre-rebase", options.upstream_arg,
-			argc ? argv[0] : NULL, NULL))
+	    run_hooksl("pre-rebase", options.upstream_arg, argc? argv[0] :
+		       NULL, NULL))
 		die(_("The pre-rebase hook refused to rebase."));
 
 	if (options.flags & REBASE_DIFFSTAT) {
diff --git a/hook.c b/hook.c
index 5b60dc3737e..6df9a509c67 100644
--- a/hook.c
+++ b/hook.c
@@ -149,3 +149,17 @@ int run_hooks(const char *hook_name)
 
 	return run_hooks_opt(hook_name, &opt);
 }
+
+int run_hooksl(const char *hook_name, ...)
+{
+	struct run_hooks_opt opt = RUN_HOOKS_OPT_INIT;
+	va_list ap;
+	const char *arg;
+
+	va_start(ap, hook_name);
+	while ((arg = va_arg(ap, const char *)))
+		strvec_push(&opt.args, arg);
+	va_end(ap);
+
+	return run_hooks_opt(hook_name, &opt);
+}
diff --git a/hook.h b/hook.h
index 0ab9f395b1a..1bbfaf86249 100644
--- a/hook.h
+++ b/hook.h
@@ -59,4 +59,14 @@ int run_hooks_opt(const char *hook_name, struct run_hooks_opt *options);
  * run_hooks_opt" initialized with "RUN_HOOKS_OPT_INIT".
  */
 int run_hooks(const char *hook_name);
+
+/**
+ * Like run_hooks(), a wrapper for run_hooks_opt().
+ *
+ * This wrapper will call run_hooks() options.args generated from a
+ * list of strings provided to this function. The arguments should be
+ * a list of `const char *` strings, terminated by a NULL
+ * argument. This is like the old run_hook_le() API.
+ */
+int run_hooksl(const char *hook_name, ...);
 #endif
-- 
2.33.1.1570.g069344fdd45

