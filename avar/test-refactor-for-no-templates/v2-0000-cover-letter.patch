From 0149c80f09cbff5329323cc785a090d462b5d6a2 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-0.7-00000000000-20220603T110333Z-avarab@gmail.com>
In-Reply-To: <cover-00.13-00000000000-20211212T201308Z-avarab@gmail.com>
References: <cover-00.13-00000000000-20211212T201308Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Fri, 3 Jun 2022 13:03:33 +0200
Subject: [PATCH v2 0/7] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (7):
  t0008: don't rely on default ".git/info/exclude"
  tests: don't depend on template-created .git/branches
  tests: don't assume a .git/info for .git/info/grafts
  tests: don't assume a .git/info for .git/info/attributes
  tests: don't assume a .git/info for .git/info/refs
  tests: don't assume a .git/info for .git/info/exclude
  tests: don't assume a .git/info for .git/info/sparse-checkout

 t/annotate-tests.sh                    |  3 ++-
 t/lib-submodule-update.sh              |  7 +++++--
 t/t0003-attributes.sh                  |  5 ++++-
 t/t0008-ignores.sh                     | 12 +++++++-----
 t/t0028-working-tree-encoding.sh       |  2 ++
 t/t1011-read-tree-sparse-checkout.sh   |  2 ++
 t/t1090-sparse-checkout-scope.sh       |  5 ++++-
 t/t1301-shared-repo.sh                 |  3 ++-
 t/t2018-checkout-branch.sh             |  4 +++-
 t/t2400-worktree-add.sh                |  4 ++++
 t/t3426-rebase-submodule.sh            |  1 +
 t/t3507-cherry-pick-conflict.sh        |  2 ++
 t/t5000-tar-tree.sh                    |  5 ++++-
 t/t5001-archive-attr.sh                |  5 ++++-
 t/t5002-archive-attr-pattern.sh        |  5 ++++-
 t/t5003-archive-zip.sh                 |  5 ++++-
 t/t5318-commit-graph.sh                |  3 ++-
 t/t5505-remote.sh                      |  6 ++++--
 t/t5516-fetch-push.sh                  | 16 ++++++++++++++--
 t/t5550-http-fetch-dumb.sh             |  3 ++-
 t/t6001-rev-list-graft.sh              |  1 +
 t/t6101-rev-parse-parents.sh           |  2 ++
 t/t6435-merge-sparse.sh                |  2 ++
 t/t7063-status-untracked-cache.sh      |  3 ++-
 t/t7418-submodule-sparse-gitmodules.sh |  3 ++-
 t/t7814-grep-recurse-submodules.sh     |  8 ++++++--
 t/t8001-annotate.sh                    |  1 +
 t/t8002-blame.sh                       |  1 +
 t/t8012-blame-colors.sh                |  1 +
 t/test-lib.sh                          |  4 +++-
 30 files changed, 97 insertions(+), 27 deletions(-)

Range-diff against v1:
 4:  3d4ea5c5d30 =  1:  21927e21832 t0008: don't rely on default ".git/info/exclude"
 8:  0c9b953dd43 !  2:  c4d0e6c684b tests: don't depend on template-created .git/branches
    @@ Commit message
         2009-10-30) to get rid of the legacy "branches" directory.
     
         We should probably get rid of its creation by removing the
    -    "templates/branches--" file, but whatever we do with that we don't
    -    need to be creating it in the templates that drive our own tests.
    +    "templates/branches--" file. But whatever our default behavior, our
    +    tests should be tightened up to explicitly create the .git/branches
    +    directory if they rely on our default templates, to make the
    +    dependency on those templates clear.
     
    -    By removing this dependency it'll be more obvious what tests depend on
    -    the existence of ".git/branches", and we can remove the first of the
    -    three special-cases added to copy_template() in a preceding commit.
    +    So let's amend the two tests that would fail if .git/branches wasn't
    +    created. To do this introduce a new "TEST_CREATE_REPO_NO_TEMPLATE"
    +    variable, which we'll set before sourcing test-lib.sh, and change the
    +    "git clone" and "git init" commands in the tests themselves to
    +    explicitly pass "--template=".
     
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    +    This way they won't get a .git/branches in either their top-level
    +    .git, or in the ones they create. We can then amend the tests that
    +    rely on the ".git/branches" directory existing to create it
    +    explicitly, and to remove it after its creation.
     
    - ## builtin/init-db.c ##
    -@@ builtin/init-db.c: static void copy_templates(int no_template, const char *template_dir,
    - 	len = path.len;
    - 
    - 	lazy_mkdir_strbuf_or_die_setlen(&path, len, "hooks");
    --	lazy_mkdir_strbuf_or_die_setlen(&path, len, "branches");
    - 
    - 	strbuf_release(&path);
    - }
    +    This new "TEST_CREATE_REPO_NO_TEMPLATE" variable is a less
    +    heavy-handed version of the "NO_SET_GIT_TEMPLATE_DIR" variable. See
    +    a94d305bf80 (t/t0001-init.sh: add test for 'init with init.templatedir
    +    set', 2010-02-26) for its implementation.
    +
    +    Unlike "TEST_CREATE_REPO_NO_TEMPLATE", this new
    +    "TEST_CREATE_REPO_NO_TEMPLATE" variable is narrowly scoped to what the
    +    "git init" in test-lib.sh does, as opposed to the global effect of
    +    "NO_SET_GIT_TEMPLATE_DIR" and the setting of "GIT_TEMPLATE_DIR" in
    +    wrap-for-bin.sh.
    +
    +    I experimented with adding a new "GIT_WRAP_FOR_BIN_VIA_TEST_LIB"
    +    variable set in test-lib.sh, which would cause wrap-for-bin.sh to not
    +    set GIT_TEMPLATE_DIR, GITPERLLIB etc, as we set those in
    +    test-lib.sh. I think that's a viable approach, but it would interact
    +    e.g. with the appending feature of GITPERLLIB added in
    +    8bade1e12e2 (wrap-for-bin: make bin-wrappers chainable, 2013-07-04).
    +
    +    Doing so would allow us to convert the tests in t0001-init.sh that now
    +    use "NO_SET_GIT_TEMPLATE_DIR" to simply unset "GIT_TEMPLATE_DIR" in a
    +    sub-shell before invoking "git init" or "git clone". I think that
    +    approach is worth pursuing, but let's table it for now. Some future
    +    wrap-for-bin.sh refactoring can try to address it.
    +
    +    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## t/t5505-remote.sh ##
    -@@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT_DIR/branches' '
    +@@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT_DIR/remotes' '
    + '
    + 
    + test_expect_success 'migrate a remote from named file in $GIT_DIR/branches' '
    +-	git clone one six &&
    ++	git clone --template= one six &&
    + 	origin_url=$(pwd)/one &&
      	(
      		cd six &&
      		git remote rm origin &&
    @@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT
      		echo "$origin_url#main" >.git/branches/origin &&
      		git remote rename origin origin &&
      		test_path_is_missing .git/branches/origin &&
    -@@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT_DIR/branches (2)'
    +@@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT_DIR/branches' '
    + '
    + 
    + test_expect_success 'migrate a remote from named file in $GIT_DIR/branches (2)' '
    +-	git clone one seven &&
    ++	git clone --template= one seven &&
      	(
      		cd seven &&
      		git remote rm origin &&
    @@ t/t5505-remote.sh: test_expect_success 'migrate a remote from named file in $GIT
      		test_path_is_missing .git/branches/origin &&
     
      ## t/t5516-fetch-push.sh ##
    +@@ t/t5516-fetch-push.sh: This test checks the following functionality:
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
    + 
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + D=$(pwd)
    +@@ t/t5516-fetch-push.sh: mk_empty () {
    + 	repo_name="$1"
    + 	test_when_finished "rm -rf \"$repo_name\"" &&
    + 	test_path_is_missing "$repo_name" &&
    +-	git init "$repo_name" &&
    ++	git init --template= "$repo_name" &&
    ++	mkdir "$repo_name"/.git/hooks &&
    + 	git -C "$repo_name" config receive.denyCurrentBranch warn
    + }
    + 
    +@@ t/t5516-fetch-push.sh: mk_test_with_hooks() {
    + 
    + mk_child() {
    + 	test_when_finished "rm -rf \"$2\"" &&
    +-	git clone "$1" "$2"
    ++	git clone --template= "$1" "$2"
    + }
    + 
    + check_push_result () {
     @@ t/t5516-fetch-push.sh: test_expect_success 'fetch with branches' '
      	mk_empty testrepo &&
      	git branch second $the_first_commit &&
    @@ t/t5516-fetch-push.sh: test_expect_success 'fetch with branches containing #' '
      test_expect_success 'push with branches' '
      	mk_empty testrepo &&
      	git checkout second &&
    ++
    ++	test_when_finished "rm -rf .git/branches" &&
     +	mkdir .git/branches &&
      	echo "testrepo" > .git/branches/branch1 &&
    ++
      	git push branch1 &&
      	(
    + 		cd testrepo &&
    +@@ t/t5516-fetch-push.sh: test_expect_success 'push with branches' '
    + 
    + test_expect_success 'push with branches containing #' '
    + 	mk_empty testrepo &&
    ++
    ++	test_when_finished "rm -rf .git/branches" &&
    ++	mkdir .git/branches &&
    + 	echo "testrepo#branch3" > .git/branches/branch2 &&
    ++
    + 	git push branch2 &&
    + 	(
    + 		cd testrepo &&
    +
    + ## t/test-lib.sh ##
    +@@ t/test-lib.sh: remove_trash_directory "$TRASH_DIRECTORY" || {
    + remove_trash=t
    + if test -z "$TEST_NO_CREATE_REPO"
    + then
    +-	git init "$TRASH_DIRECTORY" >&3 2>&4 ||
    ++	git init \
    ++	    ${TEST_CREATE_REPO_NO_TEMPLATE:+--template=} \
    ++	    "$TRASH_DIRECTORY" >&3 2>&4 ||
    + 	error "cannot run git init"
    + else
    + 	mkdir -p "$TRASH_DIRECTORY"
 7:  9402fb23b40 !  3:  967762b4670 test-lib: create test data with "git init --no-template" (almost)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    test-lib: create test data with "git init --no-template" (almost)
    +    tests: don't assume a .git/info for .git/info/grafts
     
    -    Change "t/test-lib.sh" to set the newly added
    -    "GIT_NO_TEMPLATE_DIR=true" option in the environment, which makes any
    -    "git init" invocation take the equivalent of a "--no-template" option,
    -    unless explicitly overridden by config or CLI option.
    +    Change those tests that assumed that a .git/info directory would be
    +    created for them when writing .git/info/grafts to explicitly create
    +    the directory.
     
    -    Well, "almost". We're also adding a test-only
    -    "GIT_TEST_BARE_TEMPLATE=true", when it's set we'll interpret
    -    "GIT_NO_TEMPLATE_DIR=true" as meaning no template, except for empty
    -    "hooks" and "branches" directories.
    -
    -    This is because we've added various implicit dependencies on having
    -    these created by "git init". In subsequent commits we'll address some
    -    of those. More on that below.
    -
    -    The code being added here in "builtin/init-db.c" doesn't require
    -    careful review, since this lazy_mkdir_strbuf_or_die_setlen() function
    -    and the "no_template" condition will be gone in a few commits as we
    -    fix up a few tests to create their own "hooks" and "branches"
    -    directories.
    -
    -    This change reduces the I/O the test suite generates by quite a
    -    bit. Before this running it with --debug (so that trash is retained)
    -    results in ~770MB of trash* (according to "du -shc"), after it's
    -    reduced to around 590M, so almost 1/4 bytes we wrote were the same
    -    sample hooks and other repetitive data. The number of files created
    -    went down from ~151k to ~110k, which around the same reduction
    -    of (more than) 1/4.
    -
    -    This will also make our tests more reliable as we're now forced to
    -    check whether our software works with any arbitrary --template that
    -    may be in use in the wild, as opposed to our relatively "fat" current
    -    default.
    -
    -    On the "more on that below", these are the directories we're
    -    creating (only in the test suite) for now:
    -
    -    - "hooks": Removing it will be relatively simple, mostly a matter of a
    -      few tests needing a "mkdir .git/hooks", or the tests assume that
    -      they'll need to explicitly disable .git/hooks.
    -
    -    - "branches": Similarly trivial. The last attempt to get rid of it was
    -      aborted in c8a58ac5a52 (Revert "Don't create the $GIT_DIR/branches
    -      directory on init", 2009-10-31), but only a couple of tests files
    -      depend on it.
    +    Do this using the new "TEST_CREATE_REPO_NO_TEMPLATE" facility, and use
    +    "mkdir" instead of "mkdir -p" to assert that we don't have the
    +    .git/info already. An exception to this is the "with grafts" test in
    +    "t6001-rev-list-graft.sh". There we're modifying our ".git" state in a
    +    for-loop, in lieu of refactoring that more extensively let's use
    +    "mkdir -p" there.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## builtin/init-db.c ##
    -@@ builtin/init-db.c: static void copy_templates_1(struct strbuf *path, struct strbuf *template_path,
    - 	}
    - }
    - 
    -+static void lazy_mkdir_strbuf_or_die_setlen(struct strbuf *path, size_t oldlen,
    -+					    const char *dir)
    -+{
    -+	strbuf_addstr(path, dir);
    -+	if (mkdir(path->buf, 0777) < 0) {
    -+		int saved_errno = errno;
    -+		struct stat st;
    -+
    -+		/*
    -+		 * Unfortunately there's no EEXIST_{DIR,FILE}, and
    -+		 * we'd like to pass these only if the path is already
    -+		 * what we want it to be, not if it's a normal.
    -+		 */
    -+		if (lstat(path->buf, &st))
    -+			die_errno(_("cannot stat '%s'"), path->buf);
    -+		else if (S_ISDIR(st.st_mode))
    -+			goto cleanup;
    -+
    -+		errno = saved_errno;
    -+		die_errno(_("cannot mkdir '%s'"), path->buf);
    -+	}
    -+cleanup:
    -+	strbuf_setlen(path, oldlen);
    -+}
    -+
    - static void copy_templates(int no_template, const char *template_dir,
    - 			   const char *init_template_dir)
    - {
    - 	struct strbuf path = STRBUF_INIT;
    -+	size_t len;
    - 	struct strbuf template_path = STRBUF_INIT;
    - 	size_t template_len;
    - 	struct repository_format template_format = REPOSITORY_FORMAT_INIT;
    -@@ builtin/init-db.c: static void copy_templates(int no_template, const char *template_dir,
    - 		return;
    - 	if (!template_dir && !init_template_dir &&
    - 	    git_env_bool(GIT_NO_TEMPLATE_DIR_ENVIRONMENT, 0))
    --		return;
    -+		goto no_template;
    - 	if (!template_dir)
    - 		template_dir = getenv(TEMPLATE_DIR_ENVIRONMENT);
    - 	if (!template_dir)
    -@@ builtin/init-db.c: static void copy_templates(int no_template, const char *template_dir,
    - 	strbuf_release(&path);
    - 	strbuf_release(&template_path);
    - 	clear_repository_format(&template_format);
    -+	return;
    -+no_template:
    -+	if (!git_env_bool("GIT_TEST_BARE_TEMPLATE", 0))
    -+		return;
    -+
    -+	strbuf_addstr(&path, get_git_common_dir());
    -+	strbuf_complete(&path, '/');
    -+	len = path.len;
    -+
    -+	lazy_mkdir_strbuf_or_die_setlen(&path, len, "hooks");
    -+	lazy_mkdir_strbuf_or_die_setlen(&path, len, "branches");
    -+
    -+	strbuf_release(&path);
    - }
    + ## t/annotate-tests.sh ##
    +@@ t/annotate-tests.sh: test_expect_success 'blame evil merge' '
      
    - /*
    + test_expect_success 'blame huge graft' '
    + 	test_when_finished "git checkout branch2" &&
    +-	test_when_finished "rm -f .git/info/grafts" &&
    ++	test_when_finished "rm -rf .git/info" &&
    + 	graft= &&
    + 	for i in 0 1 2
    + 	do
    +@@ t/annotate-tests.sh: test_expect_success 'blame huge graft' '
    + 			graft="$graft$commit " || return 1
    + 		done
    + 	done &&
    ++	mkdir .git/info &&
    + 	printf "%s " $graft >.git/info/grafts &&
    + 	check_count -h 00 01 1 10 1
    + '
     
    - ## t/t0001-init.sh ##
    -@@ t/t0001-init.sh: test_expect_success 'init with --template' '
    + ## t/t2400-worktree-add.sh ##
    +@@ t/t2400-worktree-add.sh: test_description='test git worktree add'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    - test_expect_success 'init with --template (blank)' '
    - 	git init template-plain &&
    --	test_path_is_file template-plain/.git/info/exclude &&
    -+	test_path_is_dir template-plain/.git/info &&
    - 	git init --template= template-blank &&
    - 	test_path_is_missing template-blank/.git/info/exclude
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + . "$TEST_DIRECTORY"/lib-rebase.sh
    +@@ t/t2400-worktree-add.sh: test_expect_success 'checkout with grafts' '
    + 	SHA1=$(git rev-parse HEAD) &&
    + 	test_commit def &&
    + 	test_commit xyz &&
    ++	mkdir .git/info &&
    + 	echo "$(git rev-parse HEAD) $SHA1" >.git/info/grafts &&
    + 	cat >expected <<-\EOF &&
    + 	xyz
    +@@ t/t2400-worktree-add.sh: test_expect_success 'git worktree --no-guess-remote option overrides config' '
      '
    -@@ t/t0001-init.sh: no_templatedir_env () {
    - 	export NO_SET_GIT_TEMPLATE_DIR
    - }
      
    --init_no_templatedir_env () {
    --	(
    --		no_templatedir_env &&
    --		git init "$1"
    --	)
    --}
    --
    - test_expect_success 'init with init.templatedir set' '
    - 	mkdir templatedir-source &&
    - 	echo Content >templatedir-source/file &&
    - 	test_config_global init.templatedir "${HOME}/templatedir-source" &&
    + post_checkout_hook () {
    ++	test_when_finished "rm -rf .git/hooks" &&
    ++	mkdir .git/hooks &&
    + 	test_hook -C "$1" post-checkout <<-\EOF
    + 	{
    + 		echo $*
    +
    + ## t/t5318-commit-graph.sh ##
    +@@ t/t5318-commit-graph.sh: test_expect_success 'replace-objects invalidates commit-graph' '
    + test_expect_success 'commit grafts invalidate commit-graph' '
    + 	cd "$TRASH_DIRECTORY" &&
    + 	test_when_finished rm -rf graft &&
    +-	git clone full graft &&
    ++	git clone --template= full graft &&
    + 	(
    + 		cd graft &&
    + 		git commit-graph write --reachable &&
    + 		test_path_is_file .git/objects/info/commit-graph &&
    + 		H1=$(git rev-parse --verify HEAD~1) &&
    + 		H3=$(git rev-parse --verify HEAD~3) &&
    ++		mkdir .git/info &&
    + 		echo "$H1 $H3" >.git/info/grafts &&
    + 		git -c core.commitGraph=false log >expect &&
    + 		git -c core.commitGraph=true log >actual &&
    +
    + ## t/t6001-rev-list-graft.sh ##
    +@@ t/t6001-rev-list-graft.sh: do
    + 	"
    + 
    + 	test_expect_success 'with grafts' "
    ++		mkdir -p .git/info &&
    + 		echo '$B0 $A2' >.git/info/grafts &&
    + 		check $type $B2 -- $B2 $B1 $B0 $A2 $A1 $A0
    + 	"
    +
    + ## t/t6101-rev-parse-parents.sh ##
    +@@ t/t6101-rev-parse-parents.sh: test_description='Test git rev-parse with different parent options'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    --	init_no_templatedir_env templatedir-set &&
    -+	git init templatedir-set &&
    - 	test_cmp templatedir-source/file templatedir-set/.git/file
    - '
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    -@@ t/t0001-init.sh: test_expect_success 'init with init.templatedir using ~ expansion' '
    - 	echo Content >templatedir-source/file &&
    - 	test_config_global init.templatedir "~/templatedir-source" &&
    + test_cmp_rev_output () {
    +@@ t/t6101-rev-parse-parents.sh: test_expect_success 'setup' '
    + 	git merge -m next --allow-unrelated-histories start2 &&
    + 	test_commit final &&
      
    --	init_no_templatedir_env templatedir-expansion &&
    -+	git init templatedir-expansion &&
    - 	test_cmp templatedir-source/file templatedir-expansion/.git/file
    - '
    ++	mkdir .git/info &&
    + 	test_seq 40 |
    + 	while read i
    + 	do
    +
    + ## t/t8001-annotate.sh ##
    +@@ t/t8001-annotate.sh: test_description='git annotate'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    -@@ t/t0001-init.sh: test_expect_success 'remote init from does not use config from cwd' '
    - '
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    - test_expect_success 're-init from a linked worktree' '
    --	git init main-worktree &&
    - 	(
    -+		git init main-worktree &&
    -+
    - 		cd main-worktree &&
    - 		test_commit first &&
    - 		git worktree add ../linked-worktree &&
    -+		>empty &&
    -+		cp empty .git/info/exclude &&
    - 		mv .git/info/exclude expected-exclude &&
    - 		cp .git/config expected-config &&
    - 		find .git/worktrees -print | sort >expected &&
    - 		git -C ../linked-worktree init &&
    -+		cp empty .git/info/exclude &&
    - 		test_cmp expected-exclude .git/info/exclude &&
    - 		test_cmp expected-config .git/config &&
    - 		find .git/worktrees -print | sort >actual &&
    + PROG='git annotate'
     
    - ## t/test-lib.sh ##
    -@@ t/test-lib.sh: else # normal case, use ../bin-wrappers only unless $with_dashes:
    - 		PATH="$GIT_BUILD_DIR:$GIT_BUILD_DIR/t/helper:$PATH"
    - 	fi
    - fi
    --GIT_TEMPLATE_DIR="$GIT_BUILD_DIR"/templates/blt
    -+GIT_NO_TEMPLATE_DIR=true
    -+GIT_TEST_BARE_TEMPLATE=true
    -+export GIT_NO_TEMPLATE_DIR GIT_TEST_BARE_TEMPLATE
    - GIT_CONFIG_NOSYSTEM=1
    - GIT_ATTR_NOSYSTEM=1
    - GIT_CEILING_DIRECTORIES="$TRASH_DIRECTORY/.."
    --export PATH GIT_EXEC_PATH GIT_TEMPLATE_DIR GIT_CONFIG_NOSYSTEM GIT_ATTR_NOSYSTEM GIT_CEILING_DIRECTORIES
    -+export PATH GIT_EXEC_PATH GIT_CONFIG_NOSYSTEM GIT_ATTR_NOSYSTEM GIT_CEILING_DIRECTORIES
    + ## t/t8002-blame.sh ##
    +@@ t/t8002-blame.sh: test_description='git blame'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    - if test -z "$GIT_TEST_CMP"
    - then
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + PROG='git blame -c'
     
    - ## wrap-for-bin.sh ##
    -@@
    - # @@BUILD_DIR@@ and @@PROG@@.
    + ## t/t8012-blame-colors.sh ##
    +@@ t/t8012-blame-colors.sh: test_description='colored git blame'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
    + 
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    - GIT_EXEC_PATH='@@BUILD_DIR@@'
    --if test -n "$NO_SET_GIT_TEMPLATE_DIR"
    -+if test -z "$GIT_TEMPLATE_DIR" && test -z "$GIT_NO_TEMPLATE_DIR"
    - then
    --	unset GIT_TEMPLATE_DIR
    --else
    - 	GIT_TEMPLATE_DIR='@@BUILD_DIR@@/templates/blt'
    - 	export GIT_TEMPLATE_DIR
    - fi
    + PROG='git blame -c'
11:  6f805f7ebac !  4:  64292c20c84 tests: change "cat && chmod +x" to use "write_hook"
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    tests: change "cat && chmod +x" to use "write_hook"
    +    tests: don't assume a .git/info for .git/info/attributes
     
    -    Refactor various test code to use the "write_hook()" helper. Let's
    -    indent this code and add it to "test_expect_success" while we're at
    -    it.
    +    Change those tests that assumed that a .git/info directory would be
    +    created for them when writing .git/info/attributes to explicitly
    +    create the directory by setting "TEST_CREATE_REPO_NO_TEMPLATE=1"
    +    before sourcing test-lib.sh, and using the "--template=" argument to
    +    "git clone".
     
    -    As in a preceding commit some of this code drops the explicit "mkdir
    -    -p", but as noted we'll be having the "write_hook" wrapper handle that
    -    soon anyway.
    +    The change here in here in t7814-grep-recurse-submodules.sh would
    +    continue "succeeding" with only the "TEST_CREATE_REPO_NO_TEMPLATE=1"
    +    part of this change. That's because those tests use
    +    "test_expect_failure", so they'd "pass" without this change, as
    +    "test_expect_failure" by design isn't discerning about what failure
    +    conditions it'll accept.
    +
    +    But as we're fixing these sorts of issues across the test suite let's
    +    fix this one too. This issue was spotted with a local merge with
    +    another topic of mine[1], which introduces a stricter alternative to
    +    "test_expect_failure".
    +
    +    1. https://lore.kernel.org/git/cover-0.7-00000000000-20220318T002951Z-avarab@gmail.com/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/t3412-rebase-root.sh ##
    -@@ t/t3412-rebase-root.sh: test_expect_success 'rebase --root fails with too many args' '
    + ## t/t0003-attributes.sh ##
    +@@
    + test_description=gitattributes
    + 
    + TEST_PASSES_SANITIZE_LEAK=true
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + attr_check_basic () {
    +@@ t/t0003-attributes.sh: test_expect_success 'using --git-dir and --work-tree' '
      '
      
    - test_expect_success 'setup pre-rebase hook' '
    --	mkdir -p .git/hooks &&
    --	cat >.git/hooks/pre-rebase <<EOF &&
    --#!$SHELL_PATH
    --echo "\$1,\$2" >.git/PRE-REBASE-INPUT
    --EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	echo "$1,$2" >.git/PRE-REBASE-INPUT
    -+	EOF
    + test_expect_success 'setup bare' '
    +-	git clone --bare . bare.git
    ++	git clone --template= --bare . bare.git
      '
    - cat > expect <<EOF
    - 4
    -@@ t/t3412-rebase-root.sh: commit work7~5
    - EOF
    - 
    - test_expect_success 'setup pre-rebase hook that fails' '
    --	mkdir -p .git/hooks &&
    --	cat >.git/hooks/pre-rebase <<EOF &&
    --#!$SHELL_PATH
    --false
    --EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	false
    -+	EOF
    + 
    + test_expect_success 'bare repository: check that .gitattribute is ignored' '
    +@@ t/t0003-attributes.sh: test_expect_success 'bare repository: check that --cached honors index' '
    + test_expect_success 'bare repository: test info/attributes' '
    + 	(
    + 		cd bare.git &&
    ++		mkdir info &&
    + 		(
    + 			echo "f	test=f" &&
    + 			echo "a/i test=a/i"
    +@@ t/t0003-attributes.sh: test_expect_success SYMLINKS 'symlinks respected in core.attributesFile' '
    + 
    + test_expect_success SYMLINKS 'symlinks respected in info/attributes' '
    + 	test_when_finished "rm .git/info/attributes" &&
    ++	mkdir .git/info &&
    + 	ln -s ../../attr .git/info/attributes &&
    + 	attr_check file set
      '
    +
    + ## t/t0028-working-tree-encoding.sh ##
    +@@ t/t0028-working-tree-encoding.sh: test_description='working-tree-encoding conversion via gitattributes'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
    + 
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + . "$TEST_DIRECTORY/lib-encoding.sh"
    + 
    +@@ t/t0028-working-tree-encoding.sh: test_expect_success 'check $GIT_DIR/info/attributes support' '
    + 	test_when_finished "rm -f test.utf32.git" &&
    + 	test_when_finished "git reset --hard HEAD" &&
    + 
    ++	mkdir .git/info &&
    + 	echo "*.utf32 text working-tree-encoding=utf-32" >.git/info/attributes &&
    + 	git add test.utf32 &&
      
    - test_expect_success 'pre-rebase hook stops rebase' '
     
    - ## t/t3413-rebase-hook.sh ##
    -@@ t/t3413-rebase-hook.sh: test_expect_success 'rebase -i' '
    - '
    + ## t/t5000-tar-tree.sh ##
    +@@ t/t5000-tar-tree.sh: commit id embedding:
      
    - test_expect_success 'setup pre-rebase hook' '
    --	mkdir -p .git/hooks &&
    --	cat >.git/hooks/pre-rebase <<EOF &&
    --#!$SHELL_PATH
    --echo "\$1,\$2" >.git/PRE-REBASE-INPUT
    --EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	echo "$1,$2" >.git/PRE-REBASE-INPUT
    -+	EOF
      '
      
    - test_expect_success 'pre-rebase hook gets correct input (1)' '
    -@@ t/t3413-rebase-hook.sh: test_expect_success 'pre-rebase hook gets correct input (6)' '
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + SUBSTFORMAT=%H%n
    +@@ t/t5000-tar-tree.sh: test_expect_success 'populate workdir' '
    + test_expect_success \
    +     'add ignored file' \
    +     'echo ignore me >a/ignored &&
    ++     mkdir .git/info &&
    +      echo ignored export-ignore >.git/info/attributes'
    + 
    + test_expect_success 'add files to repository' '
    +@@ t/t5000-tar-tree.sh: test_expect_success 'setup export-subst' '
      '
      
    - test_expect_success 'setup pre-rebase hook that fails' '
    --	mkdir -p .git/hooks &&
    --	cat >.git/hooks/pre-rebase <<EOF &&
    --#!$SHELL_PATH
    --false
    --EOF
    --	chmod +x .git/hooks/pre-rebase
    -+	write_hook pre-rebase <<-\EOF
    -+	false
    -+	EOF
    + test_expect_success 'create bare clone' '
    +-	git clone --bare . bare.git &&
    ++	git clone --template= --bare . bare.git &&
    ++	mkdir bare.git/info &&
    + 	cp .git/info/attributes bare.git/info/attributes
      '
      
    - test_expect_success 'pre-rebase hook stops rebase (1)' '
    -
    - ## t/t5401-update-hooks.sh ##
    -@@ t/t5401-update-hooks.sh: test_expect_success setup '
    - 	git clone --bare ./. victim.git &&
    - 	GIT_DIR=victim.git git update-ref refs/heads/tofail $commit1 &&
    - 	git update-ref refs/heads/main $commit1 &&
    --	git update-ref refs/heads/tofail $commit0
    --'
    -+	git update-ref refs/heads/tofail $commit0 &&
    - 
    --cat >victim.git/hooks/pre-receive <<'EOF'
    --#!/bin/sh
    --printf %s "$@" >>$GIT_DIR/pre-receive.args
    --cat - >$GIT_DIR/pre-receive.stdin
    --echo STDOUT pre-receive
    --echo STDERR pre-receive >&2
    --EOF
    --chmod u+x victim.git/hooks/pre-receive
    -+	write_hook -C victim.git pre-receive <<-\EOF &&
    -+	printf %s "$@" >>$GIT_DIR/pre-receive.args
    -+	cat - >$GIT_DIR/pre-receive.stdin
    -+	echo STDOUT pre-receive
    -+	echo STDERR pre-receive >&2
    -+	EOF
    - 
    --cat >victim.git/hooks/update <<'EOF'
    --#!/bin/sh
    --echo "$@" >>$GIT_DIR/update.args
    --read x; printf %s "$x" >$GIT_DIR/update.stdin
    --echo STDOUT update $1
    --echo STDERR update $1 >&2
    --test "$1" = refs/heads/main || exit
    --EOF
    --chmod u+x victim.git/hooks/update
    -+	write_hook -C victim.git update <<-\EOF &&
    -+	echo "$@" >>$GIT_DIR/update.args
    -+	read x; printf %s "$x" >$GIT_DIR/update.stdin
    -+	echo STDOUT update $1
    -+	echo STDERR update $1 >&2
    -+	test "$1" = refs/heads/main || exit
    -+	EOF
    - 
    --cat >victim.git/hooks/post-receive <<'EOF'
    --#!/bin/sh
    --printf %s "$@" >>$GIT_DIR/post-receive.args
    --cat - >$GIT_DIR/post-receive.stdin
    --echo STDOUT post-receive
    --echo STDERR post-receive >&2
    --EOF
    --chmod u+x victim.git/hooks/post-receive
    -+	write_hook -C victim.git post-receive <<-\EOF &&
    -+	printf %s "$@" >>$GIT_DIR/post-receive.args
    -+	cat - >$GIT_DIR/post-receive.stdin
    -+	echo STDOUT post-receive
    -+	echo STDERR post-receive >&2
    -+	EOF
    - 
    --cat >victim.git/hooks/post-update <<'EOF'
    --#!/bin/sh
    --echo "$@" >>$GIT_DIR/post-update.args
    --read x; printf %s "$x" >$GIT_DIR/post-update.stdin
    --echo STDOUT post-update
    --echo STDERR post-update >&2
    --EOF
    --chmod u+x victim.git/hooks/post-update
    -+	write_hook -C victim.git post-update <<-\EOF
    -+	echo "$@" >>$GIT_DIR/post-update.args
    -+	read x; printf %s "$x" >$GIT_DIR/post-update.stdin
    -+	echo STDOUT post-update
    -+	echo STDERR post-update >&2
    -+	EOF
    -+'
    - 
    - test_expect_success push '
    - 	test_must_fail git send-pack --force ./victim.git \
     
    - ## t/t5402-post-merge-hook.sh ##
    -@@ t/t5402-post-merge-hook.sh: test_expect_success setup '
    - 	GIT_DIR=clone2/.git git update-index --add a
    + ## t/t5001-archive-attr.sh ##
    +@@
    + 
    + test_description='git archive attribute tests'
    + 
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + SUBSTFORMAT='%H (%h)%n'
    +@@ t/t5001-archive-attr.sh: extract_tar_to_dir () {
    + 
    + test_expect_success 'setup' '
    + 	echo ignored >ignored &&
    ++	mkdir .git/info &&
    + 	echo ignored export-ignore >>.git/info/attributes &&
    + 	git add ignored &&
    + 
    +@@ t/t5001-archive-attr.sh: test_expect_success 'setup' '
    + 
    + 	git commit -m. &&
    + 
    +-	git clone --bare . bare &&
    ++	git clone --template= --bare . bare &&
    ++	mkdir bare/info &&
    + 	cp .git/info/attributes bare/info/attributes
      '
      
    --for clone in 1 2; do
    --	cat >clone${clone}/.git/hooks/post-merge <<'EOF'
    --#!/bin/sh
    --echo $@ >> $GIT_DIR/post-merge.args
    --EOF
    --	chmod u+x clone${clone}/.git/hooks/post-merge
    --done
    -+test_expect_success 'setup clone hooks' '
    -+	test_when_finished "rm -f hook" &&
    -+	cat >hook <<-\EOF &&
    -+	echo $@ >> $GIT_DIR/post-merge.args
    -+	EOF
    -+
    -+	write_hook -C clone1 post-merge <hook &&
    -+	write_hook -C clone2 post-merge <hook
    -+'
    - 
    - test_expect_success 'post-merge does not run for up-to-date ' '
    - 	GIT_DIR=clone1/.git git merge $commit0 &&
     
    - ## t/t5407-post-rewrite-hook.sh ##
    -@@ t/t5407-post-rewrite-hook.sh: test_expect_success 'setup' '
    - 	git checkout A^0 &&
    - 	test_commit E bar E &&
    - 	test_commit F foo F &&
    --	git checkout main
    --'
    -+	git checkout main &&
    - 
    --cat >.git/hooks/post-rewrite <<EOF
    --#!/bin/sh
    --echo \$@ > "$TRASH_DIRECTORY"/post-rewrite.args
    --cat > "$TRASH_DIRECTORY"/post-rewrite.data
    --EOF
    --chmod u+x .git/hooks/post-rewrite
    -+	write_hook post-rewrite <<-EOF
    -+	echo \$@ > "$TRASH_DIRECTORY"/post-rewrite.args
    -+	cat > "$TRASH_DIRECTORY"/post-rewrite.data
    -+	EOF
    -+'
    - 
    - clear_hook_input () {
    - 	rm -f post-rewrite.args post-rewrite.data
    + ## t/t5002-archive-attr-pattern.sh ##
    +@@
    + test_description='git archive attribute pattern tests'
    + 
    + TEST_PASSES_SANITIZE_LEAK=true
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + test_expect_exists() {
    +@@ t/t5002-archive-attr-pattern.sh: test_expect_missing() {
    + 
    + test_expect_success 'setup' '
    + 	echo ignored >ignored &&
    ++	mkdir .git/info &&
    + 	echo ignored export-ignore >>.git/info/attributes &&
    + 	git add ignored &&
    + 
    +@@ t/t5002-archive-attr-pattern.sh: test_expect_success 'setup' '
    + 
    + 	git commit -m. &&
    + 
    +-	git clone --bare . bare &&
    ++	git clone --template= --bare . bare &&
    ++	mkdir bare/info &&
    + 	cp .git/info/attributes bare/info/attributes
    + '
    + 
     
    - ## t/t5516-fetch-push.sh ##
    -@@ t/t5516-fetch-push.sh: mk_test_with_hooks() {
    - 	(
    - 		cd "$repo_name" &&
    - 		mkdir .git/hooks &&
    --		cd .git/hooks &&
    - 
    --		cat >pre-receive <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook pre-receive <<-'EOF' &&
    - 		cat - >>pre-receive.actual
    - 		EOF
    - 
    --		cat >update <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook update <<-'EOF' &&
    - 		printf "%s %s %s\n" "$@" >>update.actual
    - 		EOF
    - 
    --		cat >post-receive <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook post-receive <<-'EOF' &&
    - 		cat - >>post-receive.actual
    - 		EOF
    - 
    --		cat >post-update <<-'EOF' &&
    --		#!/bin/sh
    -+		write_hook post-update <<-'EOF'
    - 		for ref in "$@"
    - 		do
    - 			printf "%s\n" "$ref" >>post-update.actual
    - 		done
    - 		EOF
    --
    --		chmod +x pre-receive update post-receive post-update
    - 	)
    - }
    + ## t/t5003-archive-zip.sh ##
    +@@
    + 
    + test_description='git archive --format=zip test'
    + 
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    + SUBSTFORMAT=%H%n
    +@@ t/t5003-archive-zip.sh: test_expect_success 'prepare file list' '
    + test_expect_success \
    +     'add ignored file' \
    +     'echo ignore me >a/ignored &&
    ++     mkdir .git/info &&
    +      echo ignored export-ignore >.git/info/attributes'
    + 
    + test_expect_success 'add files to repository' '
    +@@ t/t5003-archive-zip.sh: test_expect_success 'setup export-subst and diff attributes' '
    + '
    + 
    + test_expect_success 'create bare clone' '
    +-	git clone --bare . bare.git &&
    ++	git clone --template= --bare . bare.git &&
    ++	mkdir bare.git/info &&
    + 	cp .git/info/attributes bare.git/info/attributes &&
    + 	# Recreate our changes to .git/config rather than just copying it, as
    + 	# we do not want to clobber core.bare or other settings.
     
    - ## t/t5541-http-push-smart.sh ##
    -@@ t/t5541-http-push-smart.sh: test_expect_success 'create and delete remote branch' '
    - 	test_must_fail git show-ref --verify refs/remotes/origin/dev
    + ## t/t7814-grep-recurse-submodules.sh ##
    +@@ t/t7814-grep-recurse-submodules.sh: This test verifies the recurse-submodules feature correctly greps across
    + submodules.
      '
      
    --cat >"$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update" <<EOF
    --#!/bin/sh
    -+write_hook -C "$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git" update <<\EOF
    - exit 1
    - EOF
    --chmod a+x "$HTTPD_DOCUMENT_ROOT_PATH/test_repo.git/hooks/update"
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + 
    + GIT_TEST_FATAL_REGISTER_SUBMODULE_ODB=1
    +@@ t/t7814-grep-recurse-submodules.sh: test_expect_failure 'grep --textconv: superproject .gitattributes (from index) d
    + test_expect_failure 'grep --textconv: superproject .git/info/attributes does not affect submodules' '
    + 	reset_and_clean &&
    + 	test_config_global diff.d2x.textconv "sed -e \"s/d/x/\"" &&
    +-	super_attr="$(git rev-parse --git-path info/attributes)" &&
    ++	super_info="$(git rev-parse --git-path info)" &&
    ++	super_attr="$super_info/attributes" &&
    + 	test_when_finished "rm -f \"$super_attr\"" &&
    ++	mkdir "$super_info" &&
    + 	echo "a diff=d2x" >"$super_attr" &&
    + 
    + 	cat >expect <<-\EOF &&
    +@@ t/t7814-grep-recurse-submodules.sh: test_expect_failure 'grep --textconv correctly reads submodule .git/info/attribu
    + 	reset_and_clean &&
    + 	test_config_global diff.d2x.textconv "sed -e \"s/d/x/\"" &&
    + 
    +-	submodule_attr="$(git -C submodule rev-parse --path-format=absolute --git-path info/attributes)" &&
    ++	submodule_info="$(git -C submodule rev-parse --path-format=absolute --git-path info)" &&
    ++	submodule_attr="$submodule_info/attributes" &&
    + 	test_when_finished "rm -f \"$submodule_attr\"" &&
    + 	echo "a diff=d2x" >"$submodule_attr" &&
      
    - cat >exp <<EOF
    - remote: error: hook declined to update refs/heads/dev2
    -
    - ## t/t5601-clone.sh ##
    -@@ t/t5601-clone.sh: test_expect_success 'clone from hooks' '
    - 	cd .. &&
    - 	git init r1 &&
    - 	cd r1 &&
    --	cat >.git/hooks/pre-commit <<-\EOF &&
    --	#!/bin/sh
    -+	write_hook pre-commit <<-\EOF &&
    - 	git clone ../r0 ../r2
    - 	exit 1
    - 	EOF
    --	chmod u+x .git/hooks/pre-commit &&
    - 	: >file &&
    - 	git add file &&
    - 	test_must_fail git commit -m invoke-hook &&
 1:  5526d3dc838 !  5:  b9f667bf292 t0001: fix gaps in "TEMPLATE DIRECTORY" coverage
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    t0001: fix gaps in "TEMPLATE DIRECTORY" coverage
    +    tests: don't assume a .git/info for .git/info/refs
     
    -    Add tests to assert that the priority order described in the "TEMPLATE
    -    DIRECTORY" section in the "init" documentation is correct.
    +    Change those tests that assumed that a .git/info directory would be
    +    created for them when writing .git/info/refs to explicitly create the
    +    directory by using the "--template=" argument to "git init".
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/t0001-init.sh ##
    -@@ t/t0001-init.sh: test_expect_success 'reinit' '
    - 	test_must_be_empty again/err2
    + ## t/t1301-shared-repo.sh ##
    +@@ t/t1301-shared-repo.sh: done
    + test_expect_success 'shared=all' '
    + 	mkdir sub &&
    + 	cd sub &&
    +-	git init --shared=all &&
    ++	git init --template= --shared=all &&
    + 	test 2 = $(git config core.sharedrepository)
      '
      
    -+setup_template_priority() {
    -+	test_when_finished "rm -rf template" &&
    -+	mkdir template &&
    -+	touch template/file &&
    -+
    -+	test_when_finished "rm -rf template2" &&
    -+	mkdir template2 &&
    -+	touch template2/file2 &&
    -+
    -+	# Created by the caller
    -+	test_when_finished "rm -rf repo"
    -+}
    -+
    -+test_expect_success 'usage priority: --template only' '
    -+	setup_template_priority &&
    -+	git init --template=template repo &&
    -+	test_path_is_file repo/.git/file
    -+'
    -+
    -+test_expect_success 'usage priority: --template takes precedence over GIT_TEMPLATE_DIR' '
    -+	setup_template_priority &&
    -+	GIT_TEMPLATE_DIR="$PWD/template2" git init --template=template repo &&
    -+	test_path_is_file repo/.git/file
    -+'
    -+
    -+test_expect_success 'usage priority: --template takes precedence over init.templateDir' '
    -+	setup_template_priority &&
    -+	git -c init.templateDir="$PWD/template2" init --template=template repo &&
    -+	test_path_is_file repo/.git/file
    -+'
    -+
    -+test_expect_success 'usage priority: --no-template takes precedence over init.templateDir' '
    -+	setup_template_priority &&
    -+	git -c init.templateDir="$PWD/template" init --no-template repo &&
    -+	test_path_is_missing repo/.git/file
    -+'
    -+
    -+test_expect_success 'usage priority: --no-template takes precedence over GIT_TEMPLATE_DIR' '
    -+	setup_template_priority &&
    -+	GIT_TEMPLATE_DIR="$PWD/template" git init --no-template repo &&
    -+	test_path_is_missing repo/.git/file
    -+'
    -+
    -+test_expect_success 'usage priority: GIT_NO_TEMPLATE_DIR=true takes precedence over GIT_TEMPLATE_DIR' '
    -+	setup_template_priority &&
    -+	GIT_TEMPLATE_DIR="$PWD/template" GIT_NO_TEMPLATE_DIR=true git init repo &&
    -+	test_path_is_missing repo/.git/file
    -+'
    -+
    - test_expect_success 'init with --template' '
    - 	mkdir template-source &&
    - 	echo content >template-source/file &&
    -@@ t/t0001-init.sh: test_expect_success 'init with --template (blank)' '
    - 	test_path_is_missing template-blank/.git/info/exclude
    - '
    +@@ t/t1301-shared-repo.sh: test_expect_success POSIXPERM 'update-server-info honors core.sharedRepository'
    + 	git add a1 &&
    + 	test_tick &&
    + 	git commit -m a1 &&
    ++	mkdir .git/info &&
    + 	umask 0277 &&
    + 	git update-server-info &&
    + 	actual="$(ls -l .git/info/refs)" &&
    +
    + ## t/t5550-http-fetch-dumb.sh ##
    +@@ t/t5550-http-fetch-dumb.sh: test_expect_success 'set up evil alternates scheme' '
    + 	sha1=$(git -C "$victim" rev-parse HEAD) &&
      
    -+no_templatedir_env () {
    -+	sane_unset GIT_TEMPLATE_DIR &&
    -+	NO_SET_GIT_TEMPLATE_DIR=t &&
    -+	export NO_SET_GIT_TEMPLATE_DIR
    -+}
    -+
    - init_no_templatedir_env () {
    - 	(
    --		sane_unset GIT_TEMPLATE_DIR &&
    --		NO_SET_GIT_TEMPLATE_DIR=t &&
    --		export NO_SET_GIT_TEMPLATE_DIR &&
    -+		no_templatedir_env &&
    - 		git init "$1"
    - 	)
    - }
    -@@ t/t0001-init.sh: test_expect_success 'init with init.templatedir using ~ expansion' '
    - 	test_cmp templatedir-source/file templatedir-expansion/.git/file
    + 	evil=$HTTPD_DOCUMENT_ROOT_PATH/evil.git &&
    +-	git init --bare "$evil" &&
    ++	git init --template= --bare "$evil" &&
    ++	mkdir "$evil/info" &&
    + 	# do this by hand to avoid object existence check
    + 	printf "%s\\t%s\\n" $sha1 refs/heads/main >"$evil/info/refs"
      '
    - 
    -+test_expect_success 'init with init.templateDir=does-not-exist' '
    -+	test_when_finished "rm -rf repo" &&
    -+	(
    -+		no_templatedir_env &&
    -+
    -+		cat >expect <<-\EOF &&
    -+		warning: templates not found in does-not-exist
    -+		EOF
    -+		git -c init.templateDir=does-not-exist init repo 2>actual &&
    -+		test_cmp expect actual
    -+	)
    -+'
    -+
    -+test_expect_success 'init with init.templateDir=[bool]' '
    -+	test_when_finished "rm -rf repo" &&
    -+	(
    -+		no_templatedir_env &&
    -+
    -+		cat >expect <<-\EOF &&
    -+		warning: templates not found in false
    -+		EOF
    -+		git -c init.templateDir=false init repo 2>actual &&
    -+		test_cmp expect actual
    -+	)
    -+'
    -+
    - test_expect_success 'init --bare/--shared overrides system/global config' '
    - 	test_config_global core.bare false &&
    - 	test_config_global core.sharedRepository 0640 &&
 2:  ef2b67768cf <  -:  ----------- init: split out template population from create_default_files()
 3:  784b7947512 <  -:  ----------- init: unconditionally create the "info" directory
 5:  6bbb39f13fc <  -:  ----------- init & clone: add a --no-template option
 6:  2f478f7ba4a <  -:  ----------- init & clone: add init.templateDir=[bool]
 9:  d97122f5fd8 <  -:  ----------- t5540: don't rely on "hook/post-update.sample"
 -:  ----------- >  6:  29da5a3d431 tests: don't assume a .git/info for .git/info/exclude
10:  ca55471d134 !  7:  0149c80f09c test-lib-functions: add and use a "write_hook" wrapper
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    test-lib-functions: add and use a "write_hook" wrapper
    +    tests: don't assume a .git/info for .git/info/sparse-checkout
     
    -    Add a "write_hook" wrapper for the common case of "write_script
    -    .git/hooks/<NAME>". This also accepts a "-C" option like
    -    "test_commit". Let's convert various trivial cases of "write_script"
    -    over to it.
    -
    -    For now this doesn't have much of an advantage, but in a subsequent
    -    commit we'll implicitly create the leading "hooks" directory. This
    -    will help us get rid of our --template dependency for "hooks".
    +    Change those tests that assumed that a .git/info directory would be
    +    created for them when writing .git/info/sparse-checkout to explicitly
    +    create the directory by setting "TEST_CREATE_REPO_NO_TEMPLATE=1"
    +    before sourcing test-lib.sh, and using the "--template=" argument to
    +    "git clone".
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## t/t1416-ref-transaction-hooks.sh ##
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success setup '
    - test_expect_success 'hook allows updating ref if successful' '
    - 	test_when_finished "rm .git/hooks/reference-transaction" &&
    - 	git reset --hard PRE &&
    --	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    - 		echo "$*" >>actual
    - 	EOF
    - 	cat >expect <<-EOF &&
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook allows updating ref if successful' '
    - test_expect_success 'hook aborts updating ref in prepared state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction" &&
    - 	git reset --hard PRE &&
    --	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    - 		if test "$1" = prepared
    - 		then
    - 			exit 1
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook aborts updating ref in prepared state' '
    - test_expect_success 'hook gets all queued updates in prepared state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    - 	git reset --hard PRE &&
    --	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    - 		if test "$1" = prepared
    - 		then
    - 			while read -r line
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook gets all queued updates in prepared state' '
    - test_expect_success 'hook gets all queued updates in committed state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    - 	git reset --hard PRE &&
    --	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    - 		if test "$1" = committed
    - 		then
    - 			while read -r line
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'hook gets all queued updates in committed state' '
    - test_expect_success 'hook gets all queued updates in aborted state' '
    - 	test_when_finished "rm .git/hooks/reference-transaction actual" &&
    - 	git reset --hard PRE &&
    --	write_script .git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook reference-transaction <<-\EOF &&
    - 		if test "$1" = aborted
    - 		then
    - 			while read -r line
    -@@ t/t1416-ref-transaction-hooks.sh: test_expect_success 'interleaving hook calls succeed' '
    - 
    - 	git init --bare target-repo.git &&
    + ## t/t1011-read-tree-sparse-checkout.sh ##
    +@@ t/t1011-read-tree-sparse-checkout.sh: test_description='sparse checkout tests
    +   A	init.t
    + '
      
    --	write_script target-repo.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C target-repo.git reference-transaction <<-\EOF &&
    - 		echo $0 "$@" >>actual
    - 	EOF
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
    + . "$TEST_DIRECTORY"/lib-read-tree.sh
      
    --	write_script target-repo.git/hooks/update <<-\EOF &&
    -+	write_hook -C target-repo.git update <<-\EOF &&
    - 		echo $0 "$@" >>actual
    - 	EOF
    +@@ t/t1011-read-tree-sparse-checkout.sh: test_expect_success 'read-tree without .git/info/sparse-checkout' '
    + '
      
    + test_expect_success 'read-tree with .git/info/sparse-checkout but disabled' '
    ++	mkdir .git/info &&
    + 	echo >.git/info/sparse-checkout &&
    + 	read_tree_u_must_succeed -m -u HEAD &&
    + 	git ls-files -t >result &&
     
    - ## t/t5406-remote-rejects.sh ##
    -@@ t/t5406-remote-rejects.sh: test_description='remote push rejects are reported by client'
    - . ./test-lib.sh
    + ## t/t1090-sparse-checkout-scope.sh ##
    +@@ t/t1090-sparse-checkout-scope.sh: test_description='sparse checkout scope tests'
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    - test_expect_success 'setup' '
    --	write_script .git/hooks/update <<-\EOF &&
    -+	write_hook update <<-\EOF &&
    - 	exit 1
    - 	EOF
    - 	echo 1 >file &&
    -
    - ## t/t5409-colorize-remote-messages.sh ##
    -@@ t/t5409-colorize-remote-messages.sh: test_description='remote messages are colorized on the client'
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
      . ./test-lib.sh
      
      test_expect_success 'setup' '
    --	write_script .git/hooks/update <<-\EOF &&
    -+	write_hook update <<-\EOF &&
    - 	echo error: error
    - 	echo ERROR: also highlighted
    - 	echo hint: hint
    -
    - ## t/t5411-proc-receive-hook.sh ##
    -@@ t/t5411-proc-receive-hook.sh: setup_upstream_and_workbench () {
    - 		TAG=$(git -C workbench rev-parse v123) &&
    - 
    - 		# setup pre-receive hook
    --		write_script upstream.git/hooks/pre-receive <<-\EOF &&
    -+		write_hook -C upstream.git pre-receive <<-\EOF &&
    - 		exec >&2
    - 		echo "# pre-receive hook"
    - 		while read old new ref
    -@@ t/t5411-proc-receive-hook.sh: setup_upstream_and_workbench () {
    - 		EOF
    - 
    - 		# setup post-receive hook
    --		write_script upstream.git/hooks/post-receive <<-\EOF &&
    -+		write_hook -C upstream.git post-receive <<-\EOF &&
    - 		exec >&2
    - 		echo "# post-receive hook"
    - 		while read old new ref
    +@@ t/t1090-sparse-checkout-scope.sh: test_expect_success 'create feature branch' '
    + 
    + test_expect_success 'perform sparse checkout of main' '
    + 	git config --local --bool core.sparsecheckout true &&
    ++	mkdir .git/info &&
    + 	echo "!/*" >.git/info/sparse-checkout &&
    + 	echo "/a" >>.git/info/sparse-checkout &&
    + 	echo "/c" >>.git/info/sparse-checkout &&
    +@@ t/t1090-sparse-checkout-scope.sh: test_expect_success 'skip-worktree on files outside sparse patterns' '
    + 
    + test_expect_success 'in partial clone, sparse checkout only fetches needed blobs' '
    + 	test_create_repo server &&
    +-	git clone "file://$(pwd)/server" client &&
    ++	git clone --template= "file://$(pwd)/server" client &&
    + 
    + 	test_config -C server uploadpack.allowfilter 1 &&
    + 	test_config -C server uploadpack.allowanysha1inwant 1 &&
    +@@ t/t1090-sparse-checkout-scope.sh: test_expect_success 'in partial clone, sparse checkout only fetches needed blobs
    + 	git -C server commit -m message &&
    + 
    + 	test_config -C client core.sparsecheckout 1 &&
    ++	mkdir client/.git/info &&
    + 	echo "!/*" >client/.git/info/sparse-checkout &&
    + 	echo "/a" >>client/.git/info/sparse-checkout &&
    + 	git -C client fetch --filter=blob:none origin &&
     
    - ## t/t5510-fetch.sh ##
    -@@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic executes a single reference transaction only
    - 	EOF
    + ## t/t2018-checkout-branch.sh ##
    +@@
      
    - 	rm -f atomic/actual &&
    --	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic reference-transaction <<-\EOF &&
    - 		( echo "$*" && cat ) >>actual
    - 	EOF
    + test_description='checkout'
      
    -@@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic aborts all reference updates if hook aborts'
    - 	EOF
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    - 	rm -f atomic/actual &&
    --	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic/.git reference-transaction <<-\EOF &&
    - 		( echo "$*" && cat ) >>actual
    - 		exit 1
    - 	EOF
    -@@ t/t5510-fetch.sh: test_expect_success 'fetch --atomic --append appends to FETCH_HEAD' '
    - 	test_line_count = 2 atomic/.git/FETCH_HEAD &&
    - 	cp atomic/.git/FETCH_HEAD expected &&
    + # Arguments: [!] <branch> <oid> [<checkout options>]
    +@@ t/t2018-checkout-branch.sh: test_expect_success 'checkout -b to a new branch preserves mergeable changes des
    + 		git checkout branch1-scratch &&
    + 		test_might_fail git branch -D branch3 &&
    + 		git config core.sparseCheckout false &&
    +-		rm .git/info/sparse-checkout" &&
    ++		rm -rf .git/info" &&
      
    --	write_script atomic/.git/hooks/reference-transaction <<-\EOF &&
    -+	write_hook -C atomic reference-transaction <<-\EOF &&
    - 		exit 1
    - 	EOF
    + 	test_commit file2 &&
      
    -
    - ## t/t5516-fetch-push.sh ##
    -@@ t/t5516-fetch-push.sh: test_expect_success 'updateInstead with push-to-checkout hook' '
    - 		git reset --hard HEAD^^ &&
    - 		git tag initial &&
    - 		git config receive.denyCurrentBranch updateInstead &&
    --		write_script .git/hooks/push-to-checkout <<-\EOF
    -+		write_hook push-to-checkout <<-\EOF
    - 		echo >&2 updating from $(git rev-parse HEAD)
    - 		echo >&2 updating to "$1"
    + 	echo stuff >>file1 &&
    ++	mkdir .git/info &&
    + 	echo file2 >.git/info/sparse-checkout &&
    + 	git config core.sparseCheckout true &&
      
    -@@ t/t5516-fetch-push.sh: test_expect_success 'updateInstead with push-to-checkout hook' '
    - 	(
    - 		cd void &&
    - 		git config receive.denyCurrentBranch updateInstead &&
    --		write_script .git/hooks/push-to-checkout <<-\EOF
    -+		write_hook push-to-checkout <<-\EOF
    - 		if git rev-parse --quiet --verify HEAD
    - 		then
    - 			has_head=yes
     
    - ## t/t5521-pull-options.sh ##
    -@@ t/t5521-pull-options.sh: test_expect_success 'git pull --no-verify flag passed to merge' '
    - 	git init src &&
    - 	test_commit -C src one &&
    - 	git clone src dst &&
    --	write_script dst/.git/hooks/commit-msg <<-\EOF &&
    -+	write_hook -C dst commit-msg <<-\EOF &&
    - 	false
    - 	EOF
    - 	test_commit -C src two &&
    -@@ t/t5521-pull-options.sh: test_expect_success 'git pull --no-verify --verify passed to merge' '
    - 	git init src &&
    - 	test_commit -C src one &&
    - 	git clone src dst &&
    --	write_script dst/.git/hooks/commit-msg <<-\EOF &&
    -+	write_hook -C dst commit-msg <<-\EOF &&
    - 	false
    - 	EOF
    - 	test_commit -C src two &&
    -
    - ## t/t5547-push-quarantine.sh ##
    -@@ t/t5547-push-quarantine.sh: test_description='check quarantine of objects during push'
    + ## t/t3507-cherry-pick-conflict.sh ##
    +@@ t/t3507-cherry-pick-conflict.sh: test_description='test cherry-pick and revert with conflicts
    + GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    + export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
      
    - test_expect_success 'create picky dest repo' '
    - 	git init --bare dest.git &&
    --	write_script dest.git/hooks/pre-receive <<-\EOF
    -+	write_hook -C dest.git pre-receive <<-\EOF
    - 	while read old new ref; do
    - 		test "$(git log -1 --format=%s $new)" = reject && exit 1
    - 	done
    -@@ t/t5547-push-quarantine.sh: test_expect_success 'push to repo path with path separator (colon)' '
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    - test_expect_success 'updating a ref from quarantine is forbidden' '
    - 	git init --bare update.git &&
    --	write_script update.git/hooks/pre-receive <<-\EOF &&
    -+	write_hook -C update.git pre-receive <<-\EOF &&
    - 	read old new refname
    - 	git update-ref refs/heads/unrelated $new
    - 	exit 1
    + pristine_detach () {
    +@@ t/t3507-cherry-pick-conflict.sh: test_expect_success 'cherry-pick preserves sparse-checkout' '
    + 		echo \"/*\" >.git/info/sparse-checkout
    + 		git read-tree --reset -u HEAD
    + 		rm .git/info/sparse-checkout" &&
    ++	mkdir .git/info &&
    + 	echo /unrelated >.git/info/sparse-checkout &&
    + 	git read-tree --reset -u HEAD &&
    + 	test_must_fail git cherry-pick -Xours picked>actual &&
     
    - ## t/t5548-push-porcelain.sh ##
    -@@ t/t5548-push-porcelain.sh: run_git_push_porcelain_output_test() {
    - 	'
    + ## t/t6435-merge-sparse.sh ##
    +@@
      
    - 	test_expect_success "prepare pre-receive hook ($PROTOCOL)" '
    --		write_script "$upstream/hooks/pre-receive" <<-EOF
    -+		write_hook -C "$upstream" pre-receive <<-EOF
    - 		exit 1
    - 		EOF
    - 	'
    -
    - ## t/t6500-gc.sh ##
    -@@ t/t6500-gc.sh: test_expect_success 'pre-auto-gc hook can stop auto gc' '
    - 	git init pre-auto-gc-hook &&
    - 	(
    - 		cd pre-auto-gc-hook &&
    --		write_script ".git/hooks/pre-auto-gc" <<-\EOF &&
    -+		write_hook pre-auto-gc <<-\EOF &&
    - 		echo >&2 no gc for you &&
    - 		exit 1
    - 		EOF
    -@@ t/t6500-gc.sh: test_expect_success 'pre-auto-gc hook can stop auto gc' '
    + test_description='merge with sparse files'
      
    - 	(
    - 		cd pre-auto-gc-hook &&
    --		write_script ".git/hooks/pre-auto-gc" <<-\EOF &&
    -+		write_hook pre-auto-gc <<-\EOF &&
    - 		echo >&2 will gc for you &&
    - 		exit 0
    - 		EOF
    -
    - ## t/test-lib-functions.sh ##
    -@@ t/test-lib-functions.sh: write_script () {
    - 	chmod +x "$1"
    - }
    ++TEST_CREATE_REPO_NO_TEMPLATE=1
    + . ./test-lib.sh
      
    -+## Usage: write-hook pre-receive
    -+## Usage: write-hook -C some-dir pre-receive
    -+write_hook () {
    -+	indir= &&
    -+	while test $# != 0
    -+	do
    -+		case "$1" in
    -+		-C)
    -+			indir="$2"
    -+			shift
    -+			;;
    -+		-*)
    -+			BUG "invalid write_hook: $1"
    -+			;;
    -+		*)
    -+			break
    -+			;;
    -+		esac &&
    -+		shift
    -+	done &&
    -+	git_dir=$(git -C "$indir" rev-parse --absolute-git-dir) &&
    -+	hook_dir="$git_dir/hooks" &&
    -+	hook_file="$hook_dir/$1"
    -+	write_script "$hook_file"
    -+}
    -+
    - # Use test_set_prereq to tell that a particular prerequisite is available.
    - # The prerequisite can later be checked for in two ways:
    - #
    + # test_file $filename $content
    +@@ t/t6435-merge-sparse.sh: test_expect_success 'setup' '
    + 	git rm modify_delete &&
    + 	test_commit_this ours &&
    + 	git config core.sparseCheckout true &&
    ++	mkdir .git/info &&
    + 	echo "/checked-out" >.git/info/sparse-checkout &&
    + 	git reset --hard &&
    + 	test_must_fail git merge theirs
    +
    + ## t/t7418-submodule-sparse-gitmodules.sh ##
    +@@ t/t7418-submodule-sparse-gitmodules.sh: test_expect_success 'sparse checkout setup which hides .gitmodules' '
    + 		test_tick &&
    + 		git commit -m "Add submodule"
    + 	) &&
    +-	git clone upstream super &&
    ++	git clone --template= upstream super &&
    + 	(cd super &&
    ++		mkdir .git/info &&
    + 		cat >.git/info/sparse-checkout <<-\EOF &&
    + 		/*
    + 		!/.gitmodules
12:  2acbaa77f8d <  -:  ----------- tests: migrate miscellaneous "write_script" to "write_hooks"
13:  d021a5981a1 <  -:  ----------- tests: don't depend on template-created .git/hooks
-- 
2.36.1.1119.g5a713b43bd4

