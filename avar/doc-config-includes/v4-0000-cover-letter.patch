From e132e1ec481a4ada13c541ff3b1241ae508ec22b Mon Sep 17 00:00:00 2001
Message-Id: <cover-v4-00.34-00000000000-20211117T101025Z-avarab@gmail.com>
In-Reply-To: <cover-v3-00.23-00000000000-20211116T114334Z-avarab@gmail.com>
References: <cover-v3-00.23-00000000000-20211116T114334Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Wed, 17 Nov 2021 11:10:25 +0100
Subject: [PATCH v4 00/34] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (34):
  gc docs: reword and move "CONFIGURATION" section
  add docs: include a CONFIGURATION section
  branch docs: include the branch.* section from config
  only add heading
  no dupe in apply, manually checked
  todo rest commit
  include straightforward
  git-config doc: split uploadpack.txt into two included files
  git-config doc: split off core.bigFileThreshold into its own file
  pack-objects doc: include relevant git-config(1) docs
  githooks doc: add a reference to uploadpack.packObjectsHook
  git difftool special case/, needs rest header
  clone needs init/clone
  fetch, add remote, some are not for fetch
  remote, reword?
  remote: forgot remotes.txt
  git-repack doc: remove discussion of ancient caveat
  merged repack and pack with a template, just the exception now
  rerere
  reset
  git-send-email doc: discuss all config options in git-config(1)
  show branch, not really justifiable, for completeness
  git-grep documentation: de-duplicate configuration sections
  git-config doc: split up config/color.txt into sub-includes
  start migrate notes
  moar notes, squash
  final fixup to notes saga
  unify the git log config
  wip link to now-split color files
  notes: link to git-config, not git-log for notes config
  Add and prefer color.logDecorate synonym, add warning?
  generate config list from new files, need this as soon as I do the
    split
  fixup rest include path
  fixup include path to includes/ for all

 Documentation/Makefile                        |   2 +
 Documentation/config/color.txt                | 155 ++----------------
 Documentation/config/color/blame.txt          |  22 +++
 Documentation/config/color/branch.txt         |  13 ++
 Documentation/config/color/diff.txt           |  27 +++
 Documentation/config/color/grep.txt           |  70 ++++++++
 Documentation/config/color/log.txt            |   9 +
 Documentation/config/color/push.txt           |   8 +
 Documentation/config/color/showbranch.txt     |   6 +
 Documentation/config/color/status.txt         |  20 +++
 Documentation/config/core.txt                 |  13 +-
 .../config/core/bigFileThreshold.txt          |  12 ++
 Documentation/config/diff.txt                 |  15 --
 Documentation/config/diff/difftool.txt        |  14 ++
 Documentation/config/difftool.txt             |   7 +
 Documentation/config/gc.txt                   |  12 +-
 Documentation/config/gc/rerere.txt            |  11 ++
 Documentation/config/grep.txt                 |   7 +-
 Documentation/config/log.txt                  |  18 +-
 Documentation/config/notes.txt                |  43 +++--
 Documentation/config/sendemail.txt            |  40 ++++-
 Documentation/config/uploadpack.txt           |  26 +--
 .../config/uploadpack/pack-objects.txt        |  25 +++
 Documentation/git-add.txt                     |   7 +
 Documentation/git-am.txt                      |   7 +
 Documentation/git-apply.txt                   |  10 +-
 Documentation/git-blame.txt                   |  10 ++
 Documentation/git-branch.txt                  |   6 +
 Documentation/git-checkout.txt                |   7 +
 Documentation/git-clean.txt                   |   7 +
 Documentation/git-clone.txt                   |   9 +
 Documentation/git-commit-graph.txt            |   8 +
 Documentation/git-commit.txt                  |   4 +
 Documentation/git-credential.txt              |   7 +
 Documentation/git-diff.txt                    |   9 +
 Documentation/git-difftool.txt                |  28 +---
 Documentation/git-fast-import.txt             |   7 +
 Documentation/git-fetch.txt                   |   9 +
 Documentation/git-gc.txt                      |  14 +-
 Documentation/git-grep.txt                    |  29 +---
 Documentation/git-log.txt                     |  50 +-----
 Documentation/git-mergetool.txt               |   3 +
 Documentation/git-notes.txt                   |  54 +-----
 Documentation/git-pack-objects.txt            |   8 +-
 Documentation/git-remote.txt                  |  15 +-
 Documentation/git-repack.txt                  |  19 +--
 Documentation/git-rerere.txt                  |   9 +
 Documentation/git-reset.txt                   |   7 +
 Documentation/git-send-email.txt              |  36 +---
 Documentation/git-show-branch.txt             |   7 +
 Documentation/githooks.txt                    |   7 +
 .../includes/cmd-config-section-all.txt       |   3 +
 .../includes/cmd-config-section-rest.txt      |   3 +
 .../templates/configuration-include-pack.txt  |  10 ++
 builtin/help.c                                |   2 +-
 builtin/log.c                                 |   3 +-
 generate-configlist.sh                        |   2 +-
 t/t4207-log-decoration-colors.sh              |  12 +-
 58 files changed, 547 insertions(+), 456 deletions(-)
 create mode 100644 Documentation/config/color/blame.txt
 create mode 100644 Documentation/config/color/branch.txt
 create mode 100644 Documentation/config/color/diff.txt
 create mode 100644 Documentation/config/color/grep.txt
 create mode 100644 Documentation/config/color/log.txt
 create mode 100644 Documentation/config/color/push.txt
 create mode 100644 Documentation/config/color/showbranch.txt
 create mode 100644 Documentation/config/color/status.txt
 create mode 100644 Documentation/config/core/bigFileThreshold.txt
 create mode 100644 Documentation/config/diff/difftool.txt
 create mode 100644 Documentation/config/gc/rerere.txt
 create mode 100644 Documentation/config/uploadpack/pack-objects.txt
 create mode 100644 Documentation/includes/cmd-config-section-all.txt
 create mode 100644 Documentation/includes/cmd-config-section-rest.txt
 create mode 100644 Documentation/templates/configuration-include-pack.txt

Range-diff against v3:
 9:  276e226f0a8 !  1:  616637d4ce4 Makefile: move ".SUFFIXES" rule to shared.mak
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: move ".SUFFIXES" rule to shared.mak
    +    gc docs: reword and move "CONFIGURATION" section
     
    -    This was added in 30248886ce8 (Makefile: disable default implicit
    -    rules, 2010-01-26), let's move it to the top of "shared.mak" so it'll
    -    apply to all our Makefiles.
    -
    -    This doesn't benefit the main Makefile at all, since it already had
    -    the rule, but since we're including shared.mak in other Makefiles
    -    starts to benefit them. E.g. running the 'man" target is now ~1.3x
    -    faster:
    -
    -        $ git -c hyperfine.hook.setup= hyperfine -L rev HEAD~1,HEAD~0 -s 'make -j8 -C Documentation man' 'make -C Documentation man' --warmup 10 -M 10
    -        Benchmark 1: make -C Documentation man' in 'HEAD~1
    -          Time (mean ± σ):      87.2 ms ±   1.0 ms    [User: 79.3 ms, System: 10.8 ms]
    -          Range (min … max):    86.3 ms …  89.7 ms    10 runs
    -
    -        Benchmark 2: make -C Documentation man' in 'HEAD~0
    -          Time (mean ± σ):      64.5 ms ±   0.6 ms    [User: 54.5 ms, System: 13.0 ms]
    -          Range (min … max):    63.8 ms …  65.7 ms    10 runs
    -
    -        Summary
    -          'make -C Documentation man' in 'HEAD~0' ran
    -            1.35 ± 0.02 times faster than 'make -C Documentation man' in 'HEAD~1'
    +    Reword the blurb I added in b6a8d09f6d8 (gc docs: include the "gc.*"
    +    section from "config" in "gc", 2019-04-07) to be spell out more
    +    clearly how this inclusion happens. This is in preparation for moving
    +    that text to an included file and using it more widely.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Makefile ##
    -@@ Makefile: ASM_SRC := $(wildcard $(OBJECTS:o=S))
    - ASM_OBJ := $(ASM_SRC:S=o)
    - C_OBJ := $(filter-out $(ASM_OBJ),$(OBJECTS))
    + ## Documentation/git-gc.txt ##
    +@@ Documentation/git-gc.txt: more time, and the resulting space/delta optimization may or may not
    + be worth it. Not using this at all is the right trade-off for most
    + users and their repositories.
      
    --.SUFFIXES:
    +-CONFIGURATION
    +--------------
     -
    - $(C_OBJ): %.o: %.c GIT-CFLAGS $(missing_dep_dirs) $(missing_compdb_dir)
    - 	$(QUIET_CC)$(CC) -o $*.o -c $(dep_args) $(compdb_args) $(ALL_CFLAGS) $(EXTRA_CPPFLAGS) $<
    - $(ASM_OBJ): %.o: %.S GIT-CFLAGS $(missing_dep_dirs) $(missing_compdb_dir)
    -
    - ## shared.mak ##
    -@@
    - %:: s.%
    - %:: SCCS/s.%
    +-The below documentation is the same as what's found in
    +-linkgit:git-config[1]:
    +-
    +-include::config/gc.txt[]
    +-
    + NOTES
    + -----
      
    -+## Likewise delete default $(SUFFIXES). See:
    -+##
    -+##     info make --index-search=.DELETE_ON_ERROR
    -+.SUFFIXES:
    +@@ Documentation/git-gc.txt: HOOKS
    + The 'git gc --auto' command will run the 'pre-auto-gc' hook.  See
    + linkgit:githooks[5] for more information.
    + 
    ++CONFIGURATION
    ++-------------
    ++
    ++Everything below this line in this section is selectively included
    ++from the linkgit:git-config[1] documentation. The content is the same
    ++as what's found there:
     +
    - ### Flags affecting all rules
    ++include::config/gc.txt[]
      
    - # A GNU make extension since gmake 3.72 (released in late 1994) to
    + SEE ALSO
    + --------
 -:  ----------- >  2:  a47a2d28c75 add docs: include a CONFIGURATION section
 -:  ----------- >  3:  aef048fedb7 branch docs: include the branch.* section from config
 -:  ----------- >  4:  9039ec982fd only add heading
 -:  ----------- >  5:  b1e2ae43833 no dupe in apply, manually checked
 -:  ----------- >  6:  111a8fd27b5 todo rest commit
 -:  ----------- >  7:  0df621d00b5 include straightforward
 -:  ----------- >  8:  37a1053292c git-config doc: split uploadpack.txt into two included files
 -:  ----------- >  9:  0dbd94d4153 git-config doc: split off core.bigFileThreshold into its own file
 -:  ----------- > 10:  d1647dd90c5 pack-objects doc: include relevant git-config(1) docs
 -:  ----------- > 11:  372d844ba6e githooks doc: add a reference to uploadpack.packObjectsHook
 1:  fac30fe8b56 ! 12:  d4c3a85d117 Makefile: add a "TRACK_template" for GIT-*{FLAGS,DEFINES,...}
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: add a "TRACK_template" for GIT-*{FLAGS,DEFINES,...}
    +    git difftool special case/, needs rest header
     
    -    Move the mostly copy/pasted code in the "Makefile" and
    -    "Documentation/Makefile" which FORCE-generates a file based on a
    -    variable in play in the Makefile to use a template.
    -
    -    This will make it easier later on to move these to rules that aren't
    -    FORCE-run using optional gmake 4.2+ features, but for now just getting
    -    rid of the repetition is worth it.
    -
    -    The message for the new generated rule will say whether or not we're
    -    generating the file for the first time, as opposed to the old messages
    -    saying "new" whether we had flag modifications, or were building for
    -    the first time.
    -
    -    Example output before:
    -
    -        $ make clean
    -        [...]
    -        $ make
    -        GIT_VERSION = 2.34.0-rc1-dev
    -            * new build flags
    -            CC grep.o
    -        $ make CFLAGS=-I$RANDOM grep.o
    -            * new build flags
    -            CC grep.o
    -
    -    After:
    -
    -        $ make clean
    -        [...]
    -        $ make grep.o
    -        GIT_VERSION = 2.34.0-rc1-dev
    -            GIT-CFLAGS PARAMETERS (new)
    -            CC grep.o
    -        $ make CFLAGS=-I$RANDOM grep.o
    -            GIT-CFLAGS PARAMETERS (changed)
    -            CC grep.o
    -
    -    Note: It's important that "@FLAGS" here be defined as '$$($(2))', and
    -    not the eagerly expanded '$($(2))'. The latter will break if
    -    e.g. curl-config isn't installed, since we'll end up recursively
    -    expanding that part of the variable even if NO_CURL isn't defined,
    -    which happens e.g. for the "check-docs" target in CI.
    -
    -    We're also introducing a $(wspfx) variable here to control the
    -    whitespace prefixing. It matches the $(QUIET...) variables, who'll be
    -    using these variables in a subsequent commit. Note that it's important
    -    that we call the shell quote escaping macros inline (or equivalent),
    -    because if we'd like variables to be overridable we need to support e.g.:
    -
    -        $ make CFLAGS=-I$RANDOM grep.o wspfx='$(space)->'
    -         -> GIT-CFLAGS PARAMETERS (changed)
    -            CC grep.o
    -
    -    If we simply quoted and used $(wspfx) then the user would need to
    -    provide us with a quoted version, so there's still some use-cases for
    -    these $(*_sq) variables. It could also be done inline, but that's a
    -    lot more verbose.
    -
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## Documentation/Makefile ##
    -@@ Documentation/Makefile: mergetools-list.made: ../git-mergetool--lib.sh $(wildcard ../mergetools/*)
    - 	date >$@
    + ## Documentation/config/diff.txt ##
    +@@ Documentation/config/diff.txt: diff.<driver>.cachetextconv::
    + 	Set this option to true to make the diff driver cache the text
    + 	conversion outputs.  See linkgit:gitattributes[5] for details.
      
    - TRACK_ASCIIDOCFLAGS = $(subst ','\'',$(ASCIIDOC_COMMON):$(ASCIIDOC_HTML):$(ASCIIDOC_DOCBOOK))
    +-diff.tool::
    +-	Controls which diff tool is used by linkgit:git-difftool[1].
    +-	This variable overrides the value configured in `merge.tool`.
    +-	The list below shows the valid built-in values.
    +-	Any other value is treated as a custom diff tool and requires
    +-	that a corresponding difftool.<tool>.cmd variable is defined.
     -
    --GIT-ASCIIDOCFLAGS: FORCE
    --	@FLAGS='$(TRACK_ASCIIDOCFLAGS)'; \
    --	    if test x"$$FLAGS" != x"`cat GIT-ASCIIDOCFLAGS 2>/dev/null`" ; then \
    --		echo >&2 "    * new asciidoc flags"; \
    --		echo "$$FLAGS" >GIT-ASCIIDOCFLAGS; \
    --            fi
    -+$(eval $(call TRACK_template,GIT-ASCIIDOCFLAGS,TRACK_ASCIIDOCFLAGS))
    - 
    - clean:
    - 	$(RM) -rf .build/
    -
    - ## Makefile ##
    -@@ Makefile: endif
    - GIT_USER_AGENT_SQ = $(subst ','\'',$(GIT_USER_AGENT))
    - GIT_USER_AGENT_CQ = "$(subst ",\",$(subst \,\\,$(GIT_USER_AGENT)))"
    - GIT_USER_AGENT_CQ_SQ = $(subst ','\'',$(GIT_USER_AGENT_CQ))
    --GIT-USER-AGENT: FORCE
    --	@if test x'$(GIT_USER_AGENT_SQ)' != x"`cat GIT-USER-AGENT 2>/dev/null`"; then \
    --		echo '$(GIT_USER_AGENT_SQ)' >GIT-USER-AGENT; \
    --	fi
    -+$(eval $(call TRACK_template,GIT-USER-AGENT,GIT_USER_AGENT_SQ))
    +-diff.guitool::
    +-	Controls which diff tool is used by linkgit:git-difftool[1] when
    +-	the -g/--gui flag is specified. This variable overrides the value
    +-	configured in `merge.guitool`. The list below shows the valid
    +-	built-in values. Any other value is treated as a custom diff tool
    +-	and requires that a corresponding difftool.<guitool>.cmd variable
    +-	is defined.
    +-
    + include::../mergetools-diff.txt[]
      
    - ifdef DEFAULT_HELP_FORMAT
    - BASIC_CFLAGS += -DDEFAULT_HELP_FORMAT='"$(DEFAULT_HELP_FORMAT)"'
    -@@ Makefile: SCRIPT_DEFINES = $(SHELL_PATH_SQ):$(DIFF_SQ):\
    - 	$(localedir_SQ):$(USE_GETTEXT_SCHEME):$(SANE_TOOL_PATH_SQ):\
    - 	$(gitwebdir_SQ):$(PERL_PATH_SQ):$(PAGER_ENV):\
    - 	$(perllibdir_SQ)
    --GIT-SCRIPT-DEFINES: FORCE
    --	@FLAGS='$(SCRIPT_DEFINES)'; \
    --	    if test x"$$FLAGS" != x"`cat $@ 2>/dev/null`" ; then \
    --		echo >&2 "    * new script parameters"; \
    --		echo "$$FLAGS" >$@; \
    --            fi
    -+$(eval $(call TRACK_template,GIT-SCRIPT-DEFINES,SCRIPT_DEFINES))
    + diff.indentHeuristic::
    +
    + ## Documentation/config/diff/difftool.txt (new) ##
    +@@
    ++diff.tool::
    ++	Controls which diff tool is used by linkgit:git-difftool[1].
    ++	This variable overrides the value configured in `merge.tool`.
    ++	The list below shows the valid built-in values.
    ++	Any other value is treated as a custom diff tool and requires
    ++	that a corresponding difftool.<tool>.cmd variable is defined.
    ++
    ++diff.guitool::
    ++	Controls which diff tool is used by linkgit:git-difftool[1] when
    ++	the -g/--gui flag is specified. This variable overrides the value
    ++	configured in `merge.guitool`. The list below shows the valid
    ++	built-in values. Any other value is treated as a custom diff tool
    ++	and requires that a corresponding difftool.<guitool>.cmd variable
    ++	is defined.
    +
    + ## Documentation/config/difftool.txt ##
    +@@ Documentation/config/difftool.txt: difftool.<tool>.cmd::
    + 	file containing the contents of the diff pre-image and 'REMOTE'
    + 	is set to the name of the temporary file containing the contents
    + 	of the diff post-image.
    +++
    ++See the `--tool=<tool>` option linkgit:git-difftool[1] for more details.
      
    - define cmd_munge_script
    - sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    -@@ Makefile: git-instaweb: git-instaweb.sh GIT-SCRIPT-DEFINES
    - 	chmod +x $@+ && \
    - 	mv $@+ $@
    - endif # NO_PERL
    --
    --GIT-PERL-DEFINES: FORCE
    --	@FLAGS='$(PERL_DEFINES)'; \
    --	    if test x"$$FLAGS" != x"`cat $@ 2>/dev/null`" ; then \
    --		echo >&2 "    * new perl-specific parameters"; \
    --		echo "$$FLAGS" >$@; \
    --	    fi
    -+$(eval $(call TRACK_template,GIT-PERL-DEFINES,PERL_DEFINES))
    + difftool.prompt::
    + 	Prompt before each invocation of the diff tool.
    ++
    ++difftool.trustExitCode::
    ++	Exit difftool if the invoked diff tool returns a non-zero exit status.
    +++
    ++See the `--trust-exit-code` option in linkgit:git-difftool[1] for more details.
    +
    + ## Documentation/git-difftool.txt ##
    +@@ Documentation/git-difftool.txt: instead.  `--no-symlinks` is the default on Windows.
      
    - # As with NO_PERL=Y we'll still make GIT-PYTHON-DEFINES if "NO_PYTHON"
    - # is defined, for creating the "unimplemented.sh" scripts.
    -@@ Makefile: $(SCRIPT_PYTHON_GEN): % : %.py GIT-PYTHON-DEFINES
    - 	mv $@+ $@
    - endif # NO_PYTHON
    + See linkgit:git-diff[1] for the full list of supported options.
      
    --GIT-PYTHON-DEFINES: FORCE
    --	@FLAGS='$(PYTHON_DEFINES)'; \
    --	    if test x"$$FLAGS" != x"`cat $@ 2>/dev/null`" ; then \
    --		echo >&2 "    * new python-specific parameters"; \
    --		echo "$$FLAGS" >$@; \
    --	    fi
    -+$(eval $(call TRACK_template,GIT-PYTHON-DEFINES,PYTHON_DEFINES))
    +-CONFIG VARIABLES
    +-----------------
    ++CONFIGURATION
    ++-------------
    ++
    + 'git difftool' falls back to 'git mergetool' config variables when the
    + difftool equivalents have not been defined.
      
    - CONFIGURE_RECIPE = sed -e 's/@@GIT_VERSION@@/$(GIT_VERSION)/g' \
    - 			configure.ac >configure.ac+ && \
    -@@ Makefile: cscope: cscope.out
    - ### Detect prefix changes
    - TRACK_PREFIX = $(bindir_SQ):$(gitexecdir_SQ):$(template_dir_SQ):$(prefix_SQ):\
    - 		$(localedir_SQ)
    +-diff.tool::
    +-	The default diff tool to use.
     -
    --GIT-PREFIX: FORCE
    --	@FLAGS='$(TRACK_PREFIX)'; \
    --	if test x"$$FLAGS" != x"`cat GIT-PREFIX 2>/dev/null`" ; then \
    --		echo >&2 "    * new prefix flags"; \
    --		echo "$$FLAGS" >GIT-PREFIX; \
    --	fi
    -+$(eval $(call TRACK_template,GIT-PREFIX,TRACK_PREFIX))
    +-diff.guitool::
    +-	The default diff tool to use when `--gui` is specified.
    ++include::templates/configuration-include-rest-heading.txt[]
      
    - TRACK_CFLAGS = $(CC):$(subst ','\'',$(ALL_CFLAGS)):$(USE_GETTEXT_SCHEME)
    +-difftool.<tool>.path::
    +-	Override the path for the given tool.  This is useful in case
    +-	your tool is not in the PATH.
     -
    --GIT-CFLAGS: FORCE
    --	@FLAGS='$(TRACK_CFLAGS)'; \
    --	    if test x"$$FLAGS" != x"`cat GIT-CFLAGS 2>/dev/null`" ; then \
    --		echo >&2 "    * new build flags"; \
    --		echo "$$FLAGS" >GIT-CFLAGS; \
    --            fi
    -+$(eval $(call TRACK_template,GIT-CFLAGS,TRACK_CFLAGS))
    +-difftool.<tool>.cmd::
    +-	Specify the command to invoke the specified diff tool.
    +-+
    +-See the `--tool=<tool>` option above for more details.
    ++include::config/diff/difftool.txt[]
      
    - TRACK_LDFLAGS = $(subst ','\'',$(ALL_LDFLAGS))
    +-difftool.prompt::
    +-	Prompt before each invocation of the diff tool.
     -
    --GIT-LDFLAGS: FORCE
    --	@FLAGS='$(TRACK_LDFLAGS)'; \
    --	    if test x"$$FLAGS" != x"`cat GIT-LDFLAGS 2>/dev/null`" ; then \
    --		echo >&2 "    * new link flags"; \
    --		echo "$$FLAGS" >GIT-LDFLAGS; \
    --            fi
    -+$(eval $(call TRACK_template,GIT-LDFLAGS,TRACK_LDFLAGS))
    +-difftool.trustExitCode::
    +-	Exit difftool if the invoked diff tool returns a non-zero exit status.
    +-+
    +-See the `--trust-exit-code` option above for more details.
    ++include::config/difftool.txt[]
      
    - # We need to apply sq twice, once to protect from the shell
    - # that runs GIT-BUILD-OPTIONS, and then again to protect it
    -
    - ## shared.mak ##
    -@@ shared.mak: shelldquote = '"$(call shdq,$(call shq,$(1)))"'
    - comma = ,
    - empty =
    - space = $(empty) $(empty)
    -+
    -+## wspfx: the whitespace prefix padding for $(QUIET...) and similarly
    -+## aligned output.
    -+wspfx = $(space)$(space)$(space)
    -+wspfx_sq = $(call shellquote,$(wspfx))
    -+
    -+### Templates
    -+
    -+## Template for making a GIT-SOMETHING, which changes if a
    -+## TRACK_SOMETHING variable changes.
    -+define TRACK_template
    -+.PHONY: FORCE
    -+$(1): FORCE
    -+	@FLAGS='$$($(2))'; \
    -+	if ! test -f $(1) ; then \
    -+		echo $(wspfx_sq) "$(1) PARAMETERS (new)" $@; \
    -+		echo "$$$$FLAGS" >$(1); \
    -+	elif test x"$$$$FLAGS" != x"`cat $(1) 2>/dev/null`" ; then \
    -+		echo $(wspfx_sq) "$(1) PARAMETERS (changed)" $@; \
    -+		echo "$$$$FLAGS" >$(1); \
    -+	fi
    -+endef
    + SEE ALSO
    + --------
 7:  cb3ae5ce00b ! 13:  93e65032d57 Makefile: disable GNU make built-in wildcard rules
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: disable GNU make built-in wildcard rules
    +    clone needs init/clone
     
    -    Override built-in rules of GNU make that use a wildcard target. This
    -    speeds things up significantly as we don't need to stat() so many
    -    files just in case we'd be able to retrieve their contents from RCS or
    -    SCCS. See [1] for an old mailing list discussion about how to disable
    -    these.
    -
    -    This gives us a noticeable speedup on a no-op run:
    -
    -        $ git hyperfine -L rev HEAD~1,HEAD~0 -s 'make -j8 all NO_TCLTK=Y' 'make NO_TCLTK=Y' --warmup 10 -M 10
    -        Benchmark 1: make NO_TCLTK=Y' in 'HEAD~1
    -          Time (mean ± σ):     182.2 ms ±   4.1 ms    [User: 146.8 ms, System: 49.5 ms]
    -          Range (min … max):   179.6 ms … 193.4 ms    10 runs
    -
    -        Benchmark 2: make NO_TCLTK=Y' in 'HEAD~0
    -          Time (mean ± σ):     167.9 ms ±   1.3 ms    [User: 127.8 ms, System: 55.6 ms]
    -          Range (min … max):   166.1 ms … 170.4 ms    10 runs
    -
    -        Summary
    -          'make NO_TCLTK=Y' in 'HEAD~0' ran
    -            1.09 ± 0.03 times faster than 'make NO_TCLTK=Y' in 'HEAD~1'
    -
    -    Running the same except with 'strace -c -S calls make' as the
    -    benchmark command shows (under --show-output) that we went from ~7716
    -    syscalls to ~7519, mostly a reduction in [l]stat().
    -
    -    1. https://lists.gnu.org/archive/html/help-make/2002-11/msg00063.html
    -
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## shared.mak ##
    -@@
    -+### Remove GNU make implicit rules
    + ## Documentation/git-clone.txt ##
    +@@ Documentation/git-clone.txt: $ cd my-linux
    + $ git clone --bare -l /home/proj/.git /pub/scm/proj.git
    + ------------
    + 
    ++CONFIGURATION
    ++-------------
    ++
    ++include::templates/configuration-include-heading.txt[]
    ++
    ++include::config/init.txt[]
     +
    -+## This speeds things up since we don't need to look for and stat() a
    -+## "foo.c,v" every time a rule referring to "foo.c" is in play. See
    -+## "make -p -f/dev/null | grep ^%::'".
    -+%:: %,v
    -+%:: RCS/%,v
    -+%:: RCS/%
    -+%:: s.%
    -+%:: SCCS/s.%
    ++include::config/clone.txt[]
     +
    - ### Flags affecting all rules
      
    - # A GNU make extension since gmake 3.72 (released in late 1994) to
    + GIT
    + ---
 6:  567ad5c3ebc ! 14:  30dd2512691 Makefile: use $(file) I/O instead of "FORCE" when possible
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: use $(file) I/O instead of "FORCE" when possible
    +    fetch, add remote, some are not for fetch
     
    -    Provide an alternate implementation of the recently added
    -    "TRACK_template" which uses GNU make 4.2 features. If the 'file'
    -    function is available we don't need to shell out at all to check if
    -    our tracked files change.
    -
    -    We need to use the intermediate TRACK_template calling a
    -    TRACK_template_eval within the generated rule so that we don't eagerly
    -    fleshen these when "make" reads the file.
    -
    -    This doesn't make the runtime faster on my system, but helps to cut
    -    down on the noise of things we shell out for
    -    unconditionally. I.e. running "make" with "SHELL_PATH='sh -x'" (twice,
    -    so we pick up the setting) shows than a no-op run went from emitting:
    -
    -        $ SHELL_PATH='sh -x' make -j8 >/dev/null 2>&1; SHELL_PATH='sh -x' make 2>&1 |wc -l
    -        124
    -
    -    To:
    -
    -        $ SHELL_PATH='sh -x' make -j8 >/dev/null 2>&1; SHELL_PATH='sh -x' make 2>&1 |wc -l
    -        95
    -
    -    That 124 to 95 number is a rough approximation of how many times we
    -    shell out. "strace -f -c" similarly shows that we went from 8798 to
    -    8466 syscalls. So this brings us further along in the goal of making
    -    "make" do as little as possible when it's got nothing to re-build (see
    -    [2]).
    -
    -    1. https://lore.kernel.org/git/874kdn1j6i.fsf@evledraar.gmail.com/
    -
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## shared.mak ##
    -@@
    - #    info make --index-search=.DELETE_ON_ERROR
    - .DELETE_ON_ERROR:
    + ## Documentation/git-fetch.txt ##
    +@@ Documentation/git-fetch.txt: linkgit:git-gc[1]).
      
    -+### GNU Make version detection
    -+# We don't care about "release" versions like the "90" in "3.99.90"
    -+MAKE_VERSION_MAJOR = $(word 1,$(subst ., ,$(MAKE_VERSION)))
    -+MAKE_VERSION_MINOR = $(word 2,$(subst ., ,$(MAKE_VERSION)))
    -+
    -+# The oldest supported version of GNU make is 3-something. So "not v3"
    -+# is a future-proof way to ask "is it modern?"
    -+ifneq ($(MAKE_VERSION_MAJOR),3)
    -+# $(file >[...]) and $(file >>[...]) is in 4.0...
    -+MAKE_HAVE_FILE_WRITE = Need version 4.0 or later (released in late 2013)
    -+# .. but we need 4.2 for $(file <[...])
    -+ifneq ($(filter-out 0 1,$(MAKE_VERSION_MINOR)),)
    -+MAKE_HAVE_FILE_READ = Need version 4.2 or later (released in mid-2016)
    -+endif
    -+endif
    -+
    - ### Quoting helpers
    + include::transfer-data-leaks.txt[]
      
    - ## Quote a ' inside a '': FOO='$(call shq,$(BAR))'
    -@@ shared.mak: endef
    - 
    - ## Template for making a GIT-SOMETHING, which changes if a
    - ## TRACK_SOMETHING variable changes.
    -+##
    -+## This is the slower version used on GNU make <4.2.
    -+ifndef MAKE_HAVE_FILE_READ
    -+
    - define TRACK_template
    - .PHONY: FORCE
    - $(1): FORCE
    -@@ shared.mak: $(1): FORCE
    - 		echo "$$$$FLAGS" >$(1); \
    - 	fi
    - endef
    -+
    -+endif # !MAKE_HAVE_FILE_READ
    ++CONFIGURATION
    ++-------------
     +
    -+## A TRACK_template template compatible with the one above. Uses
    -+## features of GNU make >=4.2 to avoid shelling out for this "hot"
    -+## "FORCE" logic.
    -+##
    -+## Since version >=4.2 can do both "I" and "O" in I/O with using
    -+## $(file <)/$(file >) we read the GIT-SOMETHING file into a variable
    -+## with the former, and if it's different from our expected value
    -+## write it out with the latter.
    -+ifdef MAKE_HAVE_FILE_READ
    ++include::templates/configuration-include-rest-heading.txt[]
     +
    -+define TRACK_template_eval
    -+$(1)_WRITE =
    -+$(1)_EXISTS = $(wildcard $(1))
    -+ifeq ($$($(1)_EXISTS),)
    -+$(1)_WRITE = new
    -+else
    -+$(1)_CONTENT = $(file <$(1))
    -+ifeq ($$($(1)_CONTENT),$($(2)))
    -+$(1)_WRITE = same
    -+else
    -+$(1)_WRITE = changed
    -+endif
    -+endif
    -+ifneq ($$($(1)_WRITE),same)
    -+$$(info $$(wspfx) $(1) parameters ($$($(1)_WRITE)))
    -+$$(file >$(1),$($(2)))
    -+endif
    -+endef # TRACK_template_eval
    ++include::config/fetch.txt[]
     +
    -+define TRACK_template
    -+$(1):
    -+	$$(eval $$(call TRACK_template_eval,$(1),$(2)))
    -+endef
    ++include::config/remote.txt[]
     +
    -+endif # MAKE_HAVE_FILE_READ
    + BUGS
    + ----
    + Using --recurse-submodules can only fetch new commits in already checked
 3:  22264f431c8 ! 15:  9dd81dae59e Makefile: use $(wspfx) for $(QUIET...) in shared.mak
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: use $(wspfx) for $(QUIET...) in shared.mak
    +    remote, reword?
     
    -    Change the mostly move-only change in the preceding commit to use the
    -    $(wspfx) variable for defining the QUIET padding, to guarantee that
    -    it's consistent with the "TRACK_template" template.
    -
    -        $ make CFLAGS=-I$RANDOM grep.o wspfx='$(space)->'
    -         -> GIT-CFLAGS PARAMETERS (changed)
    -         -> CC grep.o
    -
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## shared.mak ##
    -@@ shared.mak: ifneq ($(findstring s,$(MAKEFLAGS)),s)
    - ifndef V
    - ## common
    - 	QUIET_SUBDIR0  = +@subdir=
    --	QUIET_SUBDIR1  = ;$(NO_SUBDIR) echo '   ' SUBDIR $$subdir; \
    -+	QUIET_SUBDIR1  = ;$(NO_SUBDIR) echo $(wspfx_sq) SUBDIR $$subdir; \
    - 			 $(MAKE) $(PRINT_DIR) -C $$subdir
    + ## Documentation/git-remote.txt ##
    +@@ Documentation/git-remote.txt: be updated.  (See linkgit:git-config[1]).
    + With `--prune` option, run pruning against all the remotes that are updated.
      
    - 	QUIET          = @
    --	QUIET_GEN      = @echo '   ' GEN $@;
    -+	QUIET_GEN      = @echo $(wspfx_sq) GEN $@;
      
    - ## Used in "Makefile"
    --	QUIET_CC       = @echo '   ' CC $@;
    --	QUIET_AR       = @echo '   ' AR $@;
    --	QUIET_LINK     = @echo '   ' LINK $@;
    --	QUIET_BUILT_IN = @echo '   ' BUILTIN $@;
    --	QUIET_LNCP     = @echo '   ' LN/CP $@;
    --	QUIET_XGETTEXT = @echo '   ' XGETTEXT $@;
    --	QUIET_MSGFMT   = @echo '   ' MSGFMT $@;
    --	QUIET_GCOV     = @echo '   ' GCOV $@;
    --	QUIET_SP       = @echo '   ' SP $<;
    --	QUIET_HDR      = @echo '   ' HDR $(<:hcc=h);
    --	QUIET_RC       = @echo '   ' RC $@;
    --	QUIET_SPATCH   = @echo '   ' SPATCH $<;
    -+	QUIET_CC       = @echo $(wspfx_sq) CC $@;
    -+	QUIET_AR       = @echo $(wspfx_sq) AR $@;
    -+	QUIET_LINK     = @echo $(wspfx_sq) LINK $@;
    -+	QUIET_BUILT_IN = @echo $(wspfx_sq) BUILTIN $@;
    -+	QUIET_LNCP     = @echo $(wspfx_sq) LN/CP $@;
    -+	QUIET_XGETTEXT = @echo $(wspfx_sq) XGETTEXT $@;
    -+	QUIET_MSGFMT   = @echo $(wspfx_sq) MSGFMT $@;
    -+	QUIET_GCOV     = @echo $(wspfx_sq) GCOV $@;
    -+	QUIET_SP       = @echo $(wspfx_sq) SP $<;
    -+	QUIET_HDR      = @echo $(wspfx_sq) HDR $(<:hcc=h);
    -+	QUIET_RC       = @echo $(wspfx_sq) RC $@;
    -+	QUIET_SPATCH   = @echo $(wspfx_sq) SPATCH $<;
    +-DISCUSSION
    +-----------
    +-
    +-The remote configuration is achieved using the `remote.origin.url` and
    +-`remote.origin.fetch` configuration variables.  (See
    +-linkgit:git-config[1]).
    +-
    + EXIT STATUS
    + -----------
      
    - ## Used in "Documentation/Makefile"
    --	QUIET_ASCIIDOC	= @echo '   ' ASCIIDOC $@;
    --	QUIET_XMLTO	= @echo '   ' XMLTO $@;
    --	QUIET_DB2TEXI	= @echo '   ' DB2TEXI $@;
    --	QUIET_MAKEINFO	= @echo '   ' MAKEINFO $@;
    --	QUIET_DBLATEX	= @echo '   ' DBLATEX $@;
    --	QUIET_XSLTPROC	= @echo '   ' XSLTPROC $@;
    --	QUIET_GEN	= @echo '   ' GEN $@;
    -+	QUIET_ASCIIDOC	= @echo $(wspfx_sq) ASCIIDOC $@;
    -+	QUIET_XMLTO	= @echo $(wspfx_sq) XMLTO $@;
    -+	QUIET_DB2TEXI	= @echo $(wspfx_sq) DB2TEXI $@;
    -+	QUIET_MAKEINFO	= @echo $(wspfx_sq) MAKEINFO $@;
    -+	QUIET_DBLATEX	= @echo $(wspfx_sq) DBLATEX $@;
    -+	QUIET_XSLTPROC	= @echo $(wspfx_sq) XSLTPROC $@;
    -+	QUIET_GEN	= @echo $(wspfx_sq) GEN $@;
    - 	QUIET_STDERR	= 2> /dev/null
    +@@ Documentation/git-remote.txt: $ git remote add -f -t master -m master origin git://example.com/git.git/
    + $ git merge origin
    + ------------
      
    --	QUIET_LINT_GITLINK	= @echo '   ' LINT GITLINK $<;
    --	QUIET_LINT_MANSEC	= @echo '   ' LINT MAN SEC $<;
    --	QUIET_LINT_MANEND	= @echo '   ' LINT MAN END $<;
    -+	QUIET_LINT_GITLINK	= @echo $(wspfx_sq) LINT GITLINK $<;
    -+	QUIET_LINT_MANSEC	= @echo $(wspfx_sq) LINT MAN SEC $<;
    -+	QUIET_LINT_MANEND	= @echo $(wspfx_sq) LINT MAN END $<;
    ++CONFIGURATION
    ++-------------
    ++
    ++include::templates/configuration-include-heading.txt[]
    ++
    ++include::config/remote.txt[]
      
    - 	export V
    - endif
    + SEE ALSO
    + --------
 -:  ----------- > 16:  1a4ab80f869 remote: forgot remotes.txt
 -:  ----------- > 17:  eaf468ab164 git-repack doc: remove discussion of ancient caveat
 -:  ----------- > 18:  8a9d2bf3e49 merged repack and pack with a template, just the exception now
 -:  ----------- > 19:  cff5aad03cd rerere
 5:  234b4eb613c ! 20:  93b98850a5c Makefile: correct the dependency graph of hook-list.h
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: correct the dependency graph of hook-list.h
    +    reset
     
    -    Fix an issue in my cfe853e66be (hook-list.h: add a generated list of
    -    hooks, like config-list.h, 2021-09-26), the builtin/help.c was
    -    inadvertently made to depend on hook-list.h, but it's used by
    -    builtin/bugreport.c.
    -
    -    Reported-by: Mike Hommey <mh@glandium.org>
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## Makefile ##
    -@@ Makefile: git$X: git.o GIT-LDFLAGS $(BUILTIN_OBJS) $(GITLIBS)
    + ## Documentation/git-reset.txt ##
    +@@ Documentation/git-reset.txt: working index HEAD target         working index HEAD
      
    - help.sp help.s help.o: command-list.h
    - hook.sp hook.s hook.o: hook-list.h
    -+builtin/bugreport.sp builtin/bugreport.s builtin/bugreport.o: hook-list.h
    + `X` means any state and `U` means an unmerged index.
      
    --builtin/help.sp builtin/help.s builtin/help.o: config-list.h hook-list.h GIT-PREFIX
    -+builtin/help.sp builtin/help.s builtin/help.o: config-list.h GIT-PREFIX
    - builtin/help.sp builtin/help.s builtin/help.o: EXTRA_CPPFLAGS = \
    - 	'-DGIT_HTML_PATH="$(htmldir_relative_SQ)"' \
    - 	'-DGIT_MAN_PATH="$(mandir_relative_SQ)"' \
    ++CONFIGURATION
    ++-------------
    ++
    ++include::templates/configuration-include-heading.txt[]
    ++
    ++include::config/reset.txt[]
    ++
    + GIT
    + ---
    + Part of the linkgit:git[1] suite
 8:  88cfc946b37 ! 21:  4865e941181 Makefile: define $(LIB_H) in terms of $(FIND_SOURCE_FILES)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: define $(LIB_H) in terms of $(FIND_SOURCE_FILES)
    +    git-send-email doc: discuss all config options in git-config(1)
     
    -    Combine the definitions of $(FIND_SOURCE_FILES) and $(LIB_H) to speed
    -    up the Makefile, as these are the two main expensive $(shell) commands
    -    that we execute unconditionally.
    +    It's bothered me for a while that git-send-email(1) is a special
    +    snowflake in that its configuration options weren't fully discussed in
    +    either its own documentation, or git-config(1).
     
    -    When see what was in $(FOUND_SOURCE_FILES) that wasn't in $(LIB_H) via
    -    the ad-hoc test of:
    +    This change rectifies that. We now have the canonical documentation in
    +    git-config(1), and include it in git-send-email(1).
     
    -        $(error $(filter-out $(LIB_H),$(filter %.h,$(ALL_SOURCE_FILES))))
    -        $(error $(filter-out $(ALL_SOURCE_FILES),$(filter %.h,$(LIB_H))))
    -
    -    We'll get, respectively:
    -
    -        Makefile:850: *** t/helper/test-tool.h.  Stop.
    -        Makefile:850: *** .  Stop.
    -
    -    I.e. we only had a discrepancy when it came to
    -    t/helper/test-tool.h. In terms of correctness this was broken before,
    -    but now works:
    -
    -        $ make t/helper/test-tool.hco
    -            HDR t/helper/test-tool.h
    -
    -    This speeds things up a lot:
    -
    -        $ git -c hyperfine.hook.setup= hyperfine -L rev HEAD~1,HEAD~0 -s 'make -j8 all NO_TCLTK=Y' 'make NO_TCLTK=Y' --war
    -        mup 10 -M 10
    -        Benchmark 1: make NO_TCLTK=Y' in 'HEAD~1
    -          Time (mean ± σ):      99.5 ms ±   0.5 ms    [User: 83.4 ms, System: 20.7 ms]
    -          Range (min … max):    98.8 ms … 100.2 ms    10 runs
    -
    -        Benchmark 2: make NO_TCLTK=Y' in 'HEAD~0
    -          Time (mean ± σ):      69.4 ms ±   0.5 ms    [User: 58.8 ms, System: 14.2 ms]
    -          Range (min … max):    68.9 ms …  70.3 ms    10 runs
    -
    -        Summary
    -          'make NO_TCLTK=Y' in 'HEAD~0' ran
    -            1.43 ± 0.01 times faster than 'make NO_TCLTK=Y' in 'HEAD~1'
    +    This is mostly a move-only change, the exception is a minor rewording
    +    of changing wording like "see above" to "see linkgit:git-config[1]",
    +    as well as a clarification about the big section of command-line
    +    option tweaking config being discussed in git-send-email(1)'s main
    +    docs.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Makefile ##
    -@@ Makefile: GENERATED_H += hook-list.h
    - .PHONY: generated-hdrs
    - generated-hdrs: $(GENERATED_H)
    + ## Documentation/config/sendemail.txt ##
    +@@ Documentation/config/sendemail.txt: sendemail.<identity>.*::
    + 	identity is selected, through either the command-line or
    + 	`sendemail.identity`.
      
    --LIB_H := $(sort $(patsubst ./%,%,$(shell git ls-files '*.h' ':!t/' ':!Documentation/' 2>/dev/null || \
    -+## Exhaustive lists of our source files, either dynamically generated,
    -+## or hardcoded.
    -+SOURCES_CMD = ( \
    -+	git ls-files \
    -+		'*.[hcS]' \
    -+		'*.sh' \
    -+		':!*[tp][0-9][0-9][0-9][0-9]*' \
    -+		':!contrib' \
    -+		2>/dev/null || \
    - 	$(FIND) . \
    --	-name .git -prune -o \
    --	-name t -prune -o \
    --	-name Documentation -prune -o \
    --	-name '*.h' -print)))
    -+		\( -name .git -type d -prune \) \
    -+		-o \( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \) \
    -+		-o \( -name contrib -type d -prune \) \
    -+		-o \( -name build -type d -prune \) \
    -+		-o \( -name 'trash*' -type d -prune \) \
    -+		-o \( -name '*.[hcS]' -type f -print \) \
    -+		-o \( -name '*.sh' -type f -print \) \
    -+		| sed -e 's|^\./||' \
    -+	)
    -+FOUND_SOURCE_FILES := $(shell $(SOURCES_CMD))
    ++sendemail.multiEdit::
    ++	If true (default), a single editor instance will be spawned to edit
    ++	files you have to edit (patches when `--annotate` is used, and the
    ++	summary when `--compose` is used). If false, files will be edited one
    ++	after the other, spawning a new editor each time.
     +
    -+FOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))
    -+FOUND_H_SOURCES = $(filter %.h,$(FOUND_SOURCE_FILES))
    ++sendemail.confirm::
    ++	Sets the default for whether to confirm before sending. Must be
    ++	one of 'always', 'never', 'cc', 'compose', or 'auto'. See `--confirm`
    ++	in the linkgit:git-send-email[1] documentation for the meaning of these
    ++	values.
     +
    -+COCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES),$(FOUND_C_SOURCES))
    + sendemail.aliasesFile::
    ++	To avoid typing long email addresses, point this to one or more
    ++	email aliases files.  You must also supply `sendemail.aliasFileType`.
     +
    -+LIB_H = $(FOUND_H_SOURCES)
    + sendemail.aliasFileType::
    ++	Format of the file(s) specified in sendemail.aliasesFile. Must be
    ++	one of 'mutt', 'mailrc', 'pine', 'elm', or 'gnus', or 'sendmail'.
    +++
    ++What an alias file in each format looks like can be found in
    ++the documentation of the email program of the same name. The
    ++differences and limitations from the standard formats are
    ++described below:
    +++
    ++--
    ++sendmail;;
    ++*	Quoted aliases and quoted addresses are not supported: lines that
    ++	contain a `"` symbol are ignored.
    ++*	Redirection to a file (`/path/name`) or pipe (`|command`) is not
    ++	supported.
    ++*	File inclusion (`:include: /path/name`) is not supported.
    ++*	Warnings are printed on the standard error output for any
    ++	explicitly unsupported constructs, and any other lines that are not
    ++	recognized by the parser.
    ++--
    + sendemail.annotate::
    + sendemail.bcc::
    + sendemail.cc::
    + sendemail.ccCmd::
    + sendemail.chainReplyTo::
    +-sendemail.confirm::
    + sendemail.envelopeSender::
    + sendemail.from::
    +-sendemail.multiEdit::
    + sendemail.signedoffbycc::
    + sendemail.smtpPass::
    + sendemail.suppresscc::
    +@@ Documentation/config/sendemail.txt: sendemail.thread::
    + sendemail.transferEncoding::
    + sendemail.validate::
    + sendemail.xmailer::
    +-	See linkgit:git-send-email[1] for description.
    ++	These configuration variables all provide a default for
    ++	linkgit:git-send-email[1] command-line options. See its
    ++	documentation for details.
      
    - LIB_OBJS += abspath.o
    - LIB_OBJS += add-interactive.o
    -@@ Makefile: perl/build/man/man3/Git.3pm: perl/Git.pm
    - 	$(call mkdir_p_parent_template)
    - 	$(QUIET_GEN)pod2man $< $@
    + sendemail.signedoffcc (deprecated)::
    + 	Deprecated alias for `sendemail.signedoffbycc`.
    +
    + ## Documentation/git-send-email.txt ##
    +@@ Documentation/git-send-email.txt: Information
    + CONFIGURATION
    + -------------
      
    --FIND_SOURCE_FILES = ( \
    --	git ls-files \
    --		'*.[hcS]' \
    --		'*.sh' \
    --		':!*[tp][0-9][0-9][0-9][0-9]*' \
    --		':!contrib' \
    --		2>/dev/null || \
    --	$(FIND) . \
    --		\( -name .git -type d -prune \) \
    --		-o \( -name '[tp][0-9][0-9][0-9][0-9]*' -prune \) \
    --		-o \( -name contrib -type d -prune \) \
    --		-o \( -name build -type d -prune \) \
    --		-o \( -name 'trash*' -type d -prune \) \
    --		-o \( -name '*.[hcS]' -type f -print \) \
    --		-o \( -name '*.sh' -type f -print \) \
    --		| sed -e 's|^\./||' \
    --	)
    +-sendemail.aliasesFile::
    +-	To avoid typing long email addresses, point this to one or more
    +-	email aliases files.  You must also supply `sendemail.aliasFileType`.
    ++include::templates/configuration-include-heading.txt[]
    + 
    +-sendemail.aliasFileType::
    +-	Format of the file(s) specified in sendemail.aliasesFile. Must be
    +-	one of 'mutt', 'mailrc', 'pine', 'elm', or 'gnus', or 'sendmail'.
    +-+
    +-What an alias file in each format looks like can be found in
    +-the documentation of the email program of the same name. The
    +-differences and limitations from the standard formats are
    +-described below:
    +-+
    +---
    +-sendmail;;
    +-*	Quoted aliases and quoted addresses are not supported: lines that
    +-	contain a `"` symbol are ignored.
    +-*	Redirection to a file (`/path/name`) or pipe (`|command`) is not
    +-	supported.
    +-*	File inclusion (`:include: /path/name`) is not supported.
    +-*	Warnings are printed on the standard error output for any
    +-	explicitly unsupported constructs, and any other lines that are not
    +-	recognized by the parser.
    +---
     -
    --FOUND_SOURCE_FILES = $(shell $(FIND_SOURCE_FILES))
    +-sendemail.multiEdit::
    +-	If true (default), a single editor instance will be spawned to edit
    +-	files you have to edit (patches when `--annotate` is used, and the
    +-	summary when `--compose` is used). If false, files will be edited one
    +-	after the other, spawning a new editor each time.
     -
    - $(ETAGS_TARGET): $(FOUND_SOURCE_FILES)
    - 	$(QUIET_GEN)$(RM) $@+ && \
    - 	echo $(FOUND_SOURCE_FILES) | xargs etags -a -o $@+ && \
    -@@ Makefile: check: $(GENERATED_H)
    - 		exit 1; \
    - 	fi
    +-sendemail.confirm::
    +-	Sets the default for whether to confirm before sending. Must be
    +-	one of 'always', 'never', 'cc', 'compose', or 'auto'. See `--confirm`
    +-	in the previous section for the meaning of these values.
    ++include::config/sendemail.txt[]
      
    --FOUND_C_SOURCES = $(filter %.c,$(FOUND_SOURCE_FILES))
    --COCCI_SOURCES = $(filter-out $(THIRD_PARTY_SOURCES),$(FOUND_C_SOURCES))
    --
    - %.cocci.patch: %.cocci $(COCCI_SOURCES)
    - 	$(QUIET_SPATCH) \
    - 	if test $(SPATCH_BATCH_SIZE) = 0; then \
    + EXAMPLES
    + --------
 -:  ----------- > 22:  68cdec0c321 show branch, not really justifiable, for completeness
 -:  ----------- > 23:  3cb563531af git-grep documentation: de-duplicate configuration sections
 2:  a3e3acea82d ! 24:  02dc173127b Makefile: add "$(QUIET)" boilerplate to shared.mak
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefile: add "$(QUIET)" boilerplate to shared.mak
    +    git-config doc: split up config/color.txt into sub-includes
     
    -    The $(QUIET) variables we define are largely duplicated between our
    -    various Makefiles, let's define them in the new "shared.mak" instead.
    +    Split up the file include we use to describe color.* variables into
    +    sub-files in preparation for including these in command-specific
    +    documentation.
     
    -    Since we're not using the environment to pass these around we don't
    -    need to export the "QUIET_GEN" and "QUIET_BUILT_IN" variables
    -    anymore. The "QUIET_GEN" variable is used in "git-gui/Makefile" and
    -    "gitweb/Makefile", but they've got their own definition for those. The
    -    "QUIET_BUILT_IN" variable is only used in the top-level "Makefile". We
    -    still need to export the "V" variable.
    +    I'm leaving the color.remote and color.transport variables, as
    +    explaining where/how they get used isn't as straighforward as these
    +    1=1 name=command mappings.
    +
    +    Well, the one exception is "log.decorate", which I'm putting in
    +    "color/log.txt", since it impacts "git log --decorate". It should
    +    really be called color.logDecorate, a subsequent commit will address
    +    that discrepancy.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/Makefile ##
    -@@ Documentation/Makefile: DEFAULT_EDITOR_SQ = $(subst ','\'',$(DEFAULT_EDITOR))
    - ASCIIDOC_EXTRA += -a 'git-default-editor=$(DEFAULT_EDITOR_SQ)'
    - endif
    + ## Documentation/config/color.txt ##
    +@@ Documentation/config/color.txt: color.advice::
    + color.advice.hint::
    + 	Use customized color for hints.
      
    --QUIET_SUBDIR0  = +$(MAKE) -C # space to separate -C and subdir
    --QUIET_SUBDIR1  =
    +-color.blame.highlightRecent::
    +-	Specify the line annotation color for `git blame --color-by-age`
    +-	depending upon the age of the line.
    +-+
    +-This setting should be set to a comma-separated list of color and
    +-date settings, starting and ending with a color, the dates should be
    +-set from oldest to newest. The metadata will be colored with the
    +-specified colors if the line was introduced before the given
    +-timestamp, overwriting older timestamped colors.
    +-+
    +-Instead of an absolute timestamp relative timestamps work as well,
    +-e.g. `2.weeks.ago` is valid to address anything older than 2 weeks.
    +-+
    +-It defaults to `blue,12 month ago,white,1 month ago,red`, which
    +-colors everything older than one year blue, recent changes between
    +-one month and one year old are kept white, and lines introduced
    +-within the last month are colored red.
    +-
    +-color.blame.repeatedLines::
    +-	Use the specified color to colorize line annotations for
    +-	`git blame --color-lines`, if they come from the same commit as the
    +-	preceding line. Defaults to cyan.
    +-
    +-color.branch::
    +-	A boolean to enable/disable color in the output of
    +-	linkgit:git-branch[1]. May be set to `always`,
    +-	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    +-	only when the output is to a terminal. If unset, then the
    +-	value of `color.ui` is used (`auto` by default).
     -
    --ifneq ($(findstring $(MAKEFLAGS),w),w)
    --PRINT_DIR = --no-print-directory
    --else # "make -w"
    --NO_SUBDIR = :
    --endif
    +-color.branch.<slot>::
    +-	Use customized color for branch coloration. `<slot>` is one of
    +-	`current` (the current branch), `local` (a local branch),
    +-	`remote` (a remote-tracking branch in refs/remotes/),
    +-	`upstream` (upstream tracking branch), `plain` (other
    +-	refs).
     -
    --ifneq ($(findstring $(MAKEFLAGS),s),s)
    --ifndef V
    --	QUIET		= @
    --	QUIET_ASCIIDOC	= @echo '   ' ASCIIDOC $@;
    --	QUIET_XMLTO	= @echo '   ' XMLTO $@;
    --	QUIET_DB2TEXI	= @echo '   ' DB2TEXI $@;
    --	QUIET_MAKEINFO	= @echo '   ' MAKEINFO $@;
    --	QUIET_DBLATEX	= @echo '   ' DBLATEX $@;
    --	QUIET_XSLTPROC	= @echo '   ' XSLTPROC $@;
    --	QUIET_GEN	= @echo '   ' GEN $@;
    --	QUIET_STDERR	= 2> /dev/null
    --	QUIET_SUBDIR0	= +@subdir=
    --	QUIET_SUBDIR1	= ;$(NO_SUBDIR) echo '   ' SUBDIR $$subdir; \
    --			  $(MAKE) $(PRINT_DIR) -C $$subdir
    +-color.diff::
    +-	Whether to use ANSI escape sequences to add color to patches.
    +-	If this is set to `always`, linkgit:git-diff[1],
    +-	linkgit:git-log[1], and linkgit:git-show[1] will use color
    +-	for all patches.  If it is set to `true` or `auto`, those
    +-	commands will only use color when output is to the terminal.
    +-	If unset, then the value of `color.ui` is used (`auto` by
    +-	default).
    +-+
    +-This does not affect linkgit:git-format-patch[1] or the
    +-'git-diff-{asterisk}' plumbing commands.  Can be overridden on the
    +-command line with the `--color[=<when>]` option.
     -
    --	QUIET_LINT_GITLINK	= @echo '   ' LINT GITLINK $<;
    --	QUIET_LINT_MANSEC	= @echo '   ' LINT MAN SEC $<;
    --	QUIET_LINT_MANEND	= @echo '   ' LINT MAN END $<;
    +-color.diff.<slot>::
    +-	Use customized color for diff colorization.  `<slot>` specifies
    +-	which part of the patch to use the specified color, and is one
    +-	of `context` (context text - `plain` is a historical synonym),
    +-	`meta` (metainformation), `frag`
    +-	(hunk header), 'func' (function in hunk header), `old` (removed lines),
    +-	`new` (added lines), `commit` (commit headers), `whitespace`
    +-	(highlighting whitespace errors), `oldMoved` (deleted lines),
    +-	`newMoved` (added lines), `oldMovedDimmed`, `oldMovedAlternative`,
    +-	`oldMovedAlternativeDimmed`, `newMovedDimmed`, `newMovedAlternative`
    +-	`newMovedAlternativeDimmed` (See the '<mode>'
    +-	setting of '--color-moved' in linkgit:git-diff[1] for details),
    +-	`contextDimmed`, `oldDimmed`, `newDimmed`, `contextBold`,
    +-	`oldBold`, and `newBold` (see linkgit:git-range-diff[1] for details).
     -
    --	export V
    --endif
    --endif
    +-color.decorate.<slot>::
    +-	Use customized color for 'git log --decorate' output.  `<slot>` is one
    +-	of `branch`, `remoteBranch`, `tag`, `stash` or `HEAD` for local
    +-	branches, remote-tracking branches, tags, stash and HEAD, respectively
    +-	and `grafted` for grafted commits.
     -
    - all: html man
    +-color.grep::
    +-	When set to `always`, always highlight matches.  When `false` (or
    +-	`never`), never.  When set to `true` or `auto`, use color only
    +-	when the output is written to the terminal.  If unset, then the
    +-	value of `color.ui` is used (`auto` by default).
    +-
    +-color.grep.<slot>::
    +-	Use customized color for grep colorization.  `<slot>` specifies which
    +-	part of the line to use the specified color, and is one of
    +-+
    +---
    +-`context`;;
    +-	non-matching text in context lines (when using `-A`, `-B`, or `-C`)
    +-`filename`;;
    +-	filename prefix (when not using `-h`)
    +-`function`;;
    +-	function name lines (when using `-p`)
    +-`lineNumber`;;
    +-	line number prefix (when using `-n`)
    +-`column`;;
    +-	column number prefix (when using `--column`)
    +-`match`;;
    +-	matching text (same as setting `matchContext` and `matchSelected`)
    +-`matchContext`;;
    +-	matching text in context lines
    +-`matchSelected`;;
    +-	matching text in selected lines. Also, used to customize the following
    +-	linkgit:git-log[1] subcommands: `--grep`, `--author` and `--committer`.
    +-`selected`;;
    +-	non-matching text in selected lines. Also, used to customize the
    +-	following linkgit:git-log[1] subcommands: `--grep`, `--author` and
    +-	`--committer`.
    +-`separator`;;
    +-	separators between fields on a line (`:`, `-`, and `=`)
    +-	and between hunks (`--`)
    +---
    ++include::color/blame.txt[]
    ++
    ++include::color/branch.txt[]
    ++
    ++include::color/diff.txt[]
    ++
    ++include::color/log.txt[]
    ++
    ++include::color/grep.txt[]
      
    - html: $(DOC_HTML)
    -
    - ## Makefile ##
    -@@ Makefile: ifndef PAGER_ENV
    - PAGER_ENV = LESS=FRX LV=-c
    - endif
    + color.interactive::
    + 	When set to `always`, always use colors for interactive prompts
    +@@ Documentation/config/color.txt: color.pager::
    + 	output going to the pager. Defaults to true; set this to false
    + 	if your pager does not understand ANSI color codes.
      
    --QUIET_SUBDIR0  = +$(MAKE) -C # space to separate -C and subdir
    --QUIET_SUBDIR1  =
    +-color.push::
    +-	A boolean to enable/disable color in push errors. May be set to
    +-	`always`, `false` (or `never`) or `auto` (or `true`), in which
    +-	case colors are used only when the error output goes to a terminal.
    +-	If unset, then the value of `color.ui` is used (`auto` by default).
     -
    --ifneq ($(findstring w,$(MAKEFLAGS)),w)
    --PRINT_DIR = --no-print-directory
    --else # "make -w"
    --NO_SUBDIR = :
    --endif
    +-color.push.error::
    +-	Use customized color for push errors.
    ++include::color/push.txt[]
    + 
    + color.remote::
    + 	If set, keywords at the start of the line are highlighted. The
    +@@ Documentation/config/color.txt: color.remote.<slot>::
    + 	`hint`, `warning`, `success` or `error` which match the
    + 	corresponding keyword.
    + 
    +-color.showBranch::
    +-	A boolean to enable/disable color in the output of
    +-	linkgit:git-show-branch[1]. May be set to `always`,
    +-	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    +-	only when the output is to a terminal. If unset, then the
    +-	value of `color.ui` is used (`auto` by default).
     -
    --ifneq ($(findstring s,$(MAKEFLAGS)),s)
    --ifndef V
    --	QUIET_CC       = @echo '   ' CC $@;
    --	QUIET_AR       = @echo '   ' AR $@;
    --	QUIET_LINK     = @echo '   ' LINK $@;
    --	QUIET_BUILT_IN = @echo '   ' BUILTIN $@;
    --	QUIET_GEN      = @echo '   ' GEN $@;
    --	QUIET_LNCP     = @echo '   ' LN/CP $@;
    --	QUIET_XGETTEXT = @echo '   ' XGETTEXT $@;
    --	QUIET_MSGFMT   = @echo '   ' MSGFMT $@;
    --	QUIET_GCOV     = @echo '   ' GCOV $@;
    --	QUIET_SP       = @echo '   ' SP $<;
    --	QUIET_HDR      = @echo '   ' HDR $(<:hcc=h);
    --	QUIET_RC       = @echo '   ' RC $@;
    --	QUIET_SPATCH   = @echo '   ' SPATCH $<;
    --	QUIET_SUBDIR0  = +@subdir=
    --	QUIET_SUBDIR1  = ;$(NO_SUBDIR) echo '   ' SUBDIR $$subdir; \
    --			 $(MAKE) $(PRINT_DIR) -C $$subdir
    --	export V
    --	export QUIET_GEN
    --	export QUIET_BUILT_IN
    --endif
    --endif
    +-color.status::
    +-	A boolean to enable/disable color in the output of
    +-	linkgit:git-status[1]. May be set to `always`,
    +-	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    +-	only when the output is to a terminal. If unset, then the
    +-	value of `color.ui` is used (`auto` by default).
     -
    - ifdef NO_INSTALL_HARDLINKS
    - 	export NO_INSTALL_HARDLINKS
    - endif
    -
    - ## config.mak.uname ##
    -@@ config.mak.uname: vcxproj:
    - 	git diff-index --cached --quiet HEAD --
    - 
    - 	# Make .vcxproj files and add them
    --	unset QUIET_GEN QUIET_BUILT_IN; \
    - 	perl contrib/buildsystems/generate -g Vcxproj
    - 	git add -f git.sln {*,*/lib,t/helper/*}/*.vcxproj
    +-color.status.<slot>::
    +-	Use customized color for status colorization. `<slot>` is
    +-	one of `header` (the header text of the status message),
    +-	`added` or `updated` (files which are added but not committed),
    +-	`changed` (files which are changed but not added in the index),
    +-	`untracked` (files which are not tracked by Git),
    +-	`branch` (the current branch),
    +-	`nobranch` (the color the 'no branch' warning is shown in, defaulting
    +-	to red),
    +-	`localBranch` or `remoteBranch` (the local and remote branch names,
    +-	respectively, when branch and tracking information is displayed in the
    +-	status short-format), or
    +-	`unmerged` (files which have unmerged changes).
    ++include::color/showbranch.txt[]
    ++
    ++include::color/status.txt[]
      
    + color.transport::
    + 	A boolean to enable/disable color when pushes are rejected. May be
     
    - ## shared.mak ##
    -@@ shared.mak: space = $(empty) $(empty)
    - wspfx = $(space)$(space)$(space)
    - wspfx_sq = $(call shellquote,$(wspfx))
    - 
    -+### Quieting
    -+## common
    -+QUIET_SUBDIR0  = +$(MAKE) -C # space to separate -C and subdir
    -+QUIET_SUBDIR1  =
    + ## Documentation/config/color/blame.txt (new) ##
    +@@
    ++color.blame.highlightRecent::
    ++	Specify the line annotation color for `git blame --color-by-age`
    ++	depending upon the age of the line.
    +++
    ++This setting should be set to a comma-separated list of color and
    ++date settings, starting and ending with a color, the dates should be
    ++set from oldest to newest. The metadata will be colored with the
    ++specified colors if the line was introduced before the given
    ++timestamp, overwriting older timestamped colors.
    +++
    ++Instead of an absolute timestamp relative timestamps work as well,
    ++e.g. `2.weeks.ago` is valid to address anything older than 2 weeks.
    +++
    ++It defaults to `blue,12 month ago,white,1 month ago,red`, which
    ++colors everything older than one year blue, recent changes between
    ++one month and one year old are kept white, and lines introduced
    ++within the last month are colored red.
     +
    -+ifneq ($(findstring w,$(MAKEFLAGS)),w)
    -+PRINT_DIR = --no-print-directory
    -+else # "make -w"
    -+NO_SUBDIR = :
    -+endif
    ++color.blame.repeatedLines::
    ++	Use the specified color to colorize line annotations for
    ++	`git blame --color-lines`, if they come from the same commit as the
    ++	preceding line. Defaults to cyan.
    +
    + ## Documentation/config/color/branch.txt (new) ##
    +@@
    ++color.branch::
    ++	A boolean to enable/disable color in the output of
    ++	linkgit:git-branch[1]. May be set to `always`,
    ++	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    ++	only when the output is to a terminal. If unset, then the
    ++	value of `color.ui` is used (`auto` by default).
     +
    -+ifneq ($(findstring s,$(MAKEFLAGS)),s)
    -+ifndef V
    -+## common
    -+	QUIET_SUBDIR0  = +@subdir=
    -+	QUIET_SUBDIR1  = ;$(NO_SUBDIR) echo '   ' SUBDIR $$subdir; \
    -+			 $(MAKE) $(PRINT_DIR) -C $$subdir
    ++color.branch.<slot>::
    ++	Use customized color for branch coloration. `<slot>` is one of
    ++	`current` (the current branch), `local` (a local branch),
    ++	`remote` (a remote-tracking branch in refs/remotes/),
    ++	`upstream` (upstream tracking branch), `plain` (other
    ++	refs).
    +
    + ## Documentation/config/color/diff.txt (new) ##
    +@@
    ++color.diff::
    ++	Whether to use ANSI escape sequences to add color to patches.
    ++	If this is set to `always`, linkgit:git-diff[1],
    ++	linkgit:git-log[1], and linkgit:git-show[1] will use color
    ++	for all patches.  If it is set to `true` or `auto`, those
    ++	commands will only use color when output is to the terminal.
    ++	If unset, then the value of `color.ui` is used (`auto` by
    ++	default).
    +++
    ++This does not affect linkgit:git-format-patch[1] or the
    ++'git-diff-{asterisk}' plumbing commands.  Can be overridden on the
    ++command line with the `--color[=<when>]` option.
     +
    -+	QUIET          = @
    -+	QUIET_GEN      = @echo '   ' GEN $@;
    ++color.diff.<slot>::
    ++	Use customized color for diff colorization.  `<slot>` specifies
    ++	which part of the patch to use the specified color, and is one
    ++	of `context` (context text - `plain` is a historical synonym),
    ++	`meta` (metainformation), `frag`
    ++	(hunk header), 'func' (function in hunk header), `old` (removed lines),
    ++	`new` (added lines), `commit` (commit headers), `whitespace`
    ++	(highlighting whitespace errors), `oldMoved` (deleted lines),
    ++	`newMoved` (added lines), `oldMovedDimmed`, `oldMovedAlternative`,
    ++	`oldMovedAlternativeDimmed`, `newMovedDimmed`, `newMovedAlternative`
    ++	`newMovedAlternativeDimmed` (See the '<mode>'
    ++	setting of '--color-moved' in linkgit:git-diff[1] for details),
    ++	`contextDimmed`, `oldDimmed`, `newDimmed`, `contextBold`,
    ++	`oldBold`, and `newBold` (see linkgit:git-range-diff[1] for details).
    +
    + ## Documentation/config/color/grep.txt (new) ##
    +@@
    ++color.diff::
    ++	Whether to use ANSI escape sequences to add color to patches.
    ++	If this is set to `always`, linkgit:git-diff[1],
    ++	linkgit:git-log[1], and linkgit:git-show[1] will use color
    ++	for all patches.  If it is set to `true` or `auto`, those
    ++	commands will only use color when output is to the terminal.
    ++	If unset, then the value of `color.ui` is used (`auto` by
    ++	default).
    +++
    ++This does not affect linkgit:git-format-patch[1] or the
    ++'git-diff-{asterisk}' plumbing commands.  Can be overridden on the
    ++command line with the `--color[=<when>]` option.
     +
    -+## Used in "Makefile"
    -+	QUIET_CC       = @echo '   ' CC $@;
    -+	QUIET_AR       = @echo '   ' AR $@;
    -+	QUIET_LINK     = @echo '   ' LINK $@;
    -+	QUIET_BUILT_IN = @echo '   ' BUILTIN $@;
    -+	QUIET_LNCP     = @echo '   ' LN/CP $@;
    -+	QUIET_XGETTEXT = @echo '   ' XGETTEXT $@;
    -+	QUIET_MSGFMT   = @echo '   ' MSGFMT $@;
    -+	QUIET_GCOV     = @echo '   ' GCOV $@;
    -+	QUIET_SP       = @echo '   ' SP $<;
    -+	QUIET_HDR      = @echo '   ' HDR $(<:hcc=h);
    -+	QUIET_RC       = @echo '   ' RC $@;
    -+	QUIET_SPATCH   = @echo '   ' SPATCH $<;
    ++color.diff.<slot>::
    ++	Use customized color for diff colorization.  `<slot>` specifies
    ++	which part of the patch to use the specified color, and is one
    ++	of `context` (context text - `plain` is a historical synonym),
    ++	`meta` (metainformation), `frag`
    ++	(hunk header), 'func' (function in hunk header), `old` (removed lines),
    ++	`new` (added lines), `commit` (commit headers), `whitespace`
    ++	(highlighting whitespace errors), `oldMoved` (deleted lines),
    ++	`newMoved` (added lines), `oldMovedDimmed`, `oldMovedAlternative`,
    ++	`oldMovedAlternativeDimmed`, `newMovedDimmed`, `newMovedAlternative`
    ++	`newMovedAlternativeDimmed` (See the '<mode>'
    ++	setting of '--color-moved' in linkgit:git-diff[1] for details),
    ++	`contextDimmed`, `oldDimmed`, `newDimmed`, `contextBold`,
    ++	`oldBold`, and `newBold` (see linkgit:git-range-diff[1] for details).
     +
    -+## Used in "Documentation/Makefile"
    -+	QUIET_ASCIIDOC	= @echo '   ' ASCIIDOC $@;
    -+	QUIET_XMLTO	= @echo '   ' XMLTO $@;
    -+	QUIET_DB2TEXI	= @echo '   ' DB2TEXI $@;
    -+	QUIET_MAKEINFO	= @echo '   ' MAKEINFO $@;
    -+	QUIET_DBLATEX	= @echo '   ' DBLATEX $@;
    -+	QUIET_XSLTPROC	= @echo '   ' XSLTPROC $@;
    -+	QUIET_GEN	= @echo '   ' GEN $@;
    -+	QUIET_STDERR	= 2> /dev/null
    ++color.decorate.<slot>::
    ++	Use customized color for 'git log --decorate' output.  `<slot>` is one
    ++	of `branch`, `remoteBranch`, `tag`, `stash` or `HEAD` for local
    ++	branches, remote-tracking branches, tags, stash and HEAD, respectively
    ++	and `grafted` for grafted commits.
     +
    -+	QUIET_LINT_GITLINK	= @echo '   ' LINT GITLINK $<;
    -+	QUIET_LINT_MANSEC	= @echo '   ' LINT MAN SEC $<;
    -+	QUIET_LINT_MANEND	= @echo '   ' LINT MAN END $<;
    ++color.grep::
    ++	When set to `always`, always highlight matches.  When `false` (or
    ++	`never`), never.  When set to `true` or `auto`, use color only
    ++	when the output is written to the terminal.  If unset, then the
    ++	value of `color.ui` is used (`auto` by default).
     +
    -+	export V
    -+endif
    -+endif
    ++color.grep.<slot>::
    ++	Use customized color for grep colorization.  `<slot>` specifies which
    ++	part of the line to use the specified color, and is one of
    +++
    ++--
    ++`context`;;
    ++	non-matching text in context lines (when using `-A`, `-B`, or `-C`)
    ++`filename`;;
    ++	filename prefix (when not using `-h`)
    ++`function`;;
    ++	function name lines (when using `-p`)
    ++`lineNumber`;;
    ++	line number prefix (when using `-n`)
    ++`column`;;
    ++	column number prefix (when using `--column`)
    ++`match`;;
    ++	matching text (same as setting `matchContext` and `matchSelected`)
    ++`matchContext`;;
    ++	matching text in context lines
    ++`matchSelected`;;
    ++	matching text in selected lines. Also, used to customize the following
    ++	linkgit:git-log[1] subcommands: `--grep`, `--author` and `--committer`.
    ++`selected`;;
    ++	non-matching text in selected lines. Also, used to customize the
    ++	following linkgit:git-log[1] subcommands: `--grep`, `--author` and
    ++	`--committer`.
    ++`separator`;;
    ++	separators between fields on a line (`:`, `-`, and `=`)
    ++	and between hunks (`--`)
    ++--
    +
    + ## Documentation/config/color/log.txt (new) ##
    +@@
    ++color.decorate.<slot>::
    ++	Use customized color for 'git log --decorate' output.  `<slot>` is one
    ++	of `branch`, `remoteBranch`, `tag`, `stash` or `HEAD` for local
    ++	branches, remote-tracking branches, tags, stash and HEAD, respectively
    ++	and `grafted` for grafted commits.
    +
    + ## Documentation/config/color/push.txt (new) ##
    +@@
    ++color.push::
    ++	A boolean to enable/disable color in push errors. May be set to
    ++	`always`, `false` (or `never`) or `auto` (or `true`), in which
    ++	case colors are used only when the error output goes to a terminal.
    ++	If unset, then the value of `color.ui` is used (`auto` by default).
     +
    - ### Templates
    - 
    - ## Template for making a GIT-SOMETHING, which changes if a
    ++color.push.error::
    ++	Use customized color for push errors.
     
    - ## templates/Makefile ##
    + ## Documentation/config/color/showbranch.txt (new) ##
     @@
    - include ../shared.mak
    - 
    - # make and install sample templates
    --
    --ifndef V
    --	QUIET = @
    --endif
    --
    - INSTALL ?= install
    - TAR ?= tar
    - RM ?= rm -f
    ++color.showBranch::
    ++	A boolean to enable/disable color in the output of
    ++	linkgit:git-show-branch[1]. May be set to `always`,
    ++	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    ++	only when the output is to a terminal. If unset, then the
    ++	value of `color.ui` is used (`auto` by default).
    +
    + ## Documentation/config/color/status.txt (new) ##
    +@@
    ++color.status::
    ++	A boolean to enable/disable color in the output of
    ++	linkgit:git-status[1]. May be set to `always`,
    ++	`false` (or `never`) or `auto` (or `true`), in which case colors are used
    ++	only when the output is to a terminal. If unset, then the
    ++	value of `color.ui` is used (`auto` by default).
    ++
    ++color.status.<slot>::
    ++	Use customized color for status colorization. `<slot>` is
    ++	one of `header` (the header text of the status message),
    ++	`added` or `updated` (files which are added but not committed),
    ++	`changed` (files which are changed but not added in the index),
    ++	`untracked` (files which are not tracked by Git),
    ++	`branch` (the current branch),
    ++	`nobranch` (the color the 'no branch' warning is shown in, defaulting
    ++	to red),
    ++	`localBranch` or `remoteBranch` (the local and remote branch names,
    ++	respectively, when branch and tracking information is displayed in the
    ++	status short-format), or
    ++	`unmerged` (files which have unmerged changes).
 -:  ----------- > 25:  bbefd56d7f4 start migrate notes
 -:  ----------- > 26:  088a7d52207 moar notes, squash
 -:  ----------- > 27:  4609efcc113 final fixup to notes saga
 -:  ----------- > 28:  1361183fb76 unify the git log config
 4:  d61e2b44f68 ! 29:  831baaf6678 Makefiles: add and use wildcard "mkdir -p" template
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    Makefiles: add and use wildcard "mkdir -p" template
    +    wip link to now-split color files
     
    -    Add a template to do the "mkdir -p" of $(@D) (the parent dir of $@)
    -    for us, and use it for the "make lint-docs" targets I added in
    -    8650c6298c1 (doc lint: make "lint-docs" non-.PHONY, 2021-10-15).
    -
    -    As seen in 4c64fb5aad9 (Documentation/Makefile: fix lint-docs mkdir
    -    dependency, 2021-10-26) maintaining these manual lists of parent
    -    directory dependencies is fragile, in addition to being obviously
    -    verbose.
    -
    -    I used this pattern at the time because I couldn't find another method
    -    than "order-only" prerequisites to avoid doing a "mkdir -p $(@D)" for
    -    every file being created, which as noted in [1] would be significantly
    -    slower.
    -
    -    But as it turns out we can use this neat trick of only doing a "mkdir
    -    -p" if the $(wildcard) macro tells us the path doesn't exist. A re-run
    -    of a performance test similar to thatnoted downthread of [1] in [2]
    -    shows that this is faster, in addition to being less verbose and more
    -    reliable (this uses my "git-hyperfine" thin wrapper for "hyperfine"[3]):
    -
    -        $ git hyperfine -L rev HEAD~0,HEAD~1 -b 'make -C Documentation lint-docs' -p 'rm -rf Documentation/.build' 'make -C Documentation lint-docs'
    -        Benchmark 1: make -C Documentation lint-docs' in 'HEAD~0
    -          Time (mean ± σ):      2.129 s ±  0.011 s    [User: 1.840 s, System: 0.321 s]
    -          Range (min … max):    2.121 s …  2.158 s    10 runs
    -
    -        Benchmark 2: make -C Documentation lint-docs' in 'HEAD~1
    -          Time (mean ± σ):      2.659 s ±  0.002 s    [User: 2.306 s, System: 0.397 s]
    -          Range (min … max):    2.657 s …  2.662 s    10 runs
    -
    -        Summary
    -          'make -C Documentation lint-docs' in 'HEAD~0' ran
    -            1.25 ± 0.01 times faster than 'make -C Documentation lint-docs' in 'HEAD~1'
    -
    -    So let's use that pattern both for the "lint-docs" target, and a few
    -    miscellaneous other targets.
    -
    -    This method of creating parent directories is explicitly racy in that
    -    we don't know if we're going to say always create a "foo" followed by
    -    a "foo/bar" under parallelism, or skip the "foo" because we created
    -    "foo/bar" first. In this case it doesn't matter for anything except
    -    that we aren't guaranteed to get the same number of rules firing when
    -    running make in parallel.
    -
    -    1. https://lore.kernel.org/git/211028.861r45y3pt.gmgdl@evledraar.gmail.com/
    -    2. https://lore.kernel.org/git/211028.86o879vvtp.gmgdl@evledraar.gmail.com/
    -    3. https://gitlab.com/avar/git-hyperfine/
    -
    -    Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -
    - ## Documentation/Makefile ##
    -@@ Documentation/Makefile: quick-install-html: require-htmlrepo
    - print-man1:
    - 	@for i in $(MAN1_TXT); do echo $$i; done
    + ## Documentation/git-blame.txt ##
    +@@ Documentation/git-blame.txt: include::templates/configuration-include-heading.txt[]
      
    --## Lint: Common
    --.build:
    --	$(QUIET)mkdir $@
    --.build/lint-docs: | .build
    --	$(QUIET)mkdir $@
    --
    - ## Lint: gitlink
    --.build/lint-docs/gitlink: | .build/lint-docs
    --	$(QUIET)mkdir $@
    --.build/lint-docs/gitlink/howto: | .build/lint-docs/gitlink
    --	$(QUIET)mkdir $@
    --.build/lint-docs/gitlink/config: | .build/lint-docs/gitlink
    --	$(QUIET)mkdir $@
    - LINT_DOCS_GITLINK = $(patsubst %.txt,.build/lint-docs/gitlink/%.ok,$(HOWTO_TXT) $(DOC_DEP_TXT))
    --$(LINT_DOCS_GITLINK): | .build/lint-docs/gitlink
    --$(LINT_DOCS_GITLINK): | .build/lint-docs/gitlink/howto
    --$(LINT_DOCS_GITLINK): | .build/lint-docs/gitlink/config
    - $(LINT_DOCS_GITLINK): lint-gitlink.perl
    - $(LINT_DOCS_GITLINK): .build/lint-docs/gitlink/%.ok: %.txt
    -+	$(call mkdir_p_parent_template)
    - 	$(QUIET_LINT_GITLINK)$(PERL_PATH) lint-gitlink.perl \
    - 		$< \
    - 		$(HOWTO_TXT) $(DOC_DEP_TXT) \
    -@@ Documentation/Makefile: $(LINT_DOCS_GITLINK): .build/lint-docs/gitlink/%.ok: %.txt
    - lint-docs-gitlink: $(LINT_DOCS_GITLINK)
    + include::config/blame.txt[]
      
    - ## Lint: man-end-blurb
    --.build/lint-docs/man-end-blurb: | .build/lint-docs
    --	$(QUIET)mkdir $@
    - LINT_DOCS_MAN_END_BLURB = $(patsubst %.txt,.build/lint-docs/man-end-blurb/%.ok,$(MAN_TXT))
    --$(LINT_DOCS_MAN_END_BLURB): | .build/lint-docs/man-end-blurb
    - $(LINT_DOCS_MAN_END_BLURB): lint-man-end-blurb.perl
    - $(LINT_DOCS_MAN_END_BLURB): .build/lint-docs/man-end-blurb/%.ok: %.txt
    -+	$(call mkdir_p_parent_template)
    - 	$(QUIET_LINT_MANEND)$(PERL_PATH) lint-man-end-blurb.perl $< >$@
    - .PHONY: lint-docs-man-end-blurb
    --lint-docs-man-end-blurb: $(LINT_DOCS_MAN_END_BLURB)
    ++include::config/color/blame.txt[]
    ++
      
    - ## Lint: man-section-order
    --.build/lint-docs/man-section-order: | .build/lint-docs
    --	$(QUIET)mkdir $@
    - LINT_DOCS_MAN_SECTION_ORDER = $(patsubst %.txt,.build/lint-docs/man-section-order/%.ok,$(MAN_TXT))
    --$(LINT_DOCS_MAN_SECTION_ORDER): | .build/lint-docs/man-section-order
    - $(LINT_DOCS_MAN_SECTION_ORDER): lint-man-section-order.perl
    - $(LINT_DOCS_MAN_SECTION_ORDER): .build/lint-docs/man-section-order/%.ok: %.txt
    -+	$(call mkdir_p_parent_template)
    - 	$(QUIET_LINT_MANSEC)$(PERL_PATH) lint-man-section-order.perl $< >$@
    - .PHONY: lint-docs-man-section-order
    - lint-docs-man-section-order: $(LINT_DOCS_MAN_SECTION_ORDER)
    + SEE ALSO
    + --------
     
    - ## Makefile ##
    -@@ Makefile: all:: $(MOFILES)
    - endif
    - 
    - po/build/locale/%/LC_MESSAGES/git.mo: po/%.po
    --	$(QUIET_MSGFMT)mkdir -p $(dir $@) && $(MSGFMT) -o $@ $<
    -+	$(call mkdir_p_parent_template)
    -+	$(QUIET_MSGFMT)$(MSGFMT) -o $@ $<
    - 
    - ifndef NO_PERL
    - LIB_PERL = $(wildcard perl/Git.pm perl/Git/*.pm perl/Git/*/*.pm perl/Git/*/*/*.pm)
    -@@ Makefile: LIB_CPAN = $(wildcard perl/FromCPAN/*.pm perl/FromCPAN/*/*.pm)
    - LIB_CPAN_GEN = $(patsubst perl/%.pm,perl/build/lib/%.pm,$(LIB_CPAN))
    + ## Documentation/git-branch.txt ##
    +@@ Documentation/git-branch.txt: include::templates/configuration-include-rest-heading.txt[]
      
    - perl/build/lib/%.pm: perl/%.pm GIT-PERL-DEFINES
    --	$(QUIET_GEN)mkdir -p $(dir $@) && \
    -+	$(call mkdir_p_parent_template)
    -+	$(QUIET_GEN) \
    - 	sed -e 's|@@LOCALEDIR@@|$(perl_localedir_SQ)|g' \
    - 	    -e 's|@@NO_GETTEXT@@|$(NO_GETTEXT_SQ)|g' \
    - 	    -e 's|@@NO_PERL_CPAN_FALLBACKS@@|$(call shq,$(NO_PERL_CPAN_FALLBACKS))|g' \
    -@@ Makefile: endif
    + include::config/branch.txt[]
      
    - # install-man depends on Git.3pm even with NO_PERL=Y
    - perl/build/man/man3/Git.3pm: perl/Git.pm
    --	$(QUIET_GEN)mkdir -p $(dir $@) && \
    --	pod2man $< $@
    -+	$(call mkdir_p_parent_template)
    -+	$(QUIET_GEN)pod2man $< $@
    - 
    - FIND_SOURCE_FILES = ( \
    - 	git ls-files \
    -@@ Makefile: test_bindir_programs := $(patsubst %,bin-wrappers/%,$(BINDIR_PROGRAMS_NEED_X) $(
    - all:: $(TEST_PROGRAMS) $(test_bindir_programs)
    ++include::config/color/branch.txt[]
    ++
    + EXAMPLES
    + --------
      
    - bin-wrappers/%: wrap-for-bin.sh
    --	@mkdir -p bin-wrappers
    -+	$(call mkdir_p_parent_template)
    - 	$(QUIET_GEN)sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    - 	     -e 's|@@BUILD_DIR@@|$(shell pwd)|' \
    - 	     -e 's|@@PROG@@|$(patsubst test-%,t/helper/test-%$(X),$(@F))$(patsubst git%,$(X),$(filter $(@F),$(BINDIR_PROGRAMS_NEED_X)))|' < $< > $@ && \
     
    - ## shared.mak ##
    -@@ shared.mak: ifndef V
    - 	QUIET          = @
    - 	QUIET_GEN      = @echo $(wspfx_sq) GEN $@;
    + ## Documentation/git-diff.txt ##
    +@@ Documentation/git-diff.txt: include::templates/configuration-include-heading.txt[]
      
    -+	QUIET_MKDIR_P_PARENT  = @echo $(wspfx_sq) MKDIR -p $(@D);
    -+
    - ## Used in "Makefile"
    - 	QUIET_CC       = @echo $(wspfx_sq) CC $@;
    - 	QUIET_AR       = @echo $(wspfx_sq) AR $@;
    -@@ shared.mak: ifndef V
    - endif
    - endif
    + include::config/diff.txt[]
      
    -+## Helpers
    -+define mkdir_p_parent_template
    -+$(if $(wildcard $(@D)),,$(QUIET_MKDIR_P_PARENT)$(shell mkdir -p $(@D)))
    -+endef
    ++include::config/color/diff.txt[]
     +
    - ### Templates
    - 
    - ## Template for making a GIT-SOMETHING, which changes if a
    + SEE ALSO
    + --------
    + diff(1),
 -:  ----------- > 30:  f1aea2a9a1c notes: link to git-config, not git-log for notes config
 -:  ----------- > 31:  3aa1b6b3a82 Add and prefer color.logDecorate synonym, add warning?
 -:  ----------- > 32:  4832bd82890 generate config list from new files, need this as soon as I do the split
 -:  ----------- > 33:  a2bfb4957a4 fixup rest include path
 -:  ----------- > 34:  e132e1ec481 fixup include path to includes/ for all
-- 
2.34.0.796.g126c2ced91c

