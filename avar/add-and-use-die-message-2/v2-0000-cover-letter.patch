From 421324067310270e19fe3f1b22ea91ec225c5efd Mon Sep 17 00:00:00 2001
Message-Id: <cover-v2-0.6-00000000000-20211207T182158Z-avarab@gmail.com>
In-Reply-To: <cover-0.4-00000000000-20211206T165221Z-avarab@gmail.com>
References: <cover-0.4-00000000000-20211206T165221Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Tue, 7 Dec 2021 19:21:58 +0100
Subject: [PATCH v2 0/6] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (6):
  usage.c: add a die_message() routine
  usage.c API users: use die_message() for "fatal :" + exit 128
  usage.c API users: use die_message() for error() + exit 128
  gc: return from cmd_gc(), don't call exit()
  usage.c + gc: add and use a die_message_errno()
  config API: use get_error_routine(), not vreportf()

 builtin/fast-import.c | 12 +++++++-----
 builtin/gc.c          | 14 ++++++++------
 builtin/notes.c       |  9 +++++----
 config.c              |  3 ++-
 git-compat-util.h     |  4 +++-
 http-backend.c        |  3 ++-
 parse-options.c       |  2 +-
 run-command.c         | 16 +++++-----------
 usage.c               | 42 ++++++++++++++++++++++++++++++++++++++----
 9 files changed, 71 insertions(+), 34 deletions(-)

Range-diff against v1:
-:  ----------- > 1:  65ae6fe7cbe usage.c: add a die_message() routine
1:  4bd4a8fbdfd ! 2:  f5a98901498 common-main.c: call exit(), don't return
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    common-main.c: call exit(), don't return
    +    usage.c API users: use die_message() for "fatal :" + exit 128
     
    -    Change the main() function to call "exit()" instead of ending with a
    -    "return" statement. The "exit()" function is our own wrapper that
    -    calls trace2_cmd_exit_fl() for us, from git-compat-util.h:
    +    Change code that printed its own "fatal: " message and exited with a
    +    status code of 128 to use the die_message() function added in a
    +    preceding commit.
     
    -            #define exit(code) exit(trace2_cmd_exit_fl(__FILE__, __LINE__, (code)))
    -
    -    That "exit()" wrapper has been in use ever since ee4512ed481 (trace2:
    -    create new combined trace facility, 2019-02-22).
    -
    -    This changes nothing about how we "exit()", as we'd invoke
    -    "trace2_cmd_exit_fl()" in both cases due to the wrapper, this change
    -    makes it easier to reason about this code, as we're now always
    -    obviously relying on our "exit()" wrapper.
    -
    -    There is already code immediately downstream of our "main()" which has
    -    a hard reliance on that, e.g. the various "exit()" calls downstream of
    -    "cmd_main()" in "git.c".
    -
    -    We even had a comment in "t/helper/test-trace2.c" that seemed to be
    -    confused about how the "exit()" wrapper interacted with uses of
    -    "return", even though it was introduced in the same trace2 series in
    -    a15860dca3f (trace2: t/helper/test-trace2, t0210.sh, t0211.sh,
    -    t0212.sh, 2019-02-22), after the aforementioned ee4512ed481. Perhaps
    -    it pre-dated the "exit()" wrapper?
    -
    -    Let's also update both the documentation and comments accordingly: The
    -    documentation added in e544221d97a (trace2:
    -    Documentation/technical/api-trace2.txt, 2019-02-22) already said of
    -    the "exit" event that "[it] is emitted when git calls `exit()". But
    -    the "main()" example then called trace2_cmd_exit(). Let's have it
    -    invoke "exit()" instead, as the code in "common-main.c" now does.
    +    This change also demonstrates why the return value of
    +    die_message_routine() needed to be that of "report_fn". We have
    +    callers such as the run-command.c::child_err_spew() which would like
    +    to replace its error routine with the return value of
    +    "get_die_message_routine()".
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## Documentation/technical/api-trace2.txt ##
    -@@ Documentation/technical/api-trace2.txt: Initialization::
    - ----------------
    - int main(int argc, const char **argv)
    + ## builtin/fast-import.c ##
    +@@ builtin/fast-import.c: static void dump_marks(void);
    + 
    + static NORETURN void die_nicely(const char *err, va_list params)
      {
    --	int exit_code;
    --
    - 	trace2_initialize();
    - 	trace2_cmd_start(argv);
    ++	va_list cp;
    + 	static int zombie;
    +-	char message[2 * PATH_MAX];
    ++	report_fn die_message_fn = get_die_message_routine();
      
    --	exit_code = cmd_main(argc, argv);
    --
    --	trace2_cmd_exit(exit_code);
    --
    --	return exit_code;
    -+	/* Our exit() will call trace2_cmd_exit_fl() */
    -+	exit(cmd_main(argc, argv));
    - }
    - ----------------
    +-	vsnprintf(message, sizeof(message), err, params);
    +-	fputs("fatal: ", stderr);
    +-	fputs(message, stderr);
    +-	fputc('\n', stderr);
    ++	va_copy(cp, params);
    ++	die_message_fn(err, params);
      
    + 	if (!zombie) {
    ++		char message[2 * PATH_MAX];
    ++
    + 		zombie = 1;
    ++		vsnprintf(message, sizeof(message), err, cp);
    + 		write_crash_report(message);
    + 		end_packfile();
    + 		unkeep_all_packs();
     
    - ## common-main.c ##
    -@@ common-main.c: int main(int argc, const char **argv)
    + ## http-backend.c ##
    +@@ http-backend.c: static NORETURN void die_webcgi(const char *err, va_list params)
    + {
    + 	if (dead <= 1) {
    + 		struct strbuf hdr = STRBUF_INIT;
    ++		report_fn die_message_fn = get_die_message_routine();
      
    - 	result = cmd_main(argc, argv);
    +-		vreportf("fatal: ", err, params);
    ++		die_message_fn(err, params);
      
    --	trace2_cmd_exit(result);
    --
    --	return result;
    -+	/*
    -+	 * This is an "exit()" wrapper defined in "git-compat-util.h",
    -+	 * which will do trace2 teardown for us. I.e. we are
    -+	 * guaranteed to correctly log via trace2 even if someone
    -+	 * called exit() before returning from "cmd_main()".
    -+	 */
    -+	exit(result);
    - }
    + 		http_status(&hdr, 500, "Internal Server Error");
    + 		hdr_nocache(&hdr);
     
    - ## t/helper/test-trace2.c ##
    -@@ t/helper/test-trace2.c: static int print_usage(void)
    -  *    [] the "cmd_name" event has been generated.
    -  *    [] this writes various "def_param" events for interesting config values.
    -  *
    -- * We further assume that if we return (rather than exit()), trace2_cmd_exit()
    -- * will be called by test-tool.c:cmd_main().
    -+ * It doesn't matter if we "return" here or call "exit()", since our
    -+ * "exit()" is a wrapper that will call trace2_cmd_exit_fl. It would
    -+ * matter if we bypassed it and called "_exit()". Even if it doesn't
    -+ * matter for the narrow case of trace2 testing, let's be nice to
    -+ * test-tool.c's "cmd_main()" and common-main.c's "main()" and
    -+ * "return" here.
    -  */
    - int cmd__trace2(int argc, const char **argv)
    + ## parse-options.c ##
    +@@ parse-options.c: void NORETURN usage_msg_opt(const char *msg,
    + 		   const char * const *usagestr,
    + 		   const struct option *options)
      {
    +-	fprintf(stderr, "fatal: %s\n\n", msg);
    ++	die_message("%s\n", msg); /* The extra \n is intentional */
    + 	usage_with_options(usagestr, options);
    + }
     
    - ## trace2.h ##
    -@@ trace2.h: void trace2_cmd_start_fl(const char *file, int line, const char **argv);
    -  */
    - int trace2_cmd_exit_fl(const char *file, int line, int code);
    + ## run-command.c ##
    +@@ run-command.c: static void child_close_pair(int fd[2])
    + 	child_close(fd[1]);
    + }
      
    --#define trace2_cmd_exit(code) (trace2_cmd_exit_fl(__FILE__, __LINE__, (code)))
    +-/*
    +- * parent will make it look like the child spewed a fatal error and died
    +- * this is needed to prevent changes to t0061.
    +- */
    +-static void fake_fatal(const char *err, va_list params)
    +-{
    +-	vreportf("fatal: ", err, params);
    +-}
     -
    - /*
    -  * Emit an 'error' event.
    -  *
    + static void child_error_fn(const char *err, va_list params)
    + {
    + 	const char msg[] = "error() should not be called in child\n";
    +@@ run-command.c: static void NORETURN child_die_fn(const char *err, va_list params)
    + static void child_err_spew(struct child_process *cmd, struct child_err *cerr)
    + {
    + 	static void (*old_errfn)(const char *err, va_list params);
    ++	report_fn die_message_routine = get_die_message_routine();
    + 
    + 	old_errfn = get_error_routine();
    +-	set_error_routine(fake_fatal);
    ++	set_error_routine(die_message_routine);
    + 	errno = cerr->syserr;
    + 
    + 	switch (cerr->err) {
    +@@ run-command.c: static void *run_thread(void *data)
    + 
    + static NORETURN void die_async(const char *err, va_list params)
    + {
    +-	vreportf("fatal: ", err, params);
    ++	report_fn die_message_fn = get_die_message_routine();
    ++
    ++	die_message_fn(err, params);
    + 
    + 	if (in_async()) {
    + 		struct async *async = pthread_getspecific(async_key);
2:  2a17ed9f135 < -:  ----------- pack-objects: use BUG(...) not die("BUG: ...")
3:  ab89fec50c3 ! 3:  c7d67fd41fa strbuf.h: use BUG(...) not die("BUG: ...")
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    strbuf.h: use BUG(...) not die("BUG: ...")
    +    usage.c API users: use die_message() for error() + exit 128
     
    -    In 7141efab248 (strbuf: clarify assertion in strbuf_setlen(),
    -    2011-04-27) this 'die("BUG: "' invocation was added with the rationale
    -    that strbuf.c had existing users doing the same, but those users were
    -    later changed to use BUG() in 033abf97fcb (Replace all die("BUG: ...")
    -    calls by BUG() ones, 2018-05-02). Let's do the same here.
    +    Continue the migration of code that printed a message and exited with
    +    128. In this case the caller used "error()", so we'll be changing the
    +    output from "error: " to "fatal: ". This change is intentional and
    +    desired.
    +
    +    This code is dying, so it should emit "fatal", the only reason it
    +    didn't do so was because before the existence of "die_message()" it
    +    would have needed to craft its own "fatal: " message.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## strbuf.h ##
    -@@ strbuf.h: void strbuf_grow(struct strbuf *sb, size_t amount);
    - static inline void strbuf_setlen(struct strbuf *sb, size_t len)
    + ## builtin/notes.c ##
    +@@ builtin/notes.c: static void prepare_note_data(const struct object_id *object, struct note_data *
    + static void write_note_data(struct note_data *d, struct object_id *oid)
      {
    - 	if (len > (sb->alloc ? sb->alloc - 1 : 0))
    --		die("BUG: strbuf_setlen() beyond buffer");
    -+		BUG("strbuf_setlen() beyond buffer");
    - 	sb->len = len;
    - 	if (sb->buf != strbuf_slopbuf)
    - 		sb->buf[len] = '\0';
    + 	if (write_object_file(d->buf.buf, d->buf.len, blob_type, oid)) {
    +-		error(_("unable to write note object"));
    ++		int status = die_message(_("unable to write note object"));
    ++
    + 		if (d->edit_path)
    +-			error(_("the note contents have been left in %s"),
    +-				d->edit_path);
    +-		exit(128);
    ++			die_message(_("the note contents have been left in %s"),
    ++				    d->edit_path);
    ++		exit(status);
    + 	}
    + }
    + 
-:  ----------- > 4:  f224a281a10 gc: return from cmd_gc(), don't call exit()
-:  ----------- > 5:  2b4a3910654 usage.c + gc: add and use a die_message_errno()
-:  ----------- > 6:  42132406731 config API: use get_error_routine(), not vreportf()
-- 
2.34.1.898.g5a552c2e5f0

