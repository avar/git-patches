From 8dcb126988174610788a7275348d6a4ec2f34833 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v6-0.2-00000000000-20210916T085311Z-avarab@gmail.com>
In-Reply-To: <cover-v5-0.3-00000000000-20210907T212626Z-avarab@gmail.com>
References: <cover-v5-0.3-00000000000-20210907T212626Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 16 Sep 2021 10:53:11 +0200
Subject: [PATCH v6 0/2] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (2):
  Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
  tests: add a test mode for SANITIZE=leak, run it in CI

 .github/workflows/main.yml |  3 +++
 Makefile                   |  5 +++++
 ci/install-dependencies.sh |  2 +-
 ci/lib.sh                  |  9 ++++++++-
 ci/run-build-and-tests.sh  |  2 +-
 t/README                   |  7 +++++++
 t/t0000-basic.sh           |  1 +
 t/t0004-unwritable.sh      |  3 ++-
 t/test-lib.sh              | 21 +++++++++++++++++++++
 9 files changed, 49 insertions(+), 4 deletions(-)

Range-diff against v5:
1:  bdfe2279271 = 1:  fc7ba4cb1c3 Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
2:  6aaa60e3759 < -:  ----------- CI: refactor "if" to "case" statement
3:  f3cd04b16d1 ! 2:  8dcb1269881 tests: add a test mode for SANITIZE=leak, run it in CI
    @@ Commit message
         one-offs without structured regression testing.
     
         This change adds CI testing for it. We'll now build and test
    -    t000[04]*.sh under both Linux and OSX. The new jobs are called
    -    "linux-leaks" and "osx-leaks".
    +    t000[04]*.sh under Linux with a new job called "linux-leaks".
     
         The CI target uses a new GIT_TEST_PASSING_SANITIZE_LEAK=true test
         mode. When running in that mode, we'll assert that we were compiled
         with SANITIZE=leak. We'll then skip all tests, except those that we've
         opted-in by setting "TEST_PASSES_SANITIZE_LEAK=true".
     
    -    A test tests setting "TEST_PASSES_SANITIZE_LEAK=true" setting can in
    -    turn make use of the "SANITIZE_LEAK" prerequisite, should they wish to
    +    A test setting "TEST_PASSES_SANITIZE_LEAK=true" setting can in turn
    +    make use of the "SANITIZE_LEAK" prerequisite, should they wish to
         selectively skip tests even under
    -    "GIT_TEST_PASSING_SANITIZE_LEAK=true". In a preceding commit we
    +    "GIT_TEST_PASSING_SANITIZE_LEAK=true". In the preceding commit we
         started doing this in "t0004-unwritable.sh" under SANITIZE=leak, now
         it'll combine nicely with "GIT_TEST_PASSING_SANITIZE_LEAK=true".
     
    @@ Commit message
         936e58851a (Merge branch 'ah/plugleaks', 2021-05-07) for some of the
         past history of "one-off" SANITIZE=leak (and more) fixes.
     
    -    The reason for using gcc on OSX over the clang default is because when
    -    used with clang on "macos-latest" it'll currently fail to build with:
    -
    -        clang: error: unsupported option '-fsanitize=leak' for target 'x86_64-apple-darwin19.6.0'
    -
    -    If that's sorted out in the future we might want to run that job with
    -    "clang" merely to make use of the default, and also to add some
    -    compiler variance into the mix. Both use the
    -    "AddressSanitizerLeakSanitizer" library[4], so in they shouldn't
    -    behave differently under GCC or clang.
    +    As noted in [5] we can't support this on OSX yet until Clang 14 is
    +    released, at that point we'll probably want to resurrect that
    +    "osx-leaks" job.
     
         1. https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
         2. https://lore.kernel.org/git/YS9OT%2Fpn5rRK9cGB@coredump.intra.peff.net/
         3. https://lore.kernel.org/git/87czsv2idy.fsf@evledraar.gmail.com/
         4. https://lore.kernel.org/git/YS9ZIDpANfsh7N+S@coredump.intra.peff.net/
    +    5. https://lore.kernel.org/git/20210916035603.76369-1-carenas@gmail.com/
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    +    Signed-off-by: Carlo Marcelo Arenas Belón <carenas@gmail.com>
     
      ## .github/workflows/main.yml ##
     @@ .github/workflows/main.yml: jobs:
    @@ .github/workflows/main.yml: jobs:
     +          - jobname: linux-leaks
     +            cc: gcc
     +            pool: ubuntu-latest
    -+          - jobname: osx-leaks
    -+            cc: gcc
    -+            pool: macos-latest
          env:
            CC: ${{matrix.vector.cc}}
            jobname: ${{matrix.vector.jobname}}
    @@ ci/install-dependencies.sh: UBUNTU_COMMON_PKGS="make libssl-dev libcurl4-openssl
      	sudo apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
      	sudo apt-get -q update
      	sudo apt-get -q -y install language-pack-is libsvn-perl apache2 \
    - 		$UBUNTU_COMMON_PKGS
    - 	case "$jobname" in
    --	linux-gcc)
    -+	linux-gcc|linux-leaks)
    - 		sudo apt-get -q -y install gcc-8
    - 		;;
    - 	esac
    -@@ ci/install-dependencies.sh: linux-clang|linux-gcc)
    - 		cp git-lfs-$LINUX_GIT_LFS_VERSION/git-lfs .
    - 	popd
    - 	;;
    --osx-clang|osx-gcc)
    -+osx-clang|osx-gcc|osx-leaks)
    - 	export HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1
    - 	# Uncomment this if you want to run perf tests:
    - 	# brew install gnu-time
     
      ## ci/lib.sh ##
     @@ ci/lib.sh: export GIT_TEST_CLONE_2GB=true
    @@ ci/lib.sh: export GIT_TEST_CLONE_2GB=true
      case "$jobname" in
     -linux-clang|linux-gcc)
     +linux-clang|linux-gcc|linux-leaks)
    - 	case "$jobname" in
    --	linux-gcc)
    -+	linux-gcc|linux-leaks)
    + 	if [ "$jobname" = linux-gcc ]
    + 	then
      		export CC=gcc-8
    - 		MAKEFLAGS="$MAKEFLAGS PYTHON_PATH=/usr/bin/python3"
    - 		;;
    -@@ ci/lib.sh: linux-clang|linux-gcc)
    - 	GIT_LFS_PATH="$HOME/custom/git-lfs"
    - 	export PATH="$GIT_LFS_PATH:$P4_PATH:$PATH"
    - 	;;
    --osx-clang|osx-gcc)
    -+osx-clang|osx-gcc|osx-leaks)
    - 	case "$jobname" in
    --	osx-gcc)
    -+	osx-gcc|osx-leaks)
    - 		export CC=gcc-9
    - 		MAKEFLAGS="$MAKEFLAGS PYTHON_PATH=$(which python3)"
    - 		;;
     @@ ci/lib.sh: linux-musl)
      	;;
      esac
      
     +case "$jobname" in
    -+linux-leaks|osx-leaks)
    ++linux-leaks)
     +	export SANITIZE=leak
     +	export GIT_TEST_PASSING_SANITIZE_LEAK=true
     +	;;
    @@ ci/lib.sh: linux-musl)
      MAKEFLAGS="$MAKEFLAGS CC=${CC:-cc}"
     
      ## ci/run-build-and-tests.sh ##
    -@@ ci/run-build-and-tests.sh: esac
    +@@ ci/run-build-and-tests.sh: fi
      
      make
      case "$jobname" in
    @@ t/test-lib.sh: then
     +fi
     +
      # Last-minute variable setup
    + USER_HOME="$HOME"
      HOME="$TRASH_DIRECTORY"
    - GNUPGHOME="$HOME/gnupg-home-not-used"
-- 
2.33.0.1056.gb2c8c79e36d

