From 80a746312a76ef9239f9771664b7716fee002c51 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v4-0.7-00000000000-20210730T174308Z-avarab@gmail.com>
In-Reply-To: <cover-v3-0.7-00000000000-20210730T092843Z-avarab@gmail.com>
References: <cover-v3-0.7-00000000000-20210730T092843Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Fri, 30 Jul 2021 19:43:08 +0200
Subject: [PATCH v4 0/7] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Jeff King (3):
  http: drop support for curl < 7.11.1
  http: drop support for curl < 7.16.0
  http: drop support for curl < 7.19.4

Ævar Arnfjörð Bjarmason (4):
  http: drop support for curl < 7.17.0
  http: drop support for curl < 7.18.0
  http: drop support for curl < 7.19.3
  http: rename CURLOPT_FILE to CURLOPT_WRITEDATA

 http-push.c   |  29 +--------
 http-walker.c |  14 +----
 http.c        | 171 ++------------------------------------------------
 http.h        |  46 --------------
 imap-send.c   |   4 --
 remote-curl.c |  11 +---
 6 files changed, 10 insertions(+), 265 deletions(-)

Range-diff against v3:
5:  93a2775d0ee ! 1:  6bd41764a54 http: centralize the accounting of libcurl dependencies
    @@
      ## Metadata ##
    -Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    +Author: Jeff King <peff@peff.net>
     
      ## Commit message ##
    -    http: centralize the accounting of libcurl dependencies
    +    http: drop support for curl < 7.11.1
     
    -    As noted in preceding commits checking against LIBCURL_VERSION_NUM
    -    isn't as reliable as checking specific defines in curl, as some
    -    distros have been known to backport features. Furthermore we had at
    -    least one case of someone confusing base 10 for base 16 in comparing
    -    the version.
    +    Drop support for this ancient version of curl and simplify the code by
    +    allowing us get rid of some "#ifdef"'s.
     
    -    Let's add a git-curl-compat.h header that'll keep track of these
    -    dependencies, and make the next round of deprecations easier. This
    -    patch is mostly obvious, with the following exceptions:
    +    Git will not build with vanilla curl older than 7.11.1 due our use of
    +    CURLOPT_POSTFIELDSIZE in 37ee680d9b
    +    (http.postbuffer: allow full range of ssize_t values,
    +    2017-04-11). This field was introduced in curl 7.11.1.
     
    -     - In aeff8a61216 (http: implement public key pinning, 2016-02-15) a
    -       dependency and warning() was added if curl older than 7.44.0 was
    -       used, but the relevant code depended on CURLOPT_PINNEDPUBLICKEY,
    -       introduced in 7.39.0.
    +    We could solve these compilation problems with more #ifdefs,
    +    but it's not worth the trouble. Version 7.11.1 came out in
    +    March of 2004, over 17 years ago. Let's declare that too old
    +    and drop any existing ifdefs that go further back. One
    +    obvious benefit is that we'll have fewer conditional bits
    +    cluttering the code.
     
    -     - We did not use CURL_SOCKOPT_OK and instead hardcoded its value in
    -       a15d069a198 (http: enable keepalive on TCP sockets, 2013-10-12),
    -       let's use it and guard its use by a new GITCURL_HAVE_* check.
    -
    -     - We guarded the support for http.version with a check for curl
    -       7.47.0, looking at the history of how that happen reveals that an
    -       earlier on-list version of d73019feb44 (http: add support selecting
    -       http version, 2018-11-08) depended on CURL_HTTP_VERSION_2TLS (which
    -       was added in 7.47.0).
    -
    -       But the version this code depended on was in fact 7.43.0, since
    -       that's when CURL_HTTP_VERSION_2_0 was added.
    +    This patch drops all #ifdefs that reference older versions
    +    (note that curl's preprocessor macros are in hex, so we're
    +    looking for 070b01, not 071101).
     
    +    Signed-off-by: Jeff King <peff@peff.net>
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
    - ## git-curl-compat.h (new) ##
    -@@
    -+#ifndef GIT_CURL_COMPAT_H
    -+#define GIT_CURL_COMPAT_H
    -+
    -+/**
    -+ * This header centralized the declaration of our libcurl dependencies
    -+ * to make it easy to discover the oldest versions we support, and to
    -+ * inform decisions about removing support for older libcurl in the
    -+ * future.
    -+ *
    -+ * The source of truth for what versions have which symbols is
    -+ * https://github.com/curl/curl/blob/master/docs/libcurl/symbols-in-versions;
    -+ * the release dates are taken from curl.git (at
    -+ * https://github.com/curl/curl/).
    -+ *
    -+ * For each X symbol we need from curl we check if it exists and
    -+ * declare our own GIT_CURl_HAVE_X, or if it's for both X and Y
    -+ * GIT_CURl_HAVE_X_and_Y, where the "Y" in "X_and_Y" is only the part
    -+ * of the symbol name that "X" and "Y" don't have in common.
    -+ *
    -+ * We avoid comparisons against LIBCURL_VERSION_NUM, enterprise
    -+ * distros have been known to backport symbols to their older curl
    -+ * versions.
    -+ *
    -+ * Keep any symbols in date order of when their support was
    -+ * introduced, oldest first.
    -+ */
    -+
    -+/**
    -+ * CURL_SOCKOPT_OK was added in 7.21.5, released in April 2011.
    -+ */
    -+#ifdef CURL_SOCKOPT_OK
    -+#define GITCURL_HAVE_CURL_SOCKOPT_OK 1
    -+#endif
    -+
    -+/**
    -+ * CURLOPT_TCP_KEEPALIVE was added in 7.25.0, released in March 2012.
    -+ */
    -+#ifdef CURLOPT_TCP_KEEPALIVE
    -+#define GITCURL_HAVE_CURLOPT_TCP_KEEPALIVE 1
    -+#endif
    -+
    -+
    -+/**
    -+ * CURLOPT_LOGIN_OPTIONS was added in 7.34.0, released in December
    -+ * 2013.
    -+ */
    -+#ifdef CURLOPT_LOGIN_OPTIONS
    -+#define GIT_CURL_HAVE_CURLOPT_LOGIN_OPTIONS 1
    -+#endif
    -+
    -+/**
    -+ * CURL_SSLVERSION_TLSv1_[012] was added in 7.34.0, released in
    -+ * December 2013.
    -+ */
    -+#if defined(CURL_SSLVERSION_TLSv1_0) && \
    -+    defined(CURL_SSLVERSION_TLSv1_1) && \
    -+    defined(CURL_SSLVERSION_TLSv1_2)
    -+#define GIT_CURL_HAVE_CURL_SSLVERSION_TLSv1_0_and_1_and_2
    -+#endif
    -+
    -+/**
    -+ * CURLOPT_PINNEDPUBLICKEY was added in 7.39.0, released in November
    -+ * 2014.
    -+ */
    -+#ifdef CURLOPT_PINNEDPUBLICKEY
    -+#define GIT_CURL_HAVE_CURLOPT_PINNEDPUBLICKEY 1
    -+#endif
    -+
    -+/**
    -+ * CURL_HTTP_VERSION_2 was added in 7.43.0, released in June 2015.
    -+ */
    -+#ifdef CURL_HTTP_VERSION_2
    -+#define GIT_CURL_HAVE_CURL_HTTP_VERSION_2 1
    -+#endif
    -+
    -+/**
    -+ * CURLSSLOPT_NO_REVOKE was added in 7.44.0, released in August 2015.
    -+ */
    -+#ifdef CURLSSLOPT_NO_REVOKE
    -+#define GIT_CURL_HAVE_CURLSSLOPT_NO_REVOKE 1
    -+#endif
    -+
    -+/**
    -+ * CURLOPT_PROXY_CAINFO was added in 7.52.0, released in August 2017.
    -+ */
    -+#ifdef CURLOPT_PROXY_CAINFO
    -+#define GIT_CURL_HAVE_CURLOPT_PROXY_CAINFO 1
    -+#endif
    -+
    -+/**
    -+ * CURLOPT_PROXY_{KEYPASSWD,SSLCERT,SSLKEY} was added in 7.52.0,
    -+ * released in August 2017.
    -+ */
    -+#if defined(CURLOPT_PROXY_KEYPASSWD) && \
    -+    defined(CURLOPT_PROXY_SSLCERT) && \
    -+    defined(CURLOPT_PROXY_SSLKEY)
    -+#define GIT_CURL_HAVE_CURLOPT_PROXY_KEYPASSWD_and_SSLCERT_and_SSLKEY 1
    -+#endif
    -+
    -+/**
    -+ * CURL_SSLVERSION_TLSv1_3 was added in 7.53.0, released in February
    -+ * 2017.
    -+ */
    -+#ifdef CURL_SSLVERSION_TLSv1_3
    -+#define GIT_CURL_HAVE_CURL_SSLVERSION_TLSv1_3 1
    -+#endif
    -+
    -+/**
    -+ * CURLSSLSET_{NO_BACKENDS,OK,TOO_LATE,UNKNOWN_BACKEND} were added in
    -+ * 7.56.0, released in September 2017.
    -+ */
    -+#if defined(CURLSSLSET_NO_BACKENDS) && \
    -+    defined(CURLSSLSET_OK) && \
    -+    defined(CURLSSLSET_TOO_LATE) && \
    -+    defined(CURLSSLSET_UNKNOWN_BACKEND)
    -+#define GIT_CURL_HAVE_CURLSSLSET_NO_BACKENDS_and_OK_and_TOO_LATE_and_UNKNOWN_BACKEND 1
    -+#endif
    -+
    -+#endif
    -
      ## http.c ##
     @@
    - #include "git-compat-util.h"
    -+#include "git-curl-compat.h"
    - #include "http.h"
    - #include "config.h"
    - #include "pack.h"
    + static struct trace_key trace_curl = TRACE_KEY_INIT(CURL);
    + static int trace_curl_data = 1;
    + static int trace_curl_redact = 1;
    +-#if LIBCURL_VERSION_NUM >= 0x070a08
    + long int git_curl_ipresolve = CURL_IPRESOLVE_WHATEVER;
    +-#else
    +-long int git_curl_ipresolve;
    +-#endif
    + int active_requests;
    + int http_is_verbose;
    + ssize_t http_post_buffer = 16 * LARGE_PACKET_MAX;
    + 
    +-#if LIBCURL_VERSION_NUM >= 0x070a06
    +-#define LIBCURL_CAN_HANDLE_AUTH_ANY
    +-#endif
    +-
    + static int min_curl_sessions = 1;
    + static int curl_session_count;
    + #ifdef USE_CURL_MULTI
     @@ http.c: static struct {
    - 	{ "sslv2", CURL_SSLVERSION_SSLv2 },
    - 	{ "sslv3", CURL_SSLVERSION_SSLv3 },
    - 	{ "tlsv1", CURL_SSLVERSION_TLSv1 },
    --#if LIBCURL_VERSION_NUM >= 0x072200
    -+#if GIT_CURL_HAVE_CURL_SSLVERSION_TLSv1_0_AND_1_AND_2
    - 	{ "tlsv1.0", CURL_SSLVERSION_TLSv1_0 },
    - 	{ "tlsv1.1", CURL_SSLVERSION_TLSv1_1 },
    - 	{ "tlsv1.2", CURL_SSLVERSION_TLSv1_2 },
    - #endif
    --#if LIBCURL_VERSION_NUM >= 0x073400
    -+#if GIT_CURL_HAVE_CURL_SSLVERSION_TLSv1_3
      	{ "tlsv1.3", CURL_SSLVERSION_TLSv1_3 },
      #endif
      };
    +-#if LIBCURL_VERSION_NUM >= 0x070903
      static const char *ssl_key;
    +-#endif
    +-#if LIBCURL_VERSION_NUM >= 0x070908
      static const char *ssl_capath;
    +-#endif
    +-#if LIBCURL_VERSION_NUM >= 0x071304
      static const char *curl_no_proxy;
    --#if LIBCURL_VERSION_NUM >= 0x072c00
    +-#endif
    + #if LIBCURL_VERSION_NUM >= 0x072c00
      static const char *ssl_pinnedkey;
    + #endif
    +@@ http.c: static struct {
    + 	{ "digest", CURLAUTH_DIGEST },
    + 	{ "negotiate", CURLAUTH_GSSNEGOTIATE },
    + 	{ "ntlm", CURLAUTH_NTLM },
    +-#ifdef LIBCURL_CAN_HANDLE_AUTH_ANY
    + 	{ "anyauth", CURLAUTH_ANY },
     -#endif
    - static const char *ssl_cainfo;
    - static long curl_low_speed_limit = -1;
    - static long curl_low_speed_time = -1;
    -@@ http.c: static int http_options(const char *var, const char *value, void *cb)
    - 	}
    + 	/*
    + 	 * CURLAUTH_DIGEST_IE has no corresponding command-line option in
    + 	 * curl(1) and is not included in CURLAUTH_ANY, so we leave it out
    +@@ http.c: enum http_follow_config http_follow_config = HTTP_FOLLOW_INITIAL;
      
    - 	if (!strcmp("http.pinnedpubkey", var)) {
    --#if LIBCURL_VERSION_NUM >= 0x072c00
    --		return git_config_pathname(&ssl_pinnedkey, var, value);
    --#else
    --		warning(_("Public key pinning not supported with cURL < 7.44.0"));
    --		return 0;
    -+#ifndef GIT_CURL_HAVE_CURLOPT_PINNEDPUBLICKEY
    -+		warning(_("Public key pinning not supported with cURL < 7.39.0"));
    + static struct credential cert_auth = CREDENTIAL_INIT;
    + static int ssl_cert_password_required;
    +-#ifdef LIBCURL_CAN_HANDLE_AUTH_ANY
    + static unsigned long http_auth_methods = CURLAUTH_ANY;
    + static int http_auth_methods_restricted;
    + /* Modes for which empty_auth cannot actually help us. */
    +@@ http.c: static unsigned long empty_auth_useless =
    + 	| CURLAUTH_DIGEST_IE
      #endif
    -+		return git_config_pathname(&ssl_pinnedkey, var, value);
    - 	}
    + 	| CURLAUTH_DIGEST;
    +-#endif
      
    - 	if (!strcmp("http.extraheader", var)) {
    -@@ http.c: static int has_cert_password(void)
    - 	return 1;
    - }
    + static struct curl_slist *pragma_header;
    + static struct curl_slist *no_pragma_header;
    +@@ http.c: static void finish_active_slot(struct active_request_slot *slot)
    + 	if (slot->results != NULL) {
    + 		slot->results->curl_result = slot->curl_result;
    + 		slot->results->http_code = slot->http_code;
    +-#if LIBCURL_VERSION_NUM >= 0x070a08
    + 		curl_easy_getinfo(slot->curl, CURLINFO_HTTPAUTH_AVAIL,
    + 				  &slot->results->auth_avail);
    +-#else
    +-		slot->results->auth_avail = 0;
    +-#endif
      
    --#if LIBCURL_VERSION_NUM >= 0x073400
    -+#ifdef GIT_CURL_HAVE_CURLOPT_PROXY_KEYPASSWD_and_SSLCERT_and_SSLKEY
    - static int has_proxy_cert_password(void)
    - {
    - 	if (http_proxy_ssl_cert == NULL || proxy_ssl_cert_password_required != 1)
    -@@ http.c: static int has_proxy_cert_password(void)
    + 		curl_easy_getinfo(slot->curl, CURLINFO_HTTP_CONNECTCODE,
    + 			&slot->results->http_connectcode);
    +@@ http.c: static int http_options(const char *var, const char *value, void *cb)
    + 		return git_config_string(&ssl_version, var, value);
    + 	if (!strcmp("http.sslcert", var))
    + 		return git_config_pathname(&ssl_cert, var, value);
    +-#if LIBCURL_VERSION_NUM >= 0x070903
    + 	if (!strcmp("http.sslkey", var))
    + 		return git_config_pathname(&ssl_key, var, value);
    +-#endif
    +-#if LIBCURL_VERSION_NUM >= 0x070908
    + 	if (!strcmp("http.sslcapath", var))
    + 		return git_config_pathname(&ssl_capath, var, value);
    +-#endif
    + 	if (!strcmp("http.sslcainfo", var))
    + 		return git_config_pathname(&ssl_cainfo, var, value);
    + 	if (!strcmp("http.sslcertpasswordprotected", var)) {
    +@@ http.c: static int curl_empty_auth_enabled(void)
    + 	if (curl_empty_auth >= 0)
    + 		return curl_empty_auth;
    + 
    +-#ifndef LIBCURL_CAN_HANDLE_AUTH_ANY
    +-	/*
    +-	 * Our libcurl is too old to do AUTH_ANY in the first place;
    +-	 * just default to turning the feature off.
    +-	 */
    +-#else
    + 	/*
    + 	 * In the automatic case, kick in the empty-auth
    + 	 * hack as long as we would potentially try some
    +@@ http.c: static int curl_empty_auth_enabled(void)
    + 	if (http_auth_methods_restricted &&
    + 	    (http_auth_methods & ~empty_auth_useless))
    + 		return 1;
    +-#endif
    + 	return 0;
      }
    - #endif
      
    --#if LIBCURL_VERSION_NUM >= 0x071900
    -+#ifdef GITCURL_HAVE_CURLOPT_TCP_KEEPALIVE
    - static void set_curl_keepalive(CURL *c)
    - {
    - 	curl_easy_setopt(c, CURLOPT_TCP_KEEPALIVE, 1);
    -@@ http.c: static int sockopt_callback(void *client, curl_socket_t fd, curlsocktype type)
    - 	if (rc < 0)
    - 		warning_errno("unable to set SO_KEEPALIVE on socket");
    +@@ http.c: static void init_curl_proxy_auth(CURL *result)
      
    --	return 0; /* CURL_SOCKOPT_OK only exists since curl 7.21.5 */
    -+#ifdef GITCURL_HAVE_CURL_SOCKOPT_OK
    -+	return CURL_SOCKOPT_OK;
    -+#else
    -+	return 0;
    -+#endif
    - }
    + 	var_override(&http_proxy_authmethod, getenv("GIT_HTTP_PROXY_AUTHMETHOD"));
      
    - static void set_curl_keepalive(CURL *c)
    -@@ http.c: static long get_curl_allowed_protocols(int from_user)
    - 	return allowed_protocols;
    +-#if LIBCURL_VERSION_NUM >= 0x070a07 /* CURLOPT_PROXYAUTH and CURLAUTH_ANY */
    + 	if (http_proxy_authmethod) {
    + 		int i;
    + 		for (i = 0; i < ARRAY_SIZE(proxy_authmethods); i++) {
    +@@ http.c: static void init_curl_proxy_auth(CURL *result)
    + 	}
    + 	else
    + 		curl_easy_setopt(result, CURLOPT_PROXYAUTH, CURLAUTH_ANY);
    +-#endif
      }
      
    --#if LIBCURL_VERSION_NUM >=0x072f00
    -+#ifdef GIT_CURL_HAVE_CURL_HTTP_VERSION_2
    - static int get_curl_http_version_opt(const char *version_string, long *opt)
    - {
    - 	int i;
    + static int has_cert_password(void)
     @@ http.c: static CURL *get_curl_handle(void)
    - 		curl_easy_setopt(result, CURLOPT_SSL_VERIFYHOST, 2);
    - 	}
    +     }
    + #endif
      
    --#if LIBCURL_VERSION_NUM >= 0x072f00 // 7.47.0
    -+#ifdef GIT_CURL_HAVE_CURL_HTTP_VERSION_2
    -     if (curl_http_version) {
    - 		long opt;
    - 		if (!get_curl_http_version_opt(curl_http_version, &opt)) {
    -@@ http.c: static CURL *get_curl_handle(void)
    +-#if LIBCURL_VERSION_NUM >= 0x070907
    + 	curl_easy_setopt(result, CURLOPT_NETRC, CURL_NETRC_OPTIONAL);
    +-#endif
    +-#ifdef LIBCURL_CAN_HANDLE_AUTH_ANY
    + 	curl_easy_setopt(result, CURLOPT_HTTPAUTH, CURLAUTH_ANY);
    +-#endif
      
    - 	if (http_ssl_backend && !strcmp("schannel", http_ssl_backend) &&
    - 	    !http_schannel_check_revoke) {
    --#if LIBCURL_VERSION_NUM >= 0x072c00
    -+#ifdef GIT_CURL_HAVE_CURLSSLOPT_NO_REVOKE
    - 		curl_easy_setopt(result, CURLOPT_SSL_OPTIONS, CURLSSLOPT_NO_REVOKE);
    - #else
    - 		warning(_("CURLSSLOPT_NO_REVOKE not supported with cURL < 7.44.0"));
    + #ifdef CURLGSSAPI_DELEGATION_FLAG
    + 	if (curl_deleg) {
     @@ http.c: static CURL *get_curl_handle(void)
    + 		curl_easy_setopt(result, CURLOPT_SSLCERT, ssl_cert);
    + 	if (has_cert_password())
    + 		curl_easy_setopt(result, CURLOPT_KEYPASSWD, cert_auth.password);
    +-#if LIBCURL_VERSION_NUM >= 0x070903
    + 	if (ssl_key != NULL)
      		curl_easy_setopt(result, CURLOPT_SSLKEY, ssl_key);
    +-#endif
    +-#if LIBCURL_VERSION_NUM >= 0x070908
      	if (ssl_capath != NULL)
      		curl_easy_setopt(result, CURLOPT_CAPATH, ssl_capath);
    --#if LIBCURL_VERSION_NUM >= 0x072c00
    -+#ifdef GIT_CURL_HAVE_CURLOPT_PINNEDPUBLICKEY
    +-#endif
    + #if LIBCURL_VERSION_NUM >= 0x072c00
      	if (ssl_pinnedkey != NULL)
      		curl_easy_setopt(result, CURLOPT_PINNEDPUBLICKEY, ssl_pinnedkey);
    - #endif
    - 	if (http_ssl_backend && !strcmp("schannel", http_ssl_backend) &&
    - 	    !http_schannel_use_ssl_cainfo) {
    - 		curl_easy_setopt(result, CURLOPT_CAINFO, NULL);
    --#if LIBCURL_VERSION_NUM >= 0x073400
    -+#ifdef GIT_CURL_HAVE_CURLOPT_PROXY_CAINFO
    - 		curl_easy_setopt(result, CURLOPT_PROXY_CAINFO, NULL);
    - #endif
    - 	} else if (ssl_cainfo != NULL || http_proxy_ssl_ca_info != NULL) {
    - 		if (ssl_cainfo != NULL)
    - 			curl_easy_setopt(result, CURLOPT_CAINFO, ssl_cainfo);
    --#if LIBCURL_VERSION_NUM >= 0x073400
    -+#ifdef GIT_CURL_HAVE_CURLOPT_PROXY_CAINFO
    - 		if (http_proxy_ssl_ca_info != NULL)
    - 			curl_easy_setopt(result, CURLOPT_PROXY_CAINFO, http_proxy_ssl_ca_info);
    - #endif
    -@@ http.c: static CURL *get_curl_handle(void)
    - 		else if (starts_with(curl_http_proxy, "socks"))
    - 			curl_easy_setopt(result,
    - 				CURLOPT_PROXYTYPE, CURLPROXY_SOCKS4);
    --#if LIBCURL_VERSION_NUM >= 0x073400
    -+#ifdef GIT_CURL_HAVE_CURLOPT_PROXY_KEYPASSWD_and_SSLCERT_and_SSLKEY
    - 		else if (starts_with(curl_http_proxy, "https")) {
    - 			curl_easy_setopt(result, CURLOPT_PROXYTYPE, CURLPROXY_HTTPS);
    - 
     @@ http.c: void http_init(struct remote *remote, const char *url, int proactive_auth)
    - 	free(normalized_url);
    - 	string_list_clear(&config.vars, 1);
    + 		curl_ssl_verify = 0;
    + 
    + 	set_from_env(&ssl_cert, "GIT_SSL_CERT");
    +-#if LIBCURL_VERSION_NUM >= 0x070903
    + 	set_from_env(&ssl_key, "GIT_SSL_KEY");
    +-#endif
    +-#if LIBCURL_VERSION_NUM >= 0x070908
    + 	set_from_env(&ssl_capath, "GIT_SSL_CAPATH");
    +-#endif
    + 	set_from_env(&ssl_cainfo, "GIT_SSL_CAINFO");
      
    --#if LIBCURL_VERSION_NUM >= 0x073800
    -+#ifdef GIT_CURL_HAVE_CURLSSLSET_NO_BACKENDS_and_OK_and_TOO_LATE_and_UNKNOWN_BACKEND
    - 	if (http_ssl_backend) {
    - 		const curl_ssl_backend **backends;
    - 		struct strbuf buf = STRBUF_INIT;
    + 	set_from_env(&user_agent, "GIT_HTTP_USER_AGENT");
    +@@ http.c: struct active_request_slot *get_active_slot(void)
    + 	else
    + 		curl_easy_setopt(slot->curl, CURLOPT_FOLLOWLOCATION, 0);
    + 
    +-#if LIBCURL_VERSION_NUM >= 0x070a08
    + 	curl_easy_setopt(slot->curl, CURLOPT_IPRESOLVE, git_curl_ipresolve);
    +-#endif
    +-#ifdef LIBCURL_CAN_HANDLE_AUTH_ANY
    + 	curl_easy_setopt(slot->curl, CURLOPT_HTTPAUTH, http_auth_methods);
    +-#endif
    + 	if (http_auth.password || curl_empty_auth_enabled())
    + 		init_curl_http_auth(slot->curl);
    + 
    +@@ http.c: static int handle_curl_result(struct slot_results *results)
    + 			credential_reject(&http_auth);
    + 			return HTTP_NOAUTH;
    + 		} else {
    +-#ifdef LIBCURL_CAN_HANDLE_AUTH_ANY
    + 			http_auth_methods &= ~CURLAUTH_GSSNEGOTIATE;
    + 			if (results->auth_avail) {
    + 				http_auth_methods &= results->auth_avail;
    + 				http_auth_methods_restricted = 1;
    + 			}
    +-#endif
    + 			return HTTP_REAUTH;
    + 		}
    + 	} else {
     
    - ## imap-send.c ##
    -@@ imap-send.c: static CURL *setup_curl(struct imap_server_conf *srvc, struct credential *cred)
    - 	curl_easy_setopt(curl, CURLOPT_PORT, server.port);
    + ## http.h ##
    +@@
    + #define DEFAULT_MAX_REQUESTS 5
    + #endif
      
    - 	if (server.auth_method) {
    --#if LIBCURL_VERSION_NUM < 0x072200
    --		warning("No LOGIN_OPTIONS support in this cURL version");
    --#else
    -+#ifdef GIT_CURL_HAVE_CURLOPT_LOGIN_OPTIONS
    - 		struct strbuf auth = STRBUF_INIT;
    - 		strbuf_addstr(&auth, "AUTH=");
    - 		strbuf_addstr(&auth, server.auth_method);
    - 		curl_easy_setopt(curl, CURLOPT_LOGIN_OPTIONS, auth.buf);
    - 		strbuf_release(&auth);
    -+#else
    -+		warning("No LOGIN_OPTIONS support in this cURL version");
    +-#if LIBCURL_VERSION_NUM < 0x070704
    +-#define curl_global_cleanup() do { /* nothing */ } while (0)
    +-#endif
    +-
    +-#if LIBCURL_VERSION_NUM < 0x070800
    +-#define curl_global_init(a) do { /* nothing */ } while (0)
    +-#elif LIBCURL_VERSION_NUM >= 0x070c00
    ++#if LIBCURL_VERSION_NUM >= 0x070c00
    + #define curl_global_init(a) curl_global_init_mem(a, xmalloc, free, \
    + 						xrealloc, xstrdup, xcalloc)
    + #endif
    +@@
    + #define NO_CURL_EASY_DUPHANDLE
      #endif
    - 	}
      
    +-#if LIBCURL_VERSION_NUM < 0x070a03
    +-#define CURLE_HTTP_RETURNED_ERROR CURLE_HTTP_NOT_FOUND
    +-#endif
    +-
    + #if LIBCURL_VERSION_NUM < 0x070c03
    + #define NO_CURL_IOCTL
    + #endif
    +
    + ## remote-curl.c ##
    +@@ remote-curl.c: static int set_option(const char *name, const char *value)
    + 						 strbuf_detach(&unquoted, NULL));
    + 		}
    + 		return 0;
    +-
    +-#if LIBCURL_VERSION_NUM >= 0x070a08
    + 	} else if (!strcmp(name, "family")) {
    + 		if (!strcmp(value, "ipv4"))
    + 			git_curl_ipresolve = CURL_IPRESOLVE_V4;
    +@@ remote-curl.c: static int set_option(const char *name, const char *value)
    + 		else
    + 			return -1;
    + 		return 0;
    +-#endif /* LIBCURL_VERSION_NUM >= 0x070a08 */
    + 	} else if (!strcmp(name, "from-promisor")) {
    + 		options.from_promisor = 1;
    + 		return 0;
-:  ----------- > 2:  fb308258e2b http: drop support for curl < 7.16.0
2:  230b968382f ! 3:  74e63b3acb0 http: drop support for curl < 7.19.3 and <= 7.16.4 (or <7.17.0) (again)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    http: drop support for curl < 7.19.3 and <= 7.16.4 (or <7.17.0) (again)
    +    http: drop support for curl < 7.17.0
     
    -    Remove the conditional use of CURLAUTH_DIGEST_IE and
    -    CURLOPT_USE_SSL. These two have been split from earlier simpler checks
    -    against LIBCURL_VERSION_NUM for ease of review.
    +    In the last commit we dropped support for curl < 7.16.0, let's
    +    continue that and drop support for versions older than 7.17.0. This
    +    allows us to simplify the code by getting rid of some "#ifdef"'s to do
    +    with the CURLOPT_USE_SSL flag.
     
    -    The CURLAUTH_DIGEST_IE flag was added in 7.19.3[1], and
    -    CURLOPT_USE_SSL in 7.16.4[2] or 7.17.0[3], depending on the source. As
    -    noted in [2] it was then renamed around that time from the older
    -    CURLOPT_FTP_SSL.
    +    The CURLOPT_USE_SSL flag was added in 7.17.0 as an alias for
    +    CURLOPT_FTP_SSL[1].
     
    -    1. https://curl.se/libcurl/c/CURLOPT_HTTPAUTH.html
    -    2. https://curl.se/libcurl/c/CURLOPT_USE_SSL.html
    -    3. https://github.com/curl/curl/blob/master/docs/libcurl/symbols-in-versions
    +    The documentation[1] currently claims that it was introduced in
    +    7.16.4, but the symbols-in-versions file correctly states
    +    7.17.0[2].
    +
    +    I've submitted an upstream
    +    patch (<patch-1.1-953bab490-20210730T170510Z-avarab@gmail.com>) to the
    +    curl-library mailing list fix the documentation.
    +
    +    1. https://curl.se/libcurl/c/CURLOPT_USE_SSL.html
    +    2. https://github.com/curl/curl/blob/master/docs/libcurl/symbols-in-versions
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## http.c ##
    -@@ http.c: static int http_auth_methods_restricted;
    - /* Modes for which empty_auth cannot actually help us. */
    - static unsigned long empty_auth_useless =
    - 	CURLAUTH_BASIC
    --#ifdef CURLAUTH_DIGEST_IE
    - 	| CURLAUTH_DIGEST_IE
    --#endif
    - 	| CURLAUTH_DIGEST;
    - 
    - static struct curl_slist *pragma_header;
     @@ http.c: static CURL *get_curl_handle(void)
      	if (curl_ftp_no_epsv)
      		curl_easy_setopt(result, CURLOPT_FTP_USE_EPSV, 0);
    @@ http.c: static CURL *get_curl_handle(void)
     
      ## http.h ##
     @@
    - 
    - #define DEFAULT_MAX_REQUESTS 5
    + #define NO_CURL_EASY_DUPHANDLE
    + #endif
      
     -/*
     - * CURLOPT_USE_SSL was known as CURLOPT_FTP_SSL up to 7.16.4,
3:  b857a9ef7b1 ! 4:  c49d029f408 http: drop support for curl < 7.18.0 (again)
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    http: drop support for curl < 7.18.0 (again)
    +    http: drop support for curl < 7.18.0
     
    -    In a preceding commit we dropped support for curl < 7.19.4, so we can
    -    drop support for this non-obvious dependency on curl < 7.18.0.
    +    In a preceding commit we dropped support for curl < 7.17.0, let's
    +    continue that and drop support for versions older than 7.18.0. This
    +    allows us to get rid of some now-obsolete #ifdefs around
    +    "CURLPROXY_SOCKS".
     
    -    It's non-obvious because in curl's hex version notation 0x071800 is
    -    version 7.24.0, *not* 7.18.0, so at a glance this patch looks
    -    incorrect.
    +    This change looks incorrect at first sight, because in curl's hex
    +    version notation 0x071800 is version 7.24.0, *not* 7.18.0.
     
         But it's correct, because the existing version check being removed
    -    here is wrong. The check guards use of the following curl defines:
    +    here is wrong. The check guards use of the following curl options,
    +    introduced at these respective versions[1]:
     
             CURLPROXY_SOCKS4                7.10
             CURLPROXY_SOCKS4A               7.18.0
    @@ Commit message
     
         I.e. the oldest version that has these is in fact 7.18.0, not
         7.24.0. That we were checking 7.24.0 is just an mistake in
    -    6d7afe07f29 (remote-http(s): support SOCKS proxies, 2015-10-26),
    -    i.e. its author confusing base 10 and base 16.
    +    6d7afe07f29 (remote-http(s): support SOCKS proxies, 2015-10-26) that
    +    slipped past review. I.e. the version check confusing base 10 and with
    +    base 16.
    +
    +    1. https://github.com/curl/curl/blob/master/docs/libcurl/symbols-in-versions
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
-:  ----------- > 5:  5152761e4bb http: drop support for curl < 7.19.3
1:  9fcd3a3e486 ! 6:  58e76d5c5d6 http: drop support for curl < 7.19.4
    @@ Commit message
         http: drop support for curl < 7.19.4
     
         In the last commit we dropped support for curl < 7.16.0, let's
    -    continue that and drop support for versions older than 7.19.4. This
    +    continue that and drop support for versions older than 7.19.3. This
         allows us to simplify the code by getting rid of some "#ifdef"'s.
     
         Git was broken with vanilla curl < 7.19.4 from v2.12.0 until
    @@ http.h
     -#define NO_CURL_EASY_DUPHANDLE
     -#endif
     -
    - /*
    -  * CURLOPT_USE_SSL was known as CURLOPT_FTP_SSL up to 7.16.4,
    -  * and the constants were known as CURLFTPSSL_*
    + struct slot_results {
    + 	CURLcode curl_result;
    + 	long http_code;
4:  95e42b17ce8 = 7:  80a746312a7 http: rename CURLOPT_FILE to CURLOPT_WRITEDATA
-- 
2.32.0.1071.g36f34456314

