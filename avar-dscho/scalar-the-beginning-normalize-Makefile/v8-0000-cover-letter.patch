From 493bf0ac978405f41509b19c71ea2a09ab6bbb72 Mon Sep 17 00:00:00 2001
Message-Id: <cover-v8-0.2-00000000000-20210923T091717Z-avarab@gmail.com>
In-Reply-To: <cover-v7-0.2-00000000000-20210919T075619Z-avarab@gmail.com>
References: <cover-v7-0.2-00000000000-20210919T075619Z-avarab@gmail.com>
From: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
Date: Thu, 23 Sep 2021 11:17:17 +0200
Subject: [PATCH v8 0/2] *** SUBJECT HERE ***
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

*** BLURB HERE ***

Ævar Arnfjörð Bjarmason (2):
  Makefile: fix scalar "make objects" regression
  scalar: move to root & build with top-level Makefile

 .gitignore                                   |  1 +
 Documentation/Makefile                       |  3 +
 {contrib/scalar => Documentation}/scalar.txt |  4 +-
 Makefile                                     | 44 +++++++----
 contrib/scalar/.gitignore                    |  5 --
 contrib/scalar/Makefile                      | 57 --------------
 contrib/scalar/t/Makefile                    | 78 --------------------
 contrib/scalar/scalar.c => scalar.c          |  0
 {contrib/scalar/t => t}/t9099-scalar.sh      |  8 +-
 9 files changed, 37 insertions(+), 163 deletions(-)
 rename {contrib/scalar => Documentation}/scalar.txt (99%)
 delete mode 100644 contrib/scalar/.gitignore
 delete mode 100644 contrib/scalar/Makefile
 delete mode 100644 contrib/scalar/t/Makefile
 rename contrib/scalar/scalar.c => scalar.c (100%)
 rename {contrib/scalar/t => t}/t9099-scalar.sh (94%)

Range-diff against v7:
1:  fc7ba4cb1c3 < -:  ----------- Makefile: add SANITIZE=leak flag to GIT-BUILD-OPTIONS
-:  ----------- > 1:  0c1f3db0ea4 Makefile: fix scalar "make objects" regression
2:  56592952db5 ! 2:  493bf0ac978 tests: add a test mode for SANITIZE=leak, run it in CI
    @@ Metadata
     Author: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
     
      ## Commit message ##
    -    tests: add a test mode for SANITIZE=leak, run it in CI
    +    scalar: move to root & build with top-level Makefile
     
    -    While git can be compiled with SANITIZE=leak, we have not run
    -    regression tests under that mode. Memory leaks have only been fixed as
    -    one-offs without structured regression testing.
    +    A WIP patch that should simplify things quite a bit. See the thread at
    +    https://lore.kernel.org/git/87ilz3nhfg.fsf@evledraar.gmail.com/
     
    -    This change adds CI testing for it. We'll now build and small set of
    -    whitelisted t00*.sh tests under Linux with a new job called
    -    "linux-leaks".
    -
    -    The CI target uses a new GIT_TEST_PASSING_SANITIZE_LEAK=true test
    -    mode. When running in that mode, we'll assert that we were compiled
    -    with SANITIZE=leak. We'll then skip all tests, except those that we've
    -    opted-in by setting "TEST_PASSES_SANITIZE_LEAK=true".
    -
    -    A test setting "TEST_PASSES_SANITIZE_LEAK=true" setting can in turn
    -    make use of the "SANITIZE_LEAK" prerequisite, should they wish to
    -    selectively skip tests even under
    -    "GIT_TEST_PASSING_SANITIZE_LEAK=true". In the preceding commit we
    -    started doing this in "t0004-unwritable.sh" under SANITIZE=leak, now
    -    it'll combine nicely with "GIT_TEST_PASSING_SANITIZE_LEAK=true".
    -
    -    This is how tests that don't set "TEST_PASSES_SANITIZE_LEAK=true" will
    -    be skipped under GIT_TEST_PASSING_SANITIZE_LEAK=true:
    -
    -        $ GIT_TEST_PASSING_SANITIZE_LEAK=true ./t0001-init.sh
    -        1..0 # SKIP skip all tests in t0001 under SANITIZE=leak, TEST_PASSES_SANITIZE_LEAK not set
    -
    -    The intent is to add more TEST_PASSES_SANITIZE_LEAK=true annotations
    -    as follow-up change, but let's start small to begin with.
    -
    -    It would also be possible to implement a more lightweight version of
    -    this by only relying on setting "LSAN_OPTIONS". See
    -    <YS9OT/pn5rRK9cGB@coredump.intra.peff.net>[1] and
    -    <YS9ZIDpANfsh7N+S@coredump.intra.peff.net>[2] for a discussion of
    -    that. I've opted for this approach of adding a GIT_TEST_* mode instead
    -    because it's consistent with how we handle other special test modes.
    -
    -    Being able to add a "!SANITIZE_LEAK" prerequisite and calling
    -    "test_done" early if it isn't satisfied also means that we can more
    -    incrementally add regression tests without being forced to fix
    -    widespread and hard-to-fix leaks at the same time.
    -
    -    We have tests that do simple checking of some tool we're interested
    -    in, but later on in the script might be stressing trace2, or common
    -    sources of leaks like "git log" in combination with the tool (e.g. the
    -    commit-graph tests). To be clear having a prerequisite could also be
    -    accomplished by using "LSAN_OPTIONS" directly.
    -
    -    On the topic of "LSAN_OPTIONS": It would be nice to have a mode to
    -    aggregate all failures in our various scripts, see [2] for a start at
    -    doing that which sets "log_path" in "LSAN_OPTIONS". I've punted on
    -    that for now, it can be added later.
    -
    -    As of writing this we've got major regressions between master..seen,
    -    i.e. the t000*.sh tests and more fixed since 31f9acf9ce2 (Merge branch
    -    'ah/plugleaks', 2021-08-04) have regressed recently.
    -
    -    See the discussion at <87czsv2idy.fsf@evledraar.gmail.com>[3] about
    -    the lack of this sort of test mode, and 0e5bba53af (add UNLEAK
    -    annotation for reducing leak false positives, 2017-09-08) for the
    -    initial addition of SANITIZE=leak.
    -
    -    See also 09595ab381 (Merge branch 'jk/leak-checkers', 2017-09-19),
    -    7782066f67 (Merge branch 'jk/apache-lsan', 2019-05-19) and the recent
    -    936e58851a (Merge branch 'ah/plugleaks', 2021-05-07) for some of the
    -    past history of "one-off" SANITIZE=leak (and more) fixes.
    -
    -    As noted in [5] we can't support this on OSX yet until Clang 14 is
    -    released, at that point we'll probably want to resurrect that
    -    "osx-leaks" job.
    -
    -    1. https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
    -    2. https://lore.kernel.org/git/YS9OT%2Fpn5rRK9cGB@coredump.intra.peff.net/
    -    3. https://lore.kernel.org/git/87czsv2idy.fsf@evledraar.gmail.com/
    -    4. https://lore.kernel.org/git/YS9ZIDpANfsh7N+S@coredump.intra.peff.net/
    -    5. https://lore.kernel.org/git/20210916035603.76369-1-carenas@gmail.com/
    +    We still redundantly drop A "scalar" into libexec here, and there's
    +    potential bug with defining INSTALL_SCALAR in config.mak, which we may
    +    not have read early enough.
     
         Signed-off-by: Ævar Arnfjörð Bjarmason <avarab@gmail.com>
    -    Signed-off-by: Carlo Marcelo Arenas Belón <carenas@gmail.com>
     
    - ## .github/workflows/main.yml ##
    -@@ .github/workflows/main.yml: jobs:
    -           - jobname: linux-gcc-default
    -             cc: gcc
    -             pool: ubuntu-latest
    -+          - jobname: linux-leaks
    -+            cc: gcc
    -+            pool: ubuntu-latest
    -     env:
    -       CC: ${{matrix.vector.cc}}
    -       jobname: ${{matrix.vector.jobname}}
    -
    - ## ci/install-dependencies.sh ##
    -@@ ci/install-dependencies.sh: UBUNTU_COMMON_PKGS="make libssl-dev libcurl4-openssl-dev libexpat-dev
    -  libemail-valid-perl libio-socket-ssl-perl libnet-smtp-ssl-perl"
    + ## .gitignore ##
    +@@
    + /configure
    + /.vscode/
    + /tags
    ++/scalar
    + /TAGS
    + /cscope*
    + /compile_commands.json
    +
    + ## Documentation/Makefile ##
    +@@ Documentation/Makefile: MAN1_TXT += $(filter-out \
    + MAN1_TXT += git.txt
    + MAN1_TXT += gitk.txt
    + MAN1_TXT += gitweb.txt
    ++ifndef NO_INSTALL_SCALAR_DOC
    ++MAN1_TXT += scalar.txt
    ++endif
      
    - case "$jobname" in
    --linux-clang|linux-gcc)
    -+linux-clang|linux-gcc|linux-leaks)
    - 	sudo apt-add-repository -y "ppa:ubuntu-toolchain-r/test"
    - 	sudo apt-get -q update
    - 	sudo apt-get -q -y install language-pack-is libsvn-perl apache2 \
    + # man5 / man7 guides (note: new guides should also be added to command-list.txt)
    + MAN5_TXT += gitattributes.txt
     
    - ## ci/lib.sh ##
    -@@ ci/lib.sh: export GIT_TEST_CLONE_2GB=true
    - export SKIP_DASHED_BUILT_INS=YesPlease
    + ## contrib/scalar/scalar.txt => Documentation/scalar.txt ##
    +@@ Documentation/scalar.txt: SEE ALSO
    + --------
    + linkgit:git-clone[1], linkgit:git-maintenance[1].
      
    - case "$jobname" in
    --linux-clang|linux-gcc)
    -+linux-clang|linux-gcc|linux-leaks)
    - 	if [ "$jobname" = linux-gcc ]
    - 	then
    - 		export CC=gcc-8
    -@@ ci/lib.sh: linux-musl)
    - 	;;
    - esac
    +-Scalar
    ++GIT
    + ---
    +-Associated with the linkgit:git[1] suite
    ++Part of the linkgit:git[1] suite
    +
    + ## Makefile ##
    +@@ Makefile: LIB_OBJS =
    + LIB_OBJS_NO_COMPAT_OBJS =
    + OBJECTS =
    + PROGRAM_OBJS =
    ++SCALAR_OBJS =
    + SCRIPT_LIB =
    + SCRIPT_PERL =
    + SCRIPT_PROGRAMS =
    +@@ Makefile: BUILT_INS += $(BUILT_INS_EXTRA)
      
    -+case "$jobname" in
    -+linux-leaks)
    -+	export SANITIZE=leak
    -+	export GIT_TEST_PASSING_SANITIZE_LEAK=true
    -+	;;
    -+esac
    -+
    - MAKEFLAGS="$MAKEFLAGS CC=${CC:-cc}"
    -
    - ## ci/run-build-and-tests.sh ##
    -@@ ci/run-build-and-tests.sh: fi
    + # what 'all' will build but not install in gitexecdir
    + OTHER_PROGRAMS = git$X
    ++OTHER_PROGRAMS += scalar$X
    + ARTIFACTS_TAR += $(OTHER_PROGRAMS)
      
    - make
    - case "$jobname" in
    --linux-gcc)
    -+linux-gcc|linux-leaks)
    - 	export GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME=main
    - 	make test
    - 	export GIT_TEST_SPLIT_INDEX=yes
    -
    - ## t/README ##
    -@@ t/README: excluded as so much relies on it, but this might change in the future.
    - GIT_TEST_SPLIT_INDEX=<boolean> forces split-index mode on the whole
    - test suite. Accept any boolean values that are accepted by git-config.
    + # what test wrappers are needed and 'install' will install, in bindir
    +@@ Makefile: BINDIR_PROGRAMS_NEED_X += git-upload-pack
      
    -+GIT_TEST_PASSING_SANITIZE_LEAK=<boolean> when compiled with
    -+SANITIZE=leak will run only those tests that have whitelisted
    -+themselves as passing with no memory leaks. Tests can be whitelisted
    -+by setting "TEST_PASSES_SANITIZE_LEAK=true" before sourcing
    -+"test-lib.sh" itself at the top of the test script. This test mode is
    -+used by the "linux-leaks" CI target.
    -+
    - GIT_TEST_PROTOCOL_VERSION=<n>, when set, makes 'protocol.version'
    - default to n.
    + BINDIR_PROGRAMS_NO_X += git-cvsserver
      
    -
    - ## t/t0004-unwritable.sh ##
    -@@
    ++ifdef INSTALL_SCALAR
    ++BINDIR_PROGRAMS_NEED_X += scalar
    ++endif
    + INSTALL_BINDIR_XPROGRAMS += $(patsubst %,%$X,$(BINDIR_PROGRAMS_NEED_X))
    + INSTALL_BINDIR_PROGRAMS += $(INSTALL_BINDIR_XPROGRAMS) $(BINDIR_PROGRAMS_NO_X)
      
    - test_description='detect unwritable repository and fail correctly'
    + # We have bin-wrappers for programs that we don't install
    + TEST_BINDIR_PROGRAMS_NEED_X += $(BINDIR_PROGRAMS_NEED_X)
    + TEST_BINDIR_PROGRAMS_NEED_X += $(TEST_PROGRAMS_NEED_X)
    ++ifndef INSTALL_SCALAR
    ++TEST_BINDIR_PROGRAMS_NEED_X += scalar$X
    ++endif
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + TEST_BINDIR_PROGRAMS += $(TEST_BINDIR_PROGRAMS_NEED_X)
    + TEST_BINDIR_PROGRAMS += $(BINDIR_PROGRAMS_NO_X)
    +@@ Makefile: please_set_SHELL_PATH_to_a_more_modern_shell:
      
    - test_expect_success setup '
    -
    - ## t/t0011-hashmap.sh ##
    -@@
    - #!/bin/sh
    + shell_compatibility_test: please_set_SHELL_PATH_to_a_more_modern_shell
      
    - test_description='test hashmap and string hash functions'
    -+
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +-strip: $(BIN_PROGRAMS) git$X
    ++strip: $(BIN_PROGRAMS) git$X scalar$X
    + 	$(STRIP) $(STRIP_OPTS) $^
      
    - test_hashmap() {
    -
    - ## t/t0016-oidmap.sh ##
    -@@
    - #!/bin/sh
    + ### Flags affecting all rules
    +@@ Makefile: git$X: git.o GIT-LDFLAGS $(BUILTIN_OBJS) $(GITLIBS)
    + 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \
    + 		$(filter %.o,$^) $(LIBS)
      
    - test_description='test oidmap'
    ++scalar$X: scalar.o GIT-LDFLAGS $(GITLIBS)
    ++	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \
    ++		$(filter %.o,$^) $(LIBS)
     +
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + help.sp help.s help.o: command-list.h
      
    - # This purposefully is very similar to t0011-hashmap.sh
    -
    - ## t/t0017-env-helper.sh ##
    -@@
    + builtin/help.sp builtin/help.s builtin/help.o: config-list.h GIT-PREFIX
    +@@ Makefile: GIT_OBJS += git.o
    + .PHONY: git-objs
    + git-objs: $(GIT_OBJS)
      
    - test_description='test env--helper'
    ++SCALAR_OBJS += scalar.o
    ++.PHONY: scalar-objs
    ++scalar-objs: $(SCALAR_OBJS)
    ++
    + OBJECTS += $(GIT_OBJS)
    ++OBJECTS += $(SCALAR_OBJS)
    + OBJECTS += $(PROGRAM_OBJS)
    + OBJECTS += $(TEST_OBJS)
    + OBJECTS += $(XDIFF_OBJS)
    +@@ Makefile: OBJECTS += $(FUZZ_OBJS)
    + ifndef NO_CURL
    + 	OBJECTS += http.o http-walker.o remote-curl.o
    + endif
    +-SCALAR_SOURCES := contrib/scalar/scalar.c
    +-SCALAR_OBJECTS := $(SCALAR_SOURCES:c=o)
    + OBJECTS += $(SCALAR_OBJECTS)
    + .PHONY: objects
    + objects: $(OBJECTS)
    +@@ Makefile: $(REMOTE_CURL_PRIMARY): remote-curl.o http.o http-walker.o GIT-LDFLAGS $(GITLIBS
    + 	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) $(filter %.o,$^) \
    + 		$(CURL_LIBCURL) $(EXPAT_LIBEXPAT) $(LIBS)
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    +-contrib/scalar/scalar$X: $(SCALAR_OBJECTS) GIT-LDFLAGS $(GITLIBS)
    +-	$(QUIET_LINK)$(CC) $(ALL_CFLAGS) -o $@ $(ALL_LDFLAGS) \
    +-		$(filter %.o,$^) $(LIBS)
    +-
    + $(LIB_FILE): $(LIB_OBJS) $(LIB_COMPAT_OBJS)
    + 	$(QUIET_AR)$(RM) $@ && $(AR) $(ARFLAGS) $@ $^
      
    +@@ Makefile: endif
    + install-gitweb:
    + 	$(MAKE) -C gitweb install
      
    -
    - ## t/t0018-advice.sh ##
    -@@
    ++ifdef INSTALL_SCALAR
    ++NO_INSTALL_SCALAR_DOC =
    ++else
    ++NO_INSTALL_SCALAR_DOC = NoScalarPlease
    ++endif
    ++
    + install-doc: install-man-perl
    +-	$(MAKE) -C Documentation install
    ++	$(MAKE) -C Documentation install NO_INSTALL_SCALAR_DOC=$(NO_INSTALL_SCALAR_DOC)
      
    - test_description='Test advise_if_enabled functionality'
    + install-man: install-man-perl
    +-	$(MAKE) -C Documentation install-man
    ++	$(MAKE) -C Documentation install-man NO_INSTALL_SCALAR_DOC=$(NO_INSTALL_SCALAR_DOC)
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + install-man-perl: man-perl
    + 	$(INSTALL) -d -m 755 '$(DESTDIR_SQ)$(mandir_SQ)/man3'
    +@@ Makefile: install-man-perl: man-perl
    + 	(cd '$(DESTDIR_SQ)$(mandir_SQ)/man3' && umask 022 && $(TAR) xof -)
      
    - test_expect_success 'advice should be printed when config variable is unset' '
    -
    - ## t/t0030-stripspace.sh ##
    -@@
    + install-html:
    +-	$(MAKE) -C Documentation install-html
    ++	$(MAKE) -C Documentation install-html NO_INSTALL_SCALAR_DOC=$(NO_INSTALL_SCALAR_DOC)
      
    - test_description='git stripspace'
    + install-info:
    +-	$(MAKE) -C Documentation install-info
    ++	$(MAKE) -C Documentation install-info NO_INSTALL_SCALAR_DOC=$(NO_INSTALL_SCALAR_DOC)
      
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + install-pdf:
    +-	$(MAKE) -C Documentation install-pdf
    ++	$(MAKE) -C Documentation install-pdf NO_INSTALL_SCALAR_DOC=$(NO_INSTALL_SCALAR_DOC)
      
    - t40='A quick brown fox jumps over the lazy do'
    + quick-install-doc:
    + 	$(MAKE) -C Documentation quick-install
     
    - ## t/t0063-string-list.sh ##
    + ## contrib/scalar/.gitignore (deleted) ##
     @@
    - 
    - test_description='Test string list functionality'
    - 
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    - 
    - test_split () {
    +-/*.xml
    +-/*.1
    +-/*.html
    +-/*.exe
    +-/scalar
     
    - ## t/t0091-bugreport.sh ##
    + ## contrib/scalar/Makefile (deleted) ##
    +@@
    +-QUIET_SUBDIR0  = +$(MAKE) -C # space to separate -C and subdir
    +-QUIET_SUBDIR1  =
    +-
    +-ifneq ($(findstring s,$(MAKEFLAGS)),s)
    +-ifndef V
    +-	QUIET_GEN      = @echo '   ' GEN $@;
    +-	QUIET_SUBDIR0  = +@subdir=
    +-	QUIET_SUBDIR1  = ;$(NO_SUBDIR) echo '   ' SUBDIR $$subdir; \
    +-			 $(MAKE) $(PRINT_DIR) -C $$subdir
    +-	QUIET          = @
    +-else
    +-	export V
    +-endif
    +-endif
    +-
    +-all:
    +-
    +-include ../../config.mak.uname
    +--include ../../config.mak.autogen
    +--include ../../config.mak
    +-
    +-TARGETS = scalar$(X) scalar.o
    +-GITLIBS = ../../common-main.o ../../libgit.a ../../xdiff/lib.a
    +-
    +-all: scalar$X ../../bin-wrappers/scalar
    +-
    +-$(GITLIBS):
    +-	$(QUIET_SUBDIR0)../.. $(QUIET_SUBDIR1) $(subst ../../,,$@)
    +-
    +-$(TARGETS): $(GITLIBS) scalar.c
    +-	$(QUIET_SUBDIR0)../.. $(QUIET_SUBDIR1) $(patsubst %,contrib/scalar/%,$@)
    +-
    +-clean:
    +-	$(RM) $(TARGETS) ../../bin-wrappers/scalar
    +-	$(RM) scalar.1 scalar.html scalar.xml
    +-
    +-../../bin-wrappers/scalar: ../../wrap-for-bin.sh Makefile
    +-	@mkdir -p ../../bin-wrappers
    +-	$(QUIET_GEN)sed -e '1s|#!.*/sh|#!$(SHELL_PATH_SQ)|' \
    +-	     -e 's|@@BUILD_DIR@@|$(shell cd ../.. && pwd)|' \
    +-	     -e 's|@@PROG@@|contrib/scalar/scalar$(X)|' < $< > $@ && \
    +-	chmod +x $@
    +-
    +-test: all
    +-	$(MAKE) -C t
    +-
    +-docs: scalar.html scalar.1
    +-
    +-scalar.html: | scalar.1 # prevent them from trying to build `doc.dep` in parallel
    +-
    +-scalar.html scalar.1: scalar.txt
    +-	$(QUIET_SUBDIR0)../../Documentation$(QUIET_SUBDIR1) \
    +-		MAN_TXT=../contrib/scalar/scalar.txt \
    +-		../contrib/scalar/$@
    +-	$(QUIET)test scalar.1 != "$@" || mv ../../Documentation/$@ .
    +-
    +-.PHONY: all clean docs test FORCE
    +
    + ## contrib/scalar/t/Makefile (deleted) ##
    +@@
    +-# Run scalar tests
    +-#
    +-# Copyright (c) 2005,2021 Junio C Hamano, Johannes Schindelin
    +-#
    +-
    +--include ../../../config.mak.autogen
    +--include ../../../config.mak
    +-
    +-SHELL_PATH ?= $(SHELL)
    +-PERL_PATH ?= /usr/bin/perl
    +-RM ?= rm -f
    +-PROVE ?= prove
    +-DEFAULT_TEST_TARGET ?= test
    +-TEST_LINT ?= test-lint
    +-
    +-ifdef TEST_OUTPUT_DIRECTORY
    +-TEST_RESULTS_DIRECTORY = $(TEST_OUTPUT_DIRECTORY)/test-results
    +-else
    +-TEST_RESULTS_DIRECTORY = ../../../t/test-results
    +-endif
    +-
    +-# Shell quote;
    +-SHELL_PATH_SQ = $(subst ','\'',$(SHELL_PATH))
    +-PERL_PATH_SQ = $(subst ','\'',$(PERL_PATH))
    +-TEST_RESULTS_DIRECTORY_SQ = $(subst ','\'',$(TEST_RESULTS_DIRECTORY))
    +-
    +-T = $(sort $(wildcard t[0-9][0-9][0-9][0-9]-*.sh))
    +-
    +-all: $(DEFAULT_TEST_TARGET)
    +-
    +-test: $(TEST_LINT)
    +-	$(MAKE) aggregate-results-and-cleanup
    +-
    +-prove: $(TEST_LINT)
    +-	@echo "*** prove ***"; GIT_CONFIG=.git/config $(PROVE) --exec '$(SHELL_PATH_SQ)' $(GIT_PROVE_OPTS) $(T) :: $(GIT_TEST_OPTS)
    +-	$(MAKE) clean-except-prove-cache
    +-
    +-$(T):
    +-	@echo "*** $@ ***"; GIT_CONFIG=.git/config '$(SHELL_PATH_SQ)' $@ $(GIT_TEST_OPTS)
    +-
    +-clean-except-prove-cache:
    +-	$(RM) -r 'trash directory'.* '$(TEST_RESULTS_DIRECTORY_SQ)'
    +-	$(RM) -r valgrind/bin
    +-
    +-clean: clean-except-prove-cache
    +-	$(RM) .prove
    +-
    +-test-lint: test-lint-duplicates test-lint-executable test-lint-shell-syntax
    +-
    +-test-lint-duplicates:
    +-	@dups=`echo $(T) | tr ' ' '\n' | sed 's/-.*//' | sort | uniq -d` && \
    +-		test -z "$$dups" || { \
    +-		echo >&2 "duplicate test numbers:" $$dups; exit 1; }
    +-
    +-test-lint-executable:
    +-	@bad=`for i in $(T); do test -x "$$i" || echo $$i; done` && \
    +-		test -z "$$bad" || { \
    +-		echo >&2 "non-executable tests:" $$bad; exit 1; }
    +-
    +-test-lint-shell-syntax:
    +-	@'$(PERL_PATH_SQ)' ../../../t/check-non-portable-shell.pl $(T)
    +-
    +-aggregate-results-and-cleanup: $(T)
    +-	$(MAKE) aggregate-results
    +-	$(MAKE) clean
    +-
    +-aggregate-results:
    +-	for f in '$(TEST_RESULTS_DIRECTORY_SQ)'/t*-*.counts; do \
    +-		echo "$$f"; \
    +-	done | '$(SHELL_PATH_SQ)' ../../../t/aggregate-results.sh
    +-
    +-valgrind:
    +-	$(MAKE) GIT_TEST_OPTS="$(GIT_TEST_OPTS) --valgrind"
    +-
    +-test-results:
    +-	mkdir -p test-results
    +-
    +-.PHONY: $(T) aggregate-results clean valgrind
    +
    + ## contrib/scalar/scalar.c => scalar.c ##
    +
    + ## contrib/scalar/t/t9099-scalar.sh => t/t9099-scalar.sh ##
     @@
      
    - test_description='git bugreport'
    - 
    -+TEST_PASSES_SANITIZE_LEAK=true
    - . ./test-lib.sh
    + test_description='test the `scalar` command'
      
    - # Headers "[System Info]" will be followed by a non-empty line if we put some
    -
    - ## t/test-lib.sh ##
    -@@ t/test-lib.sh: then
    - 	test_done
    - fi
    +-TEST_DIRECTORY=$PWD/../../../t
    +-export TEST_DIRECTORY
    +-
    +-# Make it work with --no-bin-wrappers
    +-PATH=$PWD/..:$PATH
    +-
    +-. ../../../t/test-lib.sh
    ++. ./test-lib.sh
      
    -+# skip non-whitelisted tests when compiled with SANITIZE=leak
    -+if test -n "$SANITIZE_LEAK"
    -+then
    -+	if test_bool_env GIT_TEST_PASSING_SANITIZE_LEAK false
    -+	then
    -+		# We need to see it in "git env--helper" (via
    -+		# test_bool_env)
    -+		export TEST_PASSES_SANITIZE_LEAK
    -+
    -+		if ! test_bool_env TEST_PASSES_SANITIZE_LEAK false
    -+		then
    -+			skip_all="skipping $this_test under GIT_TEST_PASSING_SANITIZE_LEAK=true"
    -+			test_done
    -+		fi
    -+	fi
    -+elif test_bool_env GIT_TEST_PASSING_SANITIZE_LEAK false
    -+then
    -+	error "GIT_TEST_PASSING_SANITIZE_LEAK=true has no effect except when compiled with SANITIZE=leak"
    -+fi
    -+
    - # Last-minute variable setup
    - USER_HOME="$HOME"
    - HOME="$TRASH_DIRECTORY"
    + GIT_TEST_MAINT_SCHEDULER="crontab:test-tool crontab ../cron.txt"
    + export GIT_TEST_MAINT_SCHEDULER
-- 
2.33.0.1228.gdc65525c655

